/*
 * Bitwyre REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkInfo {
    /// The name of the network for the asset.
    #[serde(rename = "network_name", skip_serializing_if = "Option::is_none")]
    pub network_name: Option<String>,
    /// The network identifier.
    #[serde(rename = "network_id", skip_serializing_if = "Option::is_none")]
    pub network_id: Option<String>,
    /// The type of asset (coin or token).
    #[serde(rename = "asset_type", skip_serializing_if = "Option::is_none")]
    pub asset_type: Option<String>,
    /// Additional address tag, if any.
    #[serde(rename = "address_tag", skip_serializing_if = "Option::is_none")]
    pub address_tag: Option<String>,
    /// The type of token, if applicable.
    #[serde(rename = "token_type", skip_serializing_if = "Option::is_none")]
    pub token_type: Option<String>,
    /// The regular expression for validating the network's addresses.
    #[serde(rename = "address_regex", skip_serializing_if = "Option::is_none")]
    pub address_regex: Option<String>,
    /// Regular expression for validating memo/tag if applicable.
    #[serde(rename = "memo_regex", skip_serializing_if = "Option::is_none")]
    pub memo_regex: Option<String>,
    /// Whether the network requires an address tag.
    #[serde(rename = "is_contains_address_tag", skip_serializing_if = "Option::is_none")]
    pub is_contains_address_tag: Option<bool>,
    /// Indicates if deposit is enabled for the network.
    #[serde(rename = "is_network_deposit_enabled", skip_serializing_if = "Option::is_none")]
    pub is_network_deposit_enabled: Option<bool>,
    /// Indicates if withdrawal is enabled for the network.
    #[serde(rename = "is_network_withdraw_enabled", skip_serializing_if = "Option::is_none")]
    pub is_network_withdraw_enabled: Option<bool>,
    /// Whether this is the default network for the asset.
    #[serde(rename = "is_default_network", skip_serializing_if = "Option::is_none")]
    pub is_default_network: Option<bool>,
    /// Number of confirmations required for transactions on the network.
    #[serde(rename = "network_confirmations", skip_serializing_if = "Option::is_none")]
    pub network_confirmations: Option<i32>,
    /// Maximum withdrawal limit for the network.
    #[serde(rename = "max_withdrawal", skip_serializing_if = "Option::is_none")]
    pub max_withdrawal: Option<String>,
    /// Minimum deposit amount for the network.
    #[serde(rename = "min_deposit", skip_serializing_if = "Option::is_none")]
    pub min_deposit: Option<String>,
    /// Minimum withdrawal amount for the network.
    #[serde(rename = "min_withdrawal", skip_serializing_if = "Option::is_none")]
    pub min_withdrawal: Option<String>,
    /// Withdrawal fee for the network.
    #[serde(rename = "withdrawal_fee", skip_serializing_if = "Option::is_none")]
    pub withdrawal_fee: Option<String>,
    /// Description or notes related to deposits on this network.
    #[serde(rename = "deposit_desc", skip_serializing_if = "Option::is_none")]
    pub deposit_desc: Option<String>,
    /// Description or notes related to withdrawals on this network.
    #[serde(rename = "withdraw_desc", skip_serializing_if = "Option::is_none")]
    pub withdraw_desc: Option<String>,
    /// URL to the block explorer for addresses.
    #[serde(rename = "explorer_address_url", skip_serializing_if = "Option::is_none")]
    pub explorer_address_url: Option<String>,
    /// URL to the block explorer for transactions.
    #[serde(rename = "explorer_tx_url", skip_serializing_if = "Option::is_none")]
    pub explorer_tx_url: Option<String>,
    /// Additional notes related to the network.
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
}

impl NetworkInfo {
    pub fn new() -> NetworkInfo {
        NetworkInfo {
            network_name: None,
            network_id: None,
            asset_type: None,
            address_tag: None,
            token_type: None,
            address_regex: None,
            memo_regex: None,
            is_contains_address_tag: None,
            is_network_deposit_enabled: None,
            is_network_withdraw_enabled: None,
            is_default_network: None,
            network_confirmations: None,
            max_withdrawal: None,
            min_deposit: None,
            min_withdrawal: None,
            withdrawal_fee: None,
            deposit_desc: None,
            withdraw_desc: None,
            explorer_address_url: None,
            explorer_tx_url: None,
            notes: None,
        }
    }
}

