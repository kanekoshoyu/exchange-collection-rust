/*
 * Bitwyre REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Symbol {
    #[serde(rename = "currency_code", skip_serializing_if = "Option::is_none")]
    pub currency_code: Option<String>,
    #[serde(rename = "data_status", skip_serializing_if = "Option::is_none")]
    pub data_status: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<String>,
    #[serde(rename = "has_daily", skip_serializing_if = "Option::is_none")]
    pub has_daily: Option<bool>,
    #[serde(rename = "has_empty_bars", skip_serializing_if = "Option::is_none")]
    pub has_empty_bars: Option<bool>,
    #[serde(rename = "has_intraday", skip_serializing_if = "Option::is_none")]
    pub has_intraday: Option<bool>,
    #[serde(rename = "has_weekly_and_monthly", skip_serializing_if = "Option::is_none")]
    pub has_weekly_and_monthly: Option<bool>,
    #[serde(rename = "intraday_multipliers", skip_serializing_if = "Option::is_none")]
    pub intraday_multipliers: Option<Vec<i32>>,
    #[serde(rename = "listed_exchange", skip_serializing_if = "Option::is_none")]
    pub listed_exchange: Option<String>,
    #[serde(rename = "minmov", skip_serializing_if = "Option::is_none")]
    pub minmov: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "pricescale", skip_serializing_if = "Option::is_none")]
    pub pricescale: Option<i32>,
    #[serde(rename = "session", skip_serializing_if = "Option::is_none")]
    pub session: Option<String>,
    #[serde(rename = "supported_resolutions", skip_serializing_if = "Option::is_none")]
    pub supported_resolutions: Option<Vec<String>>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "volume_precision", skip_serializing_if = "Option::is_none")]
    pub volume_precision: Option<i32>,
}

impl Symbol {
    pub fn new() -> Symbol {
        Symbol {
            currency_code: None,
            data_status: None,
            description: None,
            exchange: None,
            has_daily: None,
            has_empty_bars: None,
            has_intraday: None,
            has_weekly_and_monthly: None,
            intraday_multipliers: None,
            listed_exchange: None,
            minmov: None,
            name: None,
            pricescale: None,
            session: None,
            supported_resolutions: None,
            symbol: None,
            ticker: None,
            timezone: None,
            r#type: None,
            volume_precision: None,
        }
    }
}

