/*
 * Bitwyre REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PositionsValue {
    #[serde(rename = "instrument", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    #[serde(rename = "position_uuid", skip_serializing_if = "Option::is_none")]
    pub position_uuid: Option<uuid::Uuid>,
    #[serde(rename = "index_name", skip_serializing_if = "Option::is_none")]
    pub index_name: Option<String>,
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<i32>,
    #[serde(rename = "leverage", skip_serializing_if = "Option::is_none")]
    pub leverage: Option<i32>,
    #[serde(rename = "derivatives_type", skip_serializing_if = "Option::is_none")]
    pub derivatives_type: Option<i32>,
    #[serde(rename = "next_funding", skip_serializing_if = "Option::is_none")]
    pub next_funding: Option<f32>,
    #[serde(rename = "next_funding_datetime", skip_serializing_if = "Option::is_none")]
    pub next_funding_datetime: Option<f32>,
    #[serde(rename = "expiry", skip_serializing_if = "Option::is_none")]
    pub expiry: Option<i32>,
    #[serde(rename = "margin_fraction", skip_serializing_if = "Option::is_none")]
    pub margin_fraction: Option<f32>,
    #[serde(rename = "maintenance_margin_requirements", skip_serializing_if = "Option::is_none")]
    pub maintenance_margin_requirements: Option<f32>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<f32>,
    #[serde(rename = "notional_size", skip_serializing_if = "Option::is_none")]
    pub notional_size: Option<f32>,
    #[serde(rename = "average_price", skip_serializing_if = "Option::is_none")]
    pub average_price: Option<f32>,
    #[serde(rename = "bankruptcy_price", skip_serializing_if = "Option::is_none")]
    pub bankruptcy_price: Option<f32>,
    #[serde(rename = "liquidation_price", skip_serializing_if = "Option::is_none")]
    pub liquidation_price: Option<f32>,
    #[serde(rename = "collateral_used", skip_serializing_if = "Option::is_none")]
    pub collateral_used: Option<f32>,
    #[serde(rename = "expiry_price", skip_serializing_if = "Option::is_none")]
    pub expiry_price: Option<f32>,
    #[serde(rename = "realized_pnl", skip_serializing_if = "Option::is_none")]
    pub realized_pnl: Option<f32>,
    #[serde(rename = "unrealized_pnl", skip_serializing_if = "Option::is_none")]
    pub unrealized_pnl: Option<f32>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<i32>,
}

impl PositionsValue {
    pub fn new() -> PositionsValue {
        PositionsValue {
            instrument: None,
            position_uuid: None,
            index_name: None,
            side: None,
            leverage: None,
            derivatives_type: None,
            next_funding: None,
            next_funding_datetime: None,
            expiry: None,
            margin_fraction: None,
            maintenance_margin_requirements: None,
            size: None,
            notional_size: None,
            average_price: None,
            bankruptcy_price: None,
            liquidation_price: None,
            collateral_used: None,
            expiry_price: None,
            realized_pnl: None,
            unrealized_pnl: None,
            status: None,
        }
    }
}

