/*
 * Bitwyre REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Insider {
    /// The user's email address.
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Indicates if the user's email is verified (0 for no, 1 for yes).
    #[serde(rename = "email_verified", skip_serializing_if = "Option::is_none")]
    pub email_verified: Option<i32>,
    /// Indicates if the user has submitted KYC (null if not applicable).
    #[serde(rename = "has_submitted_kyc", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub has_submitted_kyc: Option<Option<String>>,
    /// Indicates if the user is an insider (0 for no, 1 for yes).
    #[serde(rename = "insider", skip_serializing_if = "Option::is_none")]
    pub insider: Option<i32>,
    /// Indicates if the user represents an institution (0 for no, 1 for yes).
    #[serde(rename = "institution", skip_serializing_if = "Option::is_none")]
    pub institution: Option<i32>,
    /// Indicates if OTP (Two-Factor Authentication) is activated (0 for no, 1 for yes).
    #[serde(rename = "is_otp_activated", skip_serializing_if = "Option::is_none")]
    pub is_otp_activated: Option<i32>,
    /// The user's KYC level.
    #[serde(rename = "kyc_level", skip_serializing_if = "Option::is_none")]
    pub kyc_level: Option<i32>,
    /// Indicates if the user has a master account (0 for no, 1 for yes).
    #[serde(rename = "master_account", skip_serializing_if = "Option::is_none")]
    pub master_account: Option<i32>,
    /// The UUID of the master account, if applicable.
    #[serde(rename = "master_account_uuid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub master_account_uuid: Option<Option<String>>,
    /// The user's monthly average trading volumes (null if not applicable).
    #[serde(rename = "monthly_avg_trading_volumes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub monthly_avg_trading_volumes: Option<Option<String>>,
    /// The user's nationality.
    #[serde(rename = "nationality", skip_serializing_if = "Option::is_none")]
    pub nationality: Option<String>,
    /// The user's preferred trading pairs (null if not specified).
    #[serde(rename = "preference_pairs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub preference_pairs: Option<Option<String>>,
    /// The user's pseudonym, if applicable.
    #[serde(rename = "pseudonym", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pseudonym: Option<Option<String>>,
    /// The user's reference asset, if applicable.
    #[serde(rename = "reference_asset", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reference_asset: Option<Option<String>>,
    /// Indicates if the user has any restrictions on their account (0 for no, 1 for yes).
    #[serde(rename = "restricted", skip_serializing_if = "Option::is_none")]
    pub restricted: Option<i32>,
    /// Indicates if the user has a sub-account (0 for no, 1 for yes).
    #[serde(rename = "sub_account", skip_serializing_if = "Option::is_none")]
    pub sub_account: Option<i32>,
    /// The unique code for the sub-account.
    #[serde(rename = "subaccount_code", skip_serializing_if = "Option::is_none")]
    pub subaccount_code: Option<String>,
    /// Indicates if the user's account is suspended (0 for no, 1 for yes).
    #[serde(rename = "suspended", skip_serializing_if = "Option::is_none")]
    pub suspended: Option<i32>,
    /// The unique identifier for the user.
    #[serde(rename = "user_uuid", skip_serializing_if = "Option::is_none")]
    pub user_uuid: Option<String>,
    /// The user's username.
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

impl Insider {
    pub fn new() -> Insider {
        Insider {
            email: None,
            email_verified: None,
            has_submitted_kyc: None,
            insider: None,
            institution: None,
            is_otp_activated: None,
            kyc_level: None,
            master_account: None,
            master_account_uuid: None,
            monthly_avg_trading_volumes: None,
            nationality: None,
            preference_pairs: None,
            pseudonym: None,
            reference_asset: None,
            restricted: None,
            sub_account: None,
            subaccount_code: None,
            suspended: None,
            user_uuid: None,
            username: None,
        }
    }
}

