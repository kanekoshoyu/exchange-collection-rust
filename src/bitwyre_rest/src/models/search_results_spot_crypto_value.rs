/*
 * Bitwyre REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchResultsSpotCryptoValue {
    /// The highest price in the last 24 hours.
    #[serde(rename = "high", skip_serializing_if = "Option::is_none")]
    pub high: Option<String>,
    /// The lowest price in the last 24 hours.
    #[serde(rename = "low", skip_serializing_if = "Option::is_none")]
    pub low: Option<String>,
    /// The percentage change in the last 24 hours.
    #[serde(rename = "percent_change", skip_serializing_if = "Option::is_none")]
    pub percent_change: Option<String>,
    /// The volume traded in the base asset.
    #[serde(rename = "volume_base", skip_serializing_if = "Option::is_none")]
    pub volume_base: Option<String>,
    /// The volume traded in the quote asset.
    #[serde(rename = "volume_quote", skip_serializing_if = "Option::is_none")]
    pub volume_quote: Option<String>,
    /// The last traded price.
    #[serde(rename = "last", skip_serializing_if = "Option::is_none")]
    pub last: Option<String>,
    /// The highest current bid price.
    #[serde(rename = "best_bid", skip_serializing_if = "Option::is_none")]
    pub best_bid: Option<String>,
    /// The lowest current ask price.
    #[serde(rename = "best_ask", skip_serializing_if = "Option::is_none")]
    pub best_ask: Option<String>,
    /// The timestamp of the last update in Unix nanoseconds.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i64>,
    /// The price of the last trade.
    #[serde(rename = "last_trade_price", skip_serializing_if = "Option::is_none")]
    pub last_trade_price: Option<String>,
    /// The side of the last trade (1 = buy, 0 = sell).
    #[serde(rename = "last_trade_side", skip_serializing_if = "Option::is_none")]
    pub last_trade_side: Option<i32>,
    /// The unique identifier for the last trade.
    #[serde(rename = "last_trade_uuid", skip_serializing_if = "Option::is_none")]
    pub last_trade_uuid: Option<String>,
    /// The value of the last trade.
    #[serde(rename = "last_trade_value", skip_serializing_if = "Option::is_none")]
    pub last_trade_value: Option<String>,
    /// The volume of the last trade.
    #[serde(rename = "last_trade_volume", skip_serializing_if = "Option::is_none")]
    pub last_trade_volume: Option<String>,
    /// The timestamp of the last trade in Unix nanoseconds.
    #[serde(rename = "last_trade_timestamp", skip_serializing_if = "Option::is_none")]
    pub last_trade_timestamp: Option<i64>,
    /// The order book for bids.
    #[serde(rename = "bidbook", skip_serializing_if = "Option::is_none")]
    pub bidbook: Option<Vec<Vec<String>>>,
    /// The order book for asks.
    #[serde(rename = "askbook", skip_serializing_if = "Option::is_none")]
    pub askbook: Option<Vec<Vec<String>>>,
}

impl SearchResultsSpotCryptoValue {
    pub fn new() -> SearchResultsSpotCryptoValue {
        SearchResultsSpotCryptoValue {
            high: None,
            low: None,
            percent_change: None,
            volume_base: None,
            volume_quote: None,
            last: None,
            best_bid: None,
            best_ask: None,
            timestamp: None,
            last_trade_price: None,
            last_trade_side: None,
            last_trade_uuid: None,
            last_trade_value: None,
            last_trade_volume: None,
            last_trade_timestamp: None,
            bidbook: None,
            askbook: None,
        }
    }
}

