/*
 * Bitwyre REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderRequest {
    /// Client generated UUID string
    #[serde(rename = "clordid", skip_serializing_if = "Option::is_none")]
    pub clordid: Option<uuid::Uuid>,
    /// Base asset, quote asset, product filter, delimited with an underscore
    #[serde(rename = "instrument", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// Side of order (buy or sell)
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Order type
    #[serde(rename = "ordtype", skip_serializing_if = "Option::is_none")]
    pub ordtype: Option<Ordtype>,
    /// Price (mandatory for limit and stop_limit orders)
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f32>,
    /// Stop price (mandatory for stop and stop_limit orders)
    #[serde(rename = "stoppx", skip_serializing_if = "Option::is_none")]
    pub stoppx: Option<f32>,
    /// Order quantity for the base asset
    #[serde(rename = "orderqty", skip_serializing_if = "Option::is_none")]
    pub orderqty: Option<f32>,
    /// Order lifetime enforcement
    #[serde(rename = "timeinforce", skip_serializing_if = "Option::is_none")]
    pub timeinforce: Option<i32>,
    /// Unix time in nanoseconds (mandatory when timeinforce is set to gtd)
    #[serde(rename = "expiretime", skip_serializing_if = "Option::is_none")]
    pub expiretime: Option<String>,
    /// Not-yet-supported, reserved for future
    #[serde(rename = "execinst", skip_serializing_if = "Option::is_none")]
    pub execinst: Option<String>,
    /// Cancel order on disconnection (not supported in REST yet)
    #[serde(rename = "cancelondisconnect", skip_serializing_if = "Option::is_none")]
    pub cancelondisconnect: Option<bool>,
}

impl OrderRequest {
    pub fn new() -> OrderRequest {
        OrderRequest {
            clordid: None,
            instrument: None,
            side: None,
            ordtype: None,
            price: None,
            stoppx: None,
            orderqty: None,
            timeinforce: None,
            expiretime: None,
            execinst: None,
            cancelondisconnect: None,
        }
    }
}
/// Side of order (buy or sell)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for Side {
    fn default() -> Side {
        Self::Variant1
    }
}
/// Order type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Ordtype {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
    #[serde(rename = "19")]
    Variant19,
    #[serde(rename = "20")]
    Variant20,
    #[serde(rename = "21")]
    Variant21,
    #[serde(rename = "22")]
    Variant22,
}

impl Default for Ordtype {
    fn default() -> Ordtype {
        Self::Variant1
    }
}

