/*
 * Bitwyre REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Trades {
    /// The trading instrument (base and quote asset with product type).
    #[serde(rename = "instrument", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// The price at which the trade was executed.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// The side of the trade, where 1 represents a buy and 0 represents a sell.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<i32>,
    /// The timestamp of the trade in Unix nanoseconds.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
    /// The unique identifier of the trade.
    #[serde(rename = "trade_uuid", skip_serializing_if = "Option::is_none")]
    pub trade_uuid: Option<String>,
    /// The total value of the trade in the quote asset.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// The volume traded in the base asset.
    #[serde(rename = "volume", skip_serializing_if = "Option::is_none")]
    pub volume: Option<String>,
}

impl Trades {
    pub fn new() -> Trades {
        Trades {
            instrument: None,
            price: None,
            side: None,
            timestamp: None,
            trade_uuid: None,
            value: None,
            volume: None,
        }
    }
}

