/*
 * Bitwyre REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatementData {
    /// Universal unique id of the transaction
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// Crypto transaction id (crypto only). Can be checked using any block explorer
    #[serde(rename = "tx_id", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<String>,
    /// Transaction status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Asset type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// Transaction provider
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<Provider>,
    /// Gross amount of the transaction before the fee
    #[serde(rename = "gross_amount", skip_serializing_if = "Option::is_none")]
    pub gross_amount: Option<f32>,
    /// Transaction fee
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<f32>,
    /// Nett amount of the transaction after the fee
    #[serde(rename = "nett_amount", skip_serializing_if = "Option::is_none")]
    pub nett_amount: Option<f32>,
    /// Confirmation needed to settle the transaction (crypto only)
    #[serde(rename = "network_confirmation", skip_serializing_if = "Option::is_none")]
    pub network_confirmation: Option<i32>,
    /// Unix time in nanoseconds
    #[serde(rename = "submit_time", skip_serializing_if = "Option::is_none")]
    pub submit_time: Option<String>,
    /// Unix time in nanoseconds
    #[serde(rename = "success_time", skip_serializing_if = "Option::is_none")]
    pub success_time: Option<String>,
}

impl StatementData {
    pub fn new() -> StatementData {
        StatementData {
            id: None,
            tx_id: None,
            status: None,
            r#type: None,
            provider: None,
            gross_amount: None,
            fee: None,
            nett_amount: None,
            network_confirmation: None,
            submit_time: None,
            success_time: None,
        }
    }
}
/// Transaction status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "waiting")]
    Waiting,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "success")]
    Success,
}

impl Default for Status {
    fn default() -> Status {
        Self::Waiting
    }
}
/// Asset type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "fiat")]
    Fiat,
    #[serde(rename = "crypto")]
    Crypto,
}

impl Default for Type {
    fn default() -> Type {
        Self::Fiat
    }
}
/// Transaction provider
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Provider {
    #[serde(rename = "your_provider_options")]
    YourProviderOptions,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::YourProviderOptions
    }
}

