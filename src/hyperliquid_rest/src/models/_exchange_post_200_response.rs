/*
 * Hyperliquid API
 *
 * Documentation for the Hyperliquid public API     ## **Rate limits** The following rate limits apply per IP address:   - All REST requests have a weight limit of 1200 per minute. All documented exchange API requests have a weight of 1. All documented info API requests have a weight of either 2 or 20; these limits can be found in the description for each info request in the Info endpoint section. All explorer API requests have a weight of 40.   - Maximum of 100 websocket connections   - Maximum of 1000 websocket subscriptions   - Maximum of 10 unique users across user-specific websocket subscriptions  - Maximum of 2000 inbound messages per minute across all websocket connections   - Use websockets for lowest latency realtime data. See the python SDK for a full-featured example.    ## **Address-based L1 Rate limits**    The L1 rate limiting logic will allow 1 requests per 1 USDC traded cumulatively since address inception.   Using an order value of 100 USDC, this only requires a fill rate of 1%.    Each address starts with an initial buffer of 10000 requests. When rate limited, an address will still be allowed one request every 10 seconds.  Cancels have cumulative limit min(limit + 100000, limit * 2) where limit is the default limit for other actions. This way, hitting the address-based rate limit will still allow open orders to be canceled.   Note that this rate limit only applies to L1 actions, not info requests.   ## **Batched Requests** A batched request with n orders (or cancels) is treated as one request for IP based rate limiting, but as n requests for address-based L1 rate limiting. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExchangePost200Response {
    PlaceOrderRestingResponse(Box<models::PlaceOrderRestingResponse>),
    PlaceOrderErrorResponse(Box<models::PlaceOrderErrorResponse>),
    PlaceOrderFilledResponse(Box<models::PlaceOrderFilledResponse>),
    CancelOrderSuccessResponse(Box<models::CancelOrderSuccessResponse>),
    CancelOrderErrorResponse(Box<models::CancelOrderErrorResponse>),
    CancelOrderByCloidSuccessResponse(Box<models::CancelOrderByCloidSuccessResponse>),
    CancelOrderByCloidErrorResponse(Box<models::CancelOrderByCloidErrorResponse>),
    ScheduleCancelResponse(Box<models::ScheduleCancelResponse>),
    ErrorResponse(Box<models::ErrorResponse>),
    ModifyOrderResponse(Box<models::ModifyOrderResponse>),
    ModifyOrderErrorResponse(Box<models::ModifyOrderErrorResponse>),
    BatchModifyOrderResponse(Box<models::BatchModifyOrderResponse>),
    BatchModifyOrderErrorResponse(Box<models::BatchModifyOrderErrorResponse>),
    UpdateLeverageResponse(Box<models::UpdateLeverageResponse>),
    UpdateLeverageErrorResponse(Box<models::UpdateLeverageErrorResponse>),
    UpdateIsolatedMarginResponse(Box<models::UpdateIsolatedMarginResponse>),
    UpdateIsolatedMarginErrorResponse(Box<models::UpdateIsolatedMarginErrorResponse>),
    L1SpotTransferResponse(Box<models::L1SpotTransferResponse>),
    L1SpotTransferErrorResponse(Box<models::L1SpotTransferErrorResponse>),
    InitiateWithdrawalResponse(Box<models::InitiateWithdrawalResponse>),
    InitiateWithdrawalErrorResponse(Box<models::InitiateWithdrawalErrorResponse>),
    SpotToPerpTransferResponse(Box<models::SpotToPerpTransferResponse>),
    SpotToPerpTransferErrorResponse(Box<models::SpotToPerpTransferErrorResponse>),
    VaultTransferResponse(Box<models::VaultTransferResponse>),
    VaultTransferErrorResponse(Box<models::VaultTransferErrorResponse>),
}

impl Default for ExchangePost200Response {
    fn default() -> Self {
        Self::PlaceOrderRestingResponse(Default::default())
    }
}

