/*
 * Coincheck Crypto Exchange
 *
 * Welcome to Coincheck API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderDetails {
    /// Indicates success of the API call.
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<bool>,
    /// Order ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Deal pair (e.g., btc_jpy).
    #[serde(rename = "pair", skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    /// Order status.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Type of order (e.g., buy, sell).
    #[serde(rename = "order_type", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<String>,
    /// Order rate.
    #[serde(rename = "rate", skip_serializing_if = "Option::is_none")]
    pub rate: Option<String>,
    /// Stop loss rate.
    #[serde(rename = "stop_loss_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stop_loss_rate: Option<Option<String>>,
    /// Maker fee rate.
    #[serde(rename = "maker_fee_rate", skip_serializing_if = "Option::is_none")]
    pub maker_fee_rate: Option<String>,
    /// Taker fee rate.
    #[serde(rename = "taker_fee_rate", skip_serializing_if = "Option::is_none")]
    pub taker_fee_rate: Option<String>,
    /// Total order amount.
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// Market buy amount.
    #[serde(rename = "market_buy_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub market_buy_amount: Option<Option<String>>,
    /// Amount that has been executed.
    #[serde(rename = "executed_amount", skip_serializing_if = "Option::is_none")]
    pub executed_amount: Option<String>,
    /// Executed market buy amount.
    #[serde(rename = "executed_market_buy_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub executed_market_buy_amount: Option<Option<String>>,
    /// Reason for expiration.
    #[serde(rename = "expired_type", skip_serializing_if = "Option::is_none")]
    pub expired_type: Option<ExpiredType>,
    /// Prevented match ID.
    #[serde(rename = "prevented_match_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prevented_match_id: Option<Option<i32>>,
    /// Amount expired.
    #[serde(rename = "expired_amount", skip_serializing_if = "Option::is_none")]
    pub expired_amount: Option<String>,
    /// Expired market buy amount.
    #[serde(rename = "expired_market_buy_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub expired_market_buy_amount: Option<Option<String>>,
    /// Time in force for the order.
    #[serde(rename = "time_in_force", skip_serializing_if = "Option::is_none")]
    pub time_in_force: Option<String>,
    /// Date and time when the order was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
}

impl OrderDetails {
    pub fn new() -> OrderDetails {
        OrderDetails {
            success: None,
            id: None,
            pair: None,
            status: None,
            order_type: None,
            rate: None,
            stop_loss_rate: None,
            maker_fee_rate: None,
            taker_fee_rate: None,
            amount: None,
            market_buy_amount: None,
            executed_amount: None,
            executed_market_buy_amount: None,
            expired_type: None,
            prevented_match_id: None,
            expired_amount: None,
            expired_market_buy_amount: None,
            time_in_force: None,
            created_at: None,
        }
    }
}
/// Order status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "NEW")]
    New,
    #[serde(rename = "WAITING_FOR_TRIGGER")]
    WaitingForTrigger,
    #[serde(rename = "PARTIALLY_FILLED")]
    PartiallyFilled,
    #[serde(rename = "FILLED")]
    Filled,
    #[serde(rename = "CANCELED")]
    Canceled,
    #[serde(rename = "EXPIRED")]
    Expired,
    #[serde(rename = "PARTIALLY_FILLED_CANCELED")]
    PartiallyFilledCanceled,
    #[serde(rename = "PARTIALLY_FILLED_EXPIRED")]
    PartiallyFilledExpired,
}

impl Default for Status {
    fn default() -> Status {
        Self::New
    }
}
/// Reason for expiration.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExpiredType {
    #[serde(rename = "self_trade_prevention")]
    SelfTradePrevention,
    #[serde(rename = "price_limit")]
    PriceLimit,
    #[serde(rename = "post_only")]
    PostOnly,
    #[serde(rename = "unfilled_market")]
    UnfilledMarket,
    #[serde(rename = "itayose_market")]
    ItayoseMarket,
}

impl Default for ExpiredType {
    fn default() -> ExpiredType {
        Self::SelfTradePrevention
    }
}

