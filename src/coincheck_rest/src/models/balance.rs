/*
 * Coincheck Crypto Exchange
 *
 * Welcome to Coincheck API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Balance {
    /// Indicates success of the API call.
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<bool>,
    /// Balance for JPY.
    #[serde(rename = "jpy", skip_serializing_if = "Option::is_none")]
    pub jpy: Option<String>,
    /// Balance for BTC.
    #[serde(rename = "btc", skip_serializing_if = "Option::is_none")]
    pub btc: Option<String>,
    /// Amount of JPY for unsettled buying orders.
    #[serde(rename = "jpy_reserved", skip_serializing_if = "Option::is_none")]
    pub jpy_reserved: Option<String>,
    /// Amount of BTC for unsettled selling orders.
    #[serde(rename = "btc_reserved", skip_serializing_if = "Option::is_none")]
    pub btc_reserved: Option<String>,
    /// JPY amount applied for lending (JPY lending not allowed).
    #[serde(rename = "jpy_lend_in_use", skip_serializing_if = "Option::is_none")]
    pub jpy_lend_in_use: Option<String>,
    /// BTC amount applied for lending (BTC lending not allowed).
    #[serde(rename = "btc_lend_in_use", skip_serializing_if = "Option::is_none")]
    pub btc_lend_in_use: Option<String>,
    /// JPY lending amount (JPY lending not allowed).
    #[serde(rename = "jpy_lent", skip_serializing_if = "Option::is_none")]
    pub jpy_lent: Option<String>,
    /// BTC lending amount (BTC lending not allowed).
    #[serde(rename = "btc_lent", skip_serializing_if = "Option::is_none")]
    pub btc_lent: Option<String>,
    /// JPY borrowing amount.
    #[serde(rename = "jpy_debt", skip_serializing_if = "Option::is_none")]
    pub jpy_debt: Option<String>,
    /// BTC borrowing amount.
    #[serde(rename = "btc_debt", skip_serializing_if = "Option::is_none")]
    pub btc_debt: Option<String>,
    /// JPY reserving amount.
    #[serde(rename = "jpy_tsumitate", skip_serializing_if = "Option::is_none")]
    pub jpy_tsumitate: Option<String>,
    /// BTC reserving amount.
    #[serde(rename = "btc_tsumitate", skip_serializing_if = "Option::is_none")]
    pub btc_tsumitate: Option<String>,
}

impl Balance {
    pub fn new() -> Balance {
        Balance {
            success: None,
            jpy: None,
            btc: None,
            jpy_reserved: None,
            btc_reserved: None,
            jpy_lend_in_use: None,
            btc_lend_in_use: None,
            jpy_lent: None,
            btc_lent: None,
            jpy_debt: None,
            btc_debt: None,
            jpy_tsumitate: None,
            btc_tsumitate: None,
        }
    }
}

