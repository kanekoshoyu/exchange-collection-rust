/*
 * Coincheck Crypto Exchange
 *
 * Welcome to Coincheck API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Transaction {
    /// Transaction ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Associated order ID.
    #[serde(rename = "order_id", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<i32>,
    /// Time when the transaction was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Each fund balance's increase and decrease.
    #[serde(rename = "funds", skip_serializing_if = "Option::is_none")]
    pub funds: Option<std::collections::HashMap<String, String>>,
    /// Pair (e.g., btc_jpy).
    #[serde(rename = "pair", skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    /// Transaction rate.
    #[serde(rename = "rate", skip_serializing_if = "Option::is_none")]
    pub rate: Option<String>,
    /// Currency in which the fee was charged.
    #[serde(rename = "fee_currency", skip_serializing_if = "Option::is_none")]
    pub fee_currency: Option<String>,
    /// Fee amount.
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// Indicates if it was a taker (T) or maker (M) transaction.
    #[serde(rename = "liquidity", skip_serializing_if = "Option::is_none")]
    pub liquidity: Option<Liquidity>,
    /// Indicates if the transaction was a buy or sell.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
}

impl Transaction {
    pub fn new() -> Transaction {
        Transaction {
            id: None,
            order_id: None,
            created_at: None,
            funds: None,
            pair: None,
            rate: None,
            fee_currency: None,
            fee: None,
            liquidity: None,
            side: None,
        }
    }
}
/// Indicates if it was a taker (T) or maker (M) transaction.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Liquidity {
    #[serde(rename = "T")]
    T,
    #[serde(rename = "M")]
    M,
}

impl Default for Liquidity {
    fn default() -> Liquidity {
        Self::T
    }
}
/// Indicates if the transaction was a buy or sell.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}

