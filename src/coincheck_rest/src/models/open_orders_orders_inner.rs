/*
 * Coincheck Crypto Exchange
 *
 * Welcome to Coincheck API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenOrdersOrdersInner {
    /// Order ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Type of order (e.g., buy, sell).
    #[serde(rename = "order_type", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<OrderType>,
    /// Order rate (Market order if null).
    #[serde(rename = "rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rate: Option<Option<f64>>,
    /// Deal pair (e.g., btc_jpy).
    #[serde(rename = "pair", skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    /// Unsettled order amount.
    #[serde(rename = "pending_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pending_amount: Option<Option<String>>,
    /// Unsettled market buy order amount.
    #[serde(rename = "pending_market_buy_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pending_market_buy_amount: Option<Option<String>>,
    /// Stop loss rate.
    #[serde(rename = "stop_loss_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stop_loss_rate: Option<Option<String>>,
    /// Date and time when the order was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
}

impl OpenOrdersOrdersInner {
    pub fn new() -> OpenOrdersOrdersInner {
        OpenOrdersOrdersInner {
            id: None,
            order_type: None,
            rate: None,
            pair: None,
            pending_amount: None,
            pending_market_buy_amount: None,
            stop_loss_rate: None,
            created_at: None,
        }
    }
}
/// Type of order (e.g., buy, sell).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Buy
    }
}

