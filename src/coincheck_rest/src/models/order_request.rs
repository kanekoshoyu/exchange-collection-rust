/*
 * Coincheck Crypto Exchange
 *
 * Welcome to Coincheck API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderRequest {
    /// The currency pair to trade. For example, \"btc_jpy\", \"eth_jpy\", etc.
    #[serde(rename = "pair", skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    /// The type of the order. Can be \"buy\", \"sell\", \"market_buy\", or \"market_sell\".
    #[serde(rename = "order_type", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<OrderType>,
    /// The rate for limit orders (e.g., 28000). Not applicable for market orders.
    #[serde(rename = "rate", skip_serializing_if = "Option::is_none")]
    pub rate: Option<f32>,
    /// The amount of the asset to buy/sell (e.g., 0.1 BTC).
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f32>,
    /// The amount in JPY for market buy orders (e.g., 10000). Not applicable for \"buy\" or \"sell\".
    #[serde(rename = "market_buy_amount", skip_serializing_if = "Option::is_none")]
    pub market_buy_amount: Option<f32>,
    /// The stop loss rate (optional). Applies to sell orders to limit losses.
    #[serde(rename = "stop_loss_rate", skip_serializing_if = "Option::is_none")]
    pub stop_loss_rate: Option<f32>,
    /// How long the order is valid. Can be \"good_til_cancelled\" or \"post_only\".
    #[serde(rename = "time_in_force", skip_serializing_if = "Option::is_none")]
    pub time_in_force: Option<TimeInForce>,
}

impl OrderRequest {
    pub fn new() -> OrderRequest {
        OrderRequest {
            pair: None,
            order_type: None,
            rate: None,
            amount: None,
            market_buy_amount: None,
            stop_loss_rate: None,
            time_in_force: None,
        }
    }
}
/// The type of the order. Can be \"buy\", \"sell\", \"market_buy\", or \"market_sell\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
    #[serde(rename = "market_buy")]
    MarketBuy,
    #[serde(rename = "market_sell")]
    MarketSell,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Buy
    }
}
/// How long the order is valid. Can be \"good_til_cancelled\" or \"post_only\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TimeInForce {
    #[serde(rename = "good_til_cancelled")]
    GoodTilCancelled,
    #[serde(rename = "post_only")]
    PostOnly,
}

impl Default for TimeInForce {
    fn default() -> TimeInForce {
        Self::GoodTilCancelled
    }
}

