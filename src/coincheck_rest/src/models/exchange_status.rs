/*
 * Coincheck Crypto Exchange
 *
 * Welcome to Coincheck API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExchangeStatus {
    /// The trading pair symbol (e.g., btc_jpy).
    #[serde(rename = "pair", skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    /// The status of the pair (available, itayose, stop).
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The timestamp of the status retrieval.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
    #[serde(rename = "availability", skip_serializing_if = "Option::is_none")]
    pub availability: Option<Box<models::ExchangeStatusAvailability>>,
}

impl ExchangeStatus {
    pub fn new() -> ExchangeStatus {
        ExchangeStatus {
            pair: None,
            status: None,
            timestamp: None,
            availability: None,
        }
    }
}
/// The status of the pair (available, itayose, stop).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "available")]
    Available,
    #[serde(rename = "itayose")]
    Itayose,
    #[serde(rename = "stop")]
    Stop,
}

impl Default for Status {
    fn default() -> Status {
        Self::Available
    }
}

