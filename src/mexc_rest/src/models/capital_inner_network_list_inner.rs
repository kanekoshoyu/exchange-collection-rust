/*
 * MEXC Crypto Exchange
 *
 * Welcome to mexc API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CapitalInnerNetworkListInner {
    /// The currency symbol for the network.
    #[serde(rename = "coin", skip_serializing_if = "Option::is_none")]
    pub coin: Option<String>,
    /// A description of the deposit process (if available).
    #[serde(rename = "depositDesc", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub deposit_desc: Option<Option<String>>,
    /// Whether deposits are enabled for this currency.
    #[serde(rename = "depositEnable", skip_serializing_if = "Option::is_none")]
    pub deposit_enable: Option<bool>,
    /// The minimum number of confirmations required for deposits.
    #[serde(rename = "minConfirm", skip_serializing_if = "Option::is_none")]
    pub min_confirm: Option<i32>,
    /// The name of the network.
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The name of the network (e.g., \"BEP20(BSC)\", \"EOS\").
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// Whether withdrawals are enabled for this currency.
    #[serde(rename = "withdrawEnable", skip_serializing_if = "Option::is_none")]
    pub withdraw_enable: Option<bool>,
    /// The fee for withdrawals.
    #[serde(rename = "withdrawFee", skip_serializing_if = "Option::is_none")]
    pub withdraw_fee: Option<String>,
    /// The integer multiple for withdrawals (if applicable).
    #[serde(rename = "withdrawIntegerMultiple", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub withdraw_integer_multiple: Option<Option<String>>,
    /// The maximum amount that can be withdrawn.
    #[serde(rename = "withdrawMax", skip_serializing_if = "Option::is_none")]
    pub withdraw_max: Option<String>,
    /// The minimum amount that can be withdrawn.
    #[serde(rename = "withdrawMin", skip_serializing_if = "Option::is_none")]
    pub withdraw_min: Option<String>,
    /// Whether the same address is used for both deposit and withdrawal.
    #[serde(rename = "sameAddress", skip_serializing_if = "Option::is_none")]
    pub same_address: Option<bool>,
    /// The smart contract address (if applicable).
    #[serde(rename = "contract", skip_serializing_if = "Option::is_none")]
    pub contract: Option<String>,
    /// Additional tips for withdrawals (if any).
    #[serde(rename = "withdrawTips", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub withdraw_tips: Option<Option<String>>,
    /// Additional tips for deposits (if any).
    #[serde(rename = "depositTips", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub deposit_tips: Option<Option<String>>,
}

impl CapitalInnerNetworkListInner {
    pub fn new() -> CapitalInnerNetworkListInner {
        CapitalInnerNetworkListInner {
            coin: None,
            deposit_desc: None,
            deposit_enable: None,
            min_confirm: None,
            name: None,
            network: None,
            withdraw_enable: None,
            withdraw_fee: None,
            withdraw_integer_multiple: None,
            withdraw_max: None,
            withdraw_min: None,
            same_address: None,
            contract: None,
            withdraw_tips: None,
            deposit_tips: None,
        }
    }
}

