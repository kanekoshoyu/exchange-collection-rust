/*
 * MEXC Crypto Exchange
 *
 * Welcome to mexc API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RebateHistoryDataInner {
    /// The spot rebate amount for the user.
    #[serde(rename = "spot", skip_serializing_if = "Option::is_none")]
    pub spot: Option<String>,
    /// The futures rebate amount for the user.
    #[serde(rename = "futures", skip_serializing_if = "Option::is_none")]
    pub futures: Option<String>,
    /// The total rebate amount for the user.
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<String>,
    /// The unique user ID of the rebate recipient.
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    /// The email account of the user receiving the rebate.
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// The time when the user was invited (Unix timestamp in milliseconds).
    #[serde(rename = "inviteTime", skip_serializing_if = "Option::is_none")]
    pub invite_time: Option<i32>,
}

impl RebateHistoryDataInner {
    pub fn new() -> RebateHistoryDataInner {
        RebateHistoryDataInner {
            spot: None,
            futures: None,
            total: None,
            uid: None,
            account: None,
            invite_time: None,
        }
    }
}

