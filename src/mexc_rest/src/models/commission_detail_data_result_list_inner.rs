/*
 * MEXC Crypto Exchange
 *
 * Welcome to mexc API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommissionDetailDataResultListInner {
    /// The type of commission (1 = spot, 2 = futures, 3 = ETF).
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<i32>,
    /// The source type of commission.
    #[serde(rename = "sourceType", skip_serializing_if = "Option::is_none")]
    pub source_type: Option<i32>,
    /// The state of the commission (e.g., 1 = Pending, 2 = Completed).
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<i32>,
    /// The date of the commission in Unix timestamp format (milliseconds).
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<i32>,
    /// The user ID associated with the commission.
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    /// The rate applied for the commission.
    #[serde(rename = "rate", skip_serializing_if = "Option::is_none")]
    pub rate: Option<f32>,
    /// The trading pair symbol for which the commission was earned.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// The taker's commission amount.
    #[serde(rename = "takerAmount", skip_serializing_if = "Option::is_none")]
    pub taker_amount: Option<String>,
    /// The maker's commission amount.
    #[serde(rename = "makerAmount", skip_serializing_if = "Option::is_none")]
    pub maker_amount: Option<String>,
    /// The currency for the commission amount.
    #[serde(rename = "amountCurrency", skip_serializing_if = "Option::is_none")]
    pub amount_currency: Option<String>,
    /// The commission amount in USDT.
    #[serde(rename = "usdtAmount", skip_serializing_if = "Option::is_none")]
    pub usdt_amount: Option<String>,
    /// The commission earned.
    #[serde(rename = "commission", skip_serializing_if = "Option::is_none")]
    pub commission: Option<String>,
    /// The currency of the commission.
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
}

impl CommissionDetailDataResultListInner {
    pub fn new() -> CommissionDetailDataResultListInner {
        CommissionDetailDataResultListInner {
            r#type: None,
            source_type: None,
            state: None,
            date: None,
            uid: None,
            rate: None,
            symbol: None,
            taker_amount: None,
            maker_amount: None,
            amount_currency: None,
            usdt_amount: None,
            commission: None,
            currency: None,
        }
    }
}

