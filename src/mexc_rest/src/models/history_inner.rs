/*
 * MEXC Crypto Exchange
 *
 * Welcome to mexc API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HistoryInner {
    /// The withdrawal transaction ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The transaction ID (nullable if not available).
    #[serde(rename = "txId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<Option<String>>,
    /// The cryptocurrency symbol for the withdrawal.
    #[serde(rename = "coin", skip_serializing_if = "Option::is_none")]
    pub coin: Option<String>,
    /// The network used for the withdrawal (nullable if not provided).
    #[serde(rename = "network", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub network: Option<Option<String>>,
    /// The withdrawal address.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The amount withdrawn.
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// The transfer type (e.g., `0` might represent a standard transfer).
    #[serde(rename = "transferType", skip_serializing_if = "Option::is_none")]
    pub transfer_type: Option<i32>,
    /// The withdrawal status (e.g., `3` might represent completed).
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<i32>,
    /// The transaction fee for the withdrawal.
    #[serde(rename = "transactionFee", skip_serializing_if = "Option::is_none")]
    pub transaction_fee: Option<String>,
    /// The number of confirmations received (nullable if not available).
    #[serde(rename = "confirmNo", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub confirm_no: Option<Option<String>>,
    /// The timestamp when the withdrawal was initiated.
    #[serde(rename = "applyTime", skip_serializing_if = "Option::is_none")]
    pub apply_time: Option<i32>,
    /// Any remarks associated with the withdrawal.
    #[serde(rename = "remark", skip_serializing_if = "Option::is_none")]
    pub remark: Option<String>,
    /// A memo associated with the withdrawal.
    #[serde(rename = "memo", skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
    /// The transaction hash for the withdrawal.
    #[serde(rename = "transHash", skip_serializing_if = "Option::is_none")]
    pub trans_hash: Option<String>,
    /// The last updated timestamp of the withdrawal.
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<i32>,
    /// The internal coin ID.
    #[serde(rename = "coinId", skip_serializing_if = "Option::is_none")]
    pub coin_id: Option<String>,
    /// The internal virtual coin ID.
    #[serde(rename = "vcoinId", skip_serializing_if = "Option::is_none")]
    pub vcoin_id: Option<String>,
}

impl HistoryInner {
    pub fn new() -> HistoryInner {
        HistoryInner {
            id: None,
            tx_id: None,
            coin: None,
            network: None,
            address: None,
            amount: None,
            transfer_type: None,
            status: None,
            transaction_fee: None,
            confirm_no: None,
            apply_time: None,
            remark: None,
            memo: None,
            trans_hash: None,
            update_time: None,
            coin_id: None,
            vcoin_id: None,
        }
    }
}

