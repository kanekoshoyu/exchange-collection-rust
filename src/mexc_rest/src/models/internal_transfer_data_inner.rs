/*
 * MEXC Crypto Exchange
 *
 * Welcome to mexc API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InternalTransferDataInner {
    /// The unique transfer ID for the transaction.
    #[serde(rename = "tranId", skip_serializing_if = "Option::is_none")]
    pub tran_id: Option<String>,
    /// The asset transferred (e.g., BTC, ETH).
    #[serde(rename = "asset", skip_serializing_if = "Option::is_none")]
    pub asset: Option<String>,
    /// The amount of the asset transferred.
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// The type of account the funds were sent to (e.g., EMAIL, UID).
    #[serde(rename = "toAccountType", skip_serializing_if = "Option::is_none")]
    pub to_account_type: Option<String>,
    /// The account to which the funds were transferred.
    #[serde(rename = "toAccount", skip_serializing_if = "Option::is_none")]
    pub to_account: Option<String>,
    /// The account from which the funds were transferred.
    #[serde(rename = "fromAccount", skip_serializing_if = "Option::is_none")]
    pub from_account: Option<String>,
    /// The status of the transfer (e.g., SUCCESS, FAILED).
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The timestamp of the transfer in milliseconds.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
}

impl InternalTransferDataInner {
    pub fn new() -> InternalTransferDataInner {
        InternalTransferDataInner {
            tran_id: None,
            asset: None,
            amount: None,
            to_account_type: None,
            to_account: None,
            from_account: None,
            status: None,
            timestamp: None,
        }
    }
}

