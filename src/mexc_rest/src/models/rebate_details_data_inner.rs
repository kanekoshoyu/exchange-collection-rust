/*
 * MEXC Crypto Exchange
 *
 * Welcome to mexc API document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RebateDetailsDataInner {
    /// The asset type (e.g., USDT, ETH).
    #[serde(rename = "asset", skip_serializing_if = "Option::is_none")]
    pub asset: Option<String>,
    /// The type of rebate (e.g., \"spot\").
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The rebate rate applied to the trade.
    #[serde(rename = "rate", skip_serializing_if = "Option::is_none")]
    pub rate: Option<String>,
    /// The rebate amount earned from the transaction.
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// The unique user ID associated with the rebate record.
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    /// The email account associated with the user.
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// The time of the trade in Unix timestamp format (milliseconds).
    #[serde(rename = "tradeTime", skip_serializing_if = "Option::is_none")]
    pub trade_time: Option<i32>,
    /// The last time the rebate record was updated, in Unix timestamp (milliseconds).
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<i32>,
}

impl RebateDetailsDataInner {
    pub fn new() -> RebateDetailsDataInner {
        RebateDetailsDataInner {
            asset: None,
            r#type: None,
            rate: None,
            amount: None,
            uid: None,
            account: None,
            trade_time: None,
            update_time: None,
        }
    }
}

