/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DepositInformationResponse {
    /// Can be deposited
    #[serde(rename = "canDeposit", skip_serializing_if = "Option::is_none")]
    pub can_deposit: Option<bool>,
    /// Deposit Address
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// Tag (Not in use)
    #[serde(rename = "addressExt", skip_serializing_if = "Option::is_none")]
    pub address_ext: Option<String>,
    /// Minimum Amount to be deposited
    #[serde(rename = "minQuantity", skip_serializing_if = "Option::is_none")]
    pub min_quantity: Option<String>,
    /// Is address tag required (Not in use)
    #[serde(rename = "needAddressTag", skip_serializing_if = "Option::is_none")]
    pub need_address_tag: Option<bool>,
    /// Credit to account block confirmation (Reference only)
    #[serde(rename = "requiredConfirmTimes", skip_serializing_if = "Option::is_none")]
    pub required_confirm_times: Option<i32>,
    /// Withdrawal block confirmation (Reference only)
    #[serde(rename = "canWithdrawConfirmTimes", skip_serializing_if = "Option::is_none")]
    pub can_withdraw_confirm_times: Option<i32>,
    /// Coin Type
    #[serde(rename = "coinType", skip_serializing_if = "Option::is_none")]
    pub coin_type: Option<CoinType>,
}

impl DepositInformationResponse {
    pub fn new() -> DepositInformationResponse {
        DepositInformationResponse {
            can_deposit: None,
            address: None,
            address_ext: None,
            min_quantity: None,
            need_address_tag: None,
            required_confirm_times: None,
            can_withdraw_confirm_times: None,
            coin_type: None,
        }
    }
}
/// Coin Type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CoinType {
    #[serde(rename = "CHAIN_TOKEN")]
    ChainToken,
}

impl Default for CoinType {
    fn default() -> CoinType {
        Self::ChainToken
    }
}

