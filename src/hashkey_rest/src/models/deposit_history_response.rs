/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DepositHistoryResponse {
    /// Deposit order created timestamp
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    /// Deposit order ID
    #[serde(rename = "depositOrderId", skip_serializing_if = "Option::is_none")]
    pub deposit_order_id: Option<String>,
    /// Coin symbol
    #[serde(rename = "coin", skip_serializing_if = "Option::is_none")]
    pub coin: Option<String>,
    /// Coin name
    #[serde(rename = "coinName", skip_serializing_if = "Option::is_none")]
    pub coin_name: Option<String>,
    /// Deposit address
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// Deposit amount
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<String>,
    /// Deposit status. Possible values are: 1: Pending address authentication, 2: Under review, 3: Deposit failed, 4: Deposit successful, 5: Refunding, 6: Refund completed, 7: Refund failed, 8: In the account, 9: The first address verification of personal address fails, 10: RMS failed
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Same as status
    #[serde(rename = "statusCode", skip_serializing_if = "Option::is_none")]
    pub status_code: Option<StatusCode>,
    /// Transaction ID
    #[serde(rename = "txId", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<String>,
}

impl DepositHistoryResponse {
    pub fn new() -> DepositHistoryResponse {
        DepositHistoryResponse {
            time: None,
            deposit_order_id: None,
            coin: None,
            coin_name: None,
            address: None,
            quantity: None,
            status: None,
            status_code: None,
            tx_id: None,
        }
    }
}
/// Deposit status. Possible values are: 1: Pending address authentication, 2: Under review, 3: Deposit failed, 4: Deposit successful, 5: Refunding, 6: Refund completed, 7: Refund failed, 8: In the account, 9: The first address verification of personal address fails, 10: RMS failed
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
    #[serde(rename = "5")]
    Variant5,
    #[serde(rename = "6")]
    Variant6,
    #[serde(rename = "7")]
    Variant7,
    #[serde(rename = "8")]
    Variant8,
    #[serde(rename = "9")]
    Variant9,
    #[serde(rename = "10")]
    Variant10,
}

impl Default for Status {
    fn default() -> Status {
        Self::Variant1
    }
}
/// Same as status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusCode {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
    #[serde(rename = "5")]
    Variant5,
    #[serde(rename = "6")]
    Variant6,
    #[serde(rename = "7")]
    Variant7,
    #[serde(rename = "8")]
    Variant8,
    #[serde(rename = "9")]
    Variant9,
    #[serde(rename = "10")]
    Variant10,
}

impl Default for StatusCode {
    fn default() -> StatusCode {
        Self::Variant1
    }
}

