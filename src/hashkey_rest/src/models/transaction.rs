/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Transaction {
    /// Unique transaction ID (This value is the trade_id in v0 API)
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// An ID defined by the client for the order   *(It will be automatically generated if not sent in the request)* 
    #[serde(rename = "clientOrderId", skip_serializing_if = "Option::is_none")]
    pub client_order_id: Option<i32>,
    /// Execution ID, the execution ID is the same for the direction of a single trade.
    #[serde(rename = "ticketId", skip_serializing_if = "Option::is_none")]
    pub ticket_id: Option<i32>,
    /// Trading pair
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Trading pair name
    #[serde(rename = "symbolName", skip_serializing_if = "Option::is_none")]
    pub symbol_name: Option<String>,
    /// Order ID
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<i32>,
    /// Match Order ID   *(Ignore this field)* 
    #[serde(rename = "matchOrderId", skip_serializing_if = "Option::is_none")]
    pub match_order_id: Option<i32>,
    /// Price of the transaction
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// Quantity traded
    #[serde(rename = "qty", skip_serializing_if = "Option::is_none")]
    pub qty: Option<String>,
    /// Commission fee
    #[serde(rename = "commission", skip_serializing_if = "Option::is_none")]
    pub commission: Option<String>,
    /// Currency of the commission fee
    #[serde(rename = "commissionAsset", skip_serializing_if = "Option::is_none")]
    pub commission_asset: Option<String>,
    /// Millisecond timestamp of the transaction
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    /// Whether the trade is a buyer
    #[serde(rename = "isBuyer", skip_serializing_if = "Option::is_none")]
    pub is_buyer: Option<bool>,
    /// Whether the trade is a maker
    #[serde(rename = "isMaker", skip_serializing_if = "Option::is_none")]
    pub is_maker: Option<bool>,
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<Box<models::Fee>>,
    /// Rebate for the maker
    #[serde(rename = "makerRebate", skip_serializing_if = "Option::is_none")]
    pub maker_rebate: Option<i32>,
    /// Account ID
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<i32>,
}

impl Transaction {
    pub fn new() -> Transaction {
        Transaction {
            id: None,
            client_order_id: None,
            ticket_id: None,
            symbol: None,
            symbol_name: None,
            order_id: None,
            match_order_id: None,
            price: None,
            qty: None,
            commission: None,
            commission_asset: None,
            time: None,
            is_buyer: None,
            is_maker: None,
            fee: None,
            maker_rebate: None,
            account_id: None,
        }
    }
}

