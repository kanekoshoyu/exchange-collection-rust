/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SingleSymbol {
    /// Exchange ID
    #[serde(rename = "exchangeId", skip_serializing_if = "Option::is_none")]
    pub exchange_id: Option<String>,
    /// Currency pair
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Trading pair status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Base Asset
    #[serde(rename = "baseAsset", skip_serializing_if = "Option::is_none")]
    pub base_asset: Option<String>,
    /// Name of base asset
    #[serde(rename = "baseAssetName", skip_serializing_if = "Option::is_none")]
    pub base_asset_name: Option<String>,
    /// Precision of base asset
    #[serde(rename = "baseAssetPrecision", skip_serializing_if = "Option::is_none")]
    pub base_asset_precision: Option<String>,
    /// Quoted Asset
    #[serde(rename = "quoteAsset", skip_serializing_if = "Option::is_none")]
    pub quote_asset: Option<String>,
    /// Name of quoted asset
    #[serde(rename = "quoteAssetName", skip_serializing_if = "Option::is_none")]
    pub quote_asset_name: Option<String>,
    /// Precision of quoted asset
    #[serde(rename = "quotePrecision", skip_serializing_if = "Option::is_none")]
    pub quote_precision: Option<String>,
    /// Whether retail client is allowed
    #[serde(rename = "retailAllowed", skip_serializing_if = "Option::is_none")]
    pub retail_allowed: Option<bool>,
    /// Whether PI client is allowed
    #[serde(rename = "piAllowed", skip_serializing_if = "Option::is_none")]
    pub pi_allowed: Option<bool>,
    /// Whether Corporate client is allowed
    #[serde(rename = "corporateAllowed", skip_serializing_if = "Option::is_none")]
    pub corporate_allowed: Option<bool>,
    /// Whether Omnibus client is allowed
    #[serde(rename = "omnibusAllowed", skip_serializing_if = "Option::is_none")]
    pub omnibus_allowed: Option<bool>,
    /// Currently not in use
    #[serde(rename = "icebergAllowed", skip_serializing_if = "Option::is_none")]
    pub iceberg_allowed: Option<String>,
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<models::Filter>>,
}

impl SingleSymbol {
    pub fn new() -> SingleSymbol {
        SingleSymbol {
            exchange_id: None,
            symbol: None,
            status: None,
            base_asset: None,
            base_asset_name: None,
            base_asset_precision: None,
            quote_asset: None,
            quote_asset_name: None,
            quote_precision: None,
            retail_allowed: None,
            pi_allowed: None,
            corporate_allowed: None,
            omnibus_allowed: None,
            iceberg_allowed: None,
            filters: None,
        }
    }
}
/// Trading pair status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "TRADING")]
    Trading,
    #[serde(rename = "HALT")]
    Halt,
    #[serde(rename = "BREAK")]
    Break,
}

impl Default for Status {
    fn default() -> Status {
        Self::Trading
    }
}

