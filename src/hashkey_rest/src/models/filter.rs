/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Filter {
    /// Trading restriction type
    #[serde(rename = "filterType", skip_serializing_if = "Option::is_none")]
    pub filter_type: Option<FilterType>,
    /// Deprecated, no longer in-use
    #[serde(rename = "minPrice", skip_serializing_if = "Option::is_none")]
    pub min_price: Option<String>,
    /// Deprecated, no longer in-use
    #[serde(rename = "maxPrice", skip_serializing_if = "Option::is_none")]
    pub max_price: Option<String>,
    /// Minimum price change, only for PRICE_FILTER types
    #[serde(rename = "tickSize", skip_serializing_if = "Option::is_none")]
    pub tick_size: Option<String>,
    /// Minimum number of transactions, only for LOT_SIZE types
    #[serde(rename = "minQty", skip_serializing_if = "Option::is_none")]
    pub min_qty: Option<String>,
    /// Maximum number of transactions, only for LOT_SIZE types
    #[serde(rename = "maxQty", skip_serializing_if = "Option::is_none")]
    pub max_qty: Option<String>,
    /// Minimal change in quantity, only used for LOT_SIZE types
    #[serde(rename = "stepSize", skip_serializing_if = "Option::is_none")]
    pub step_size: Option<String>,
    /// Minimum notional turnover, only for MIN_NOTIONAL types
    #[serde(rename = "minNotional", skip_serializing_if = "Option::is_none")]
    pub min_notional: Option<String>,
    /// Minimum turnover, only for TRADE_AMOUNT types
    #[serde(rename = "minAmount", skip_serializing_if = "Option::is_none")]
    pub min_amount: Option<String>,
    /// Maximum turnover, only for TRADE_AMOUNT types
    #[serde(rename = "maxAmount", skip_serializing_if = "Option::is_none")]
    pub max_amount: Option<String>,
    /// Minimum purchase price, only for TRADE_AMOUNT types
    #[serde(rename = "minBuyPrice", skip_serializing_if = "Option::is_none")]
    pub min_buy_price: Option<String>,
    /// Limit maximum sell price, only for LIMIT_TRADING types
    #[serde(rename = "maxSellPrice", skip_serializing_if = "Option::is_none")]
    pub max_sell_price: Option<String>,
    /// Minimum cash notional required for Market order
    #[serde(rename = "marketOrderMinAmount", skip_serializing_if = "Option::is_none")]
    pub market_order_min_amount: Option<String>,
    /// Minimum cash notional required for Market order
    #[serde(rename = "marketOrderMaxAmount", skip_serializing_if = "Option::is_none")]
    pub market_order_max_amount: Option<String>,
    /// Limit Buy cannot be higher than the mark price, only for LIMIT_TRADING types
    #[serde(rename = "buyPriceUpRate", skip_serializing_if = "Option::is_none")]
    pub buy_price_up_rate: Option<String>,
    /// Limit Sell cannot be lower than the mark price, only for LIMIT_TRADING type
    #[serde(rename = "sellPriceDownRate", skip_serializing_if = "Option::is_none")]
    pub sell_price_down_rate: Option<String>,
    /// Market order start time is not allowed, only for OPEN_QUOTE types
    #[serde(rename = "noAllowMarketStartTime", skip_serializing_if = "Option::is_none")]
    pub no_allow_market_start_time: Option<String>,
    /// Market order end time is not allowed, only for OPEN_QUOTE types
    #[serde(rename = "noAllowMarketEndTime", skip_serializing_if = "Option::is_none")]
    pub no_allow_market_end_time: Option<String>,
    /// Time limit order start time, only for OPEN_QUOTE types
    #[serde(rename = "limitOrderStartTime", skip_serializing_if = "Option::is_none")]
    pub limit_order_start_time: Option<String>,
    /// Time limit order end time, only for OPEN_QUOTE types
    #[serde(rename = "limitOrderEndTime", skip_serializing_if = "Option::is_none")]
    pub limit_order_end_time: Option<String>,
    /// Lowest price for a limited time limit order, only for OPEN_QUOTE types
    #[serde(rename = "limitMinPrice", skip_serializing_if = "Option::is_none")]
    pub limit_min_price: Option<String>,
    /// Limit order maximum price, only for OPEN_QUOTE types
    #[serde(rename = "limitMaxPrice", skip_serializing_if = "Option::is_none")]
    pub limit_max_price: Option<String>,
}

impl Filter {
    pub fn new() -> Filter {
        Filter {
            filter_type: None,
            min_price: None,
            max_price: None,
            tick_size: None,
            min_qty: None,
            max_qty: None,
            step_size: None,
            min_notional: None,
            min_amount: None,
            max_amount: None,
            min_buy_price: None,
            max_sell_price: None,
            market_order_min_amount: None,
            market_order_max_amount: None,
            buy_price_up_rate: None,
            sell_price_down_rate: None,
            no_allow_market_start_time: None,
            no_allow_market_end_time: None,
            limit_order_start_time: None,
            limit_order_end_time: None,
            limit_min_price: None,
            limit_max_price: None,
        }
    }
}
/// Trading restriction type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FilterType {
    #[serde(rename = "PRICE_FILTER")]
    PriceFilter,
    #[serde(rename = "LOT_SIZE")]
    LotSize,
    #[serde(rename = "MIN_NOTIONAL")]
    MinNotional,
    #[serde(rename = "TRADE_AMOUNT")]
    TradeAmount,
    #[serde(rename = "LIMIT_TRADING")]
    LimitTrading,
    #[serde(rename = "MARKET_TRADING")]
    MarketTrading,
    #[serde(rename = "OPEN_QOUTE")]
    OpenQoute,
}

impl Default for FilterType {
    fn default() -> FilterType {
        Self::PriceFilter
    }
}

