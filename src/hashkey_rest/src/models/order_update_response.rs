/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderUpdateResponse {
    /// Event type
    #[serde(rename = "e", skip_serializing_if = "Option::is_none")]
    pub e: Option<String>,
    /// Event time
    #[serde(rename = "E", skip_serializing_if = "Option::is_none")]
    pub e: Option<i64>,
    /// Symbol
    #[serde(rename = "s", skip_serializing_if = "Option::is_none")]
    pub s: Option<String>,
    /// Client order ID
    #[serde(rename = "c", skip_serializing_if = "Option::is_none")]
    pub c: Option<i32>,
    /// Side (BUY or SELL)
    #[serde(rename = "S", skip_serializing_if = "Option::is_none")]
    pub s: Option<String>,
    /// Order type
    #[serde(rename = "o", skip_serializing_if = "Option::is_none")]
    pub o: Option<String>,
    /// Time in force
    #[serde(rename = "f", skip_serializing_if = "Option::is_none")]
    pub f: Option<String>,
    /// Order quantity
    #[serde(rename = "q", skip_serializing_if = "Option::is_none")]
    pub q: Option<String>,
    /// Order price
    #[serde(rename = "p", skip_serializing_if = "Option::is_none")]
    pub p: Option<String>,
    /// Requested cash amount
    #[serde(rename = "reqAmt", skip_serializing_if = "Option::is_none")]
    pub req_amt: Option<String>,
    /// Current order status
    #[serde(rename = "X", skip_serializing_if = "Option::is_none")]
    pub x: Option<String>,
    /// Execution ID
    #[serde(rename = "d", skip_serializing_if = "Option::is_none")]
    pub d: Option<String>,
    /// Order ID
    #[serde(rename = "i", skip_serializing_if = "Option::is_none")]
    pub i: Option<i32>,
    /// Last executed quantity
    #[serde(rename = "l", skip_serializing_if = "Option::is_none")]
    pub l: Option<String>,
    /// Unfilled quantity
    #[serde(rename = "r", skip_serializing_if = "Option::is_none")]
    pub r: Option<i32>,
    /// Cumulative filled quantity
    #[serde(rename = "z", skip_serializing_if = "Option::is_none")]
    pub z: Option<String>,
    /// Last executed price
    #[serde(rename = "L", skip_serializing_if = "Option::is_none")]
    pub l: Option<String>,
    /// Average executed price
    #[serde(rename = "V", skip_serializing_if = "Option::is_none")]
    pub v: Option<String>,
    /// Commission amount
    #[serde(rename = "n", skip_serializing_if = "Option::is_none")]
    pub n: Option<String>,
    /// Commission asset
    #[serde(rename = "N", skip_serializing_if = "Option::is_none")]
    pub n: Option<String>,
    /// Is the trade normal
    #[serde(rename = "u", skip_serializing_if = "Option::is_none")]
    pub u: Option<bool>,
    /// Is the order working?
    #[serde(rename = "w", skip_serializing_if = "Option::is_none")]
    pub w: Option<bool>,
    /// Is this trade the maker side?
    #[serde(rename = "m", skip_serializing_if = "Option::is_none")]
    pub m: Option<bool>,
    /// Order creation time
    #[serde(rename = "O", skip_serializing_if = "Option::is_none")]
    pub o: Option<i64>,
    /// Cumulative quote asset transacted quantity
    #[serde(rename = "Z", skip_serializing_if = "Option::is_none")]
    pub z: Option<String>,
    /// Order cancel reject reason
    #[serde(rename = "x", skip_serializing_if = "Option::is_none")]
    pub x: Option<String>,
}

impl OrderUpdateResponse {
    pub fn new() -> OrderUpdateResponse {
        OrderUpdateResponse {
            e: None,
            e: None,
            s: None,
            c: None,
            s: None,
            o: None,
            f: None,
            q: None,
            p: None,
            req_amt: None,
            x: None,
            d: None,
            i: None,
            l: None,
            r: None,
            z: None,
            l: None,
            v: None,
            n: None,
            n: None,
            u: None,
            w: None,
            m: None,
            o: None,
            z: None,
            x: None,
        }
    }
}

