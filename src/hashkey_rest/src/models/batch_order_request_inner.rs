/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchOrderRequestInner {
    /// Name of instrument, e.g., \"BTCUSD\", \"ETHUSD\"
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// BUY or SELL
    #[serde(rename = "side")]
    pub side: Side,
    /// Order type: - `LIMIT` - Limit order - `MARKET` - Market order - `LIMIT_MAKER` - Maker Limit order 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Order amount in units of the instrument. Commonly known as \"orderQty\". *Required if the order type is \"MARKET\"* 
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<f64>,
    /// Cash amount in the units of quote currency. Market order only. *Required if the order type is \"MARKET\"* 
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f64>,
    /// Required for LIMIT and LIMIT_MAKER orders
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    /// An ID defined by the client for the order. It will be automatically generated if it is not sent in the request. 
    #[serde(rename = "newClientOrderId", skip_serializing_if = "Option::is_none")]
    pub new_client_order_id: Option<String>,
    /// GTC for Limit order, Limit maker order and IOC for Market order 
    #[serde(rename = "timeInForce", skip_serializing_if = "Option::is_none")]
    pub time_in_force: Option<TimeInForce>,
    /// Recv Window. Default 5000
    #[serde(rename = "recvWindow", skip_serializing_if = "Option::is_none")]
    pub recv_window: Option<i64>,
    /// Timestamp
    #[serde(rename = "timestamp")]
    pub timestamp: i64,
}

impl BatchOrderRequestInner {
    pub fn new(symbol: String, side: Side, r#type: Type, timestamp: i64) -> BatchOrderRequestInner {
        BatchOrderRequestInner {
            symbol,
            side,
            r#type,
            quantity: None,
            amount: None,
            price: None,
            new_client_order_id: None,
            time_in_force: None,
            recv_window: None,
            timestamp,
        }
    }
}
/// BUY or SELL
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "BUY")]
    Buy,
    #[serde(rename = "SELL")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Order type: - `LIMIT` - Limit order - `MARKET` - Market order - `LIMIT_MAKER` - Maker Limit order 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "LIMIT")]
    Limit,
    #[serde(rename = "MARKET")]
    Market,
    #[serde(rename = "LIMIT_MAKER")]
    LimitMaker,
}

impl Default for Type {
    fn default() -> Type {
        Self::Limit
    }
}
/// GTC for Limit order, Limit maker order and IOC for Market order 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TimeInForce {
    #[serde(rename = "GTC")]
    Gtc,
    #[serde(rename = "IOC")]
    Ioc,
}

impl Default for TimeInForce {
    fn default() -> TimeInForce {
        Self::Gtc
    }
}

