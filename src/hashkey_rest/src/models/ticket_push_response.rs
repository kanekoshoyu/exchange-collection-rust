/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TicketPushResponse {
    /// Event type
    #[serde(rename = "e", skip_serializing_if = "Option::is_none")]
    pub e: Option<String>,
    /// Event time
    #[serde(rename = "E", skip_serializing_if = "Option::is_none")]
    pub e: Option<i64>,
    /// Symbol
    #[serde(rename = "s", skip_serializing_if = "Option::is_none")]
    pub s: Option<String>,
    /// Quantity
    #[serde(rename = "q", skip_serializing_if = "Option::is_none")]
    pub q: Option<String>,
    /// Time
    #[serde(rename = "t", skip_serializing_if = "Option::is_none")]
    pub t: Option<i64>,
    /// Price
    #[serde(rename = "p", skip_serializing_if = "Option::is_none")]
    pub p: Option<String>,
    /// Ticket ID
    #[serde(rename = "T", skip_serializing_if = "Option::is_none")]
    pub t: Option<String>,
    /// Order ID
    #[serde(rename = "o", skip_serializing_if = "Option::is_none")]
    pub o: Option<String>,
    /// Client order ID
    #[serde(rename = "c", skip_serializing_if = "Option::is_none")]
    pub c: Option<i32>,
    /// Match order ID
    #[serde(rename = "O", skip_serializing_if = "Option::is_none")]
    pub o: Option<String>,
    /// Account ID
    #[serde(rename = "a", skip_serializing_if = "Option::is_none")]
    pub a: Option<String>,
    /// Ignore
    #[serde(rename = "A", skip_serializing_if = "Option::is_none")]
    pub a: Option<i32>,
    /// Is maker
    #[serde(rename = "m", skip_serializing_if = "Option::is_none")]
    pub m: Option<bool>,
    /// Side (SELL or BUY)
    #[serde(rename = "S", skip_serializing_if = "Option::is_none")]
    pub s: Option<String>,
}

impl TicketPushResponse {
    pub fn new() -> TicketPushResponse {
        TicketPushResponse {
            e: None,
            e: None,
            s: None,
            q: None,
            t: None,
            p: None,
            t: None,
            o: None,
            c: None,
            o: None,
            a: None,
            a: None,
            m: None,
            s: None,
        }
    }
}

