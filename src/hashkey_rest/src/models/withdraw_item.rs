/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WithdrawItem {
    /// Timestamp of the withdrawal order
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    /// Withdrawal order ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Coin symbol
    #[serde(rename = "coin", skip_serializing_if = "Option::is_none")]
    pub coin: Option<String>,
    /// Coin ID
    #[serde(rename = "coinId", skip_serializing_if = "Option::is_none")]
    pub coin_id: Option<String>,
    /// Coin Name
    #[serde(rename = "coinName", skip_serializing_if = "Option::is_none")]
    pub coin_name: Option<String>,
    /// Withdrawal address
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// Withdrawal amount entered by the user
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<String>,
    /// Net amount received after deductions
    #[serde(rename = "arriveQuantity", skip_serializing_if = "Option::is_none")]
    pub arrive_quantity: Option<String>,
    /// Status of the withdrawal
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Reason for failure, if applicable
    #[serde(rename = "failedReason", skip_serializing_if = "Option::is_none")]
    pub failed_reason: Option<String>,
    /// Transaction ID on the blockchain
    #[serde(rename = "txId", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<String>,
    /// Withdrawal address URL (same as address)
    #[serde(rename = "addressUrl", skip_serializing_if = "Option::is_none")]
    pub address_url: Option<String>,
    /// Fee currency ID
    #[serde(rename = "feeCoinId", skip_serializing_if = "Option::is_none")]
    pub fee_coin_id: Option<String>,
    /// Fee currency name
    #[serde(rename = "feeCoinName", skip_serializing_if = "Option::is_none")]
    pub fee_coin_name: Option<String>,
    /// Handling fee
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// Remark or additional information
    #[serde(rename = "remark", skip_serializing_if = "Option::is_none")]
    pub remark: Option<String>,
}

impl WithdrawItem {
    pub fn new() -> WithdrawItem {
        WithdrawItem {
            time: None,
            id: None,
            coin: None,
            coin_id: None,
            coin_name: None,
            address: None,
            quantity: None,
            arrive_quantity: None,
            status: None,
            failed_reason: None,
            tx_id: None,
            address_url: None,
            fee_coin_id: None,
            fee_coin_name: None,
            fee: None,
            remark: None,
        }
    }
}

