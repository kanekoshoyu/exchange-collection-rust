/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TradeFlow {
    /// Record ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Account ID
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// Transaction type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Order Quantity. Buy direction (+ve), Sell direction (-ve)
    #[serde(rename = "netBaseAmount", skip_serializing_if = "Option::is_none")]
    pub net_base_amount: Option<String>,
    /// Base currency
    #[serde(rename = "baseCcy", skip_serializing_if = "Option::is_none")]
    pub base_ccy: Option<String>,
    /// Base asset balance
    #[serde(rename = "baseAssetBalance", skip_serializing_if = "Option::is_none")]
    pub base_asset_balance: Option<String>,
    /// Price * Quantity. Buy direction (-ve), Sell direction (+ve)
    #[serde(rename = "netQuoteAmount", skip_serializing_if = "Option::is_none")]
    pub net_quote_amount: Option<String>,
    /// Quote currency
    #[serde(rename = "quoteCcy", skip_serializing_if = "Option::is_none")]
    pub quote_ccy: Option<String>,
    /// Quote asset balance
    #[serde(rename = "quoteAssetBalance", skip_serializing_if = "Option::is_none")]
    pub quote_asset_balance: Option<String>,
    /// Buy or Sell direction
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    /// Trading fee
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// Currency for the fee
    #[serde(rename = "feeCcy", skip_serializing_if = "Option::is_none")]
    pub fee_ccy: Option<String>,
    /// Client order ID
    #[serde(rename = "clientOrderId", skip_serializing_if = "Option::is_none")]
    pub client_order_id: Option<String>,
    /// Order ID
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// Trade ID
    #[serde(rename = "tradeId", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<String>,
    /// Trade completed time
    #[serde(rename = "transactTime", skip_serializing_if = "Option::is_none")]
    pub transact_time: Option<String>,
}

impl TradeFlow {
    pub fn new() -> TradeFlow {
        TradeFlow {
            id: None,
            account_id: None,
            r#type: None,
            net_base_amount: None,
            base_ccy: None,
            base_asset_balance: None,
            net_quote_amount: None,
            quote_ccy: None,
            quote_asset_balance: None,
            direction: None,
            fee: None,
            fee_ccy: None,
            client_order_id: None,
            order_id: None,
            trade_id: None,
            transact_time: None,
        }
    }
}

