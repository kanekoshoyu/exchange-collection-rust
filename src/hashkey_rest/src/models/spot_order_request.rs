/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpotOrderRequest {
    /// An ID defined by the client for the order, it will be automatically generated if it is not sent in the request
    #[serde(rename = "newClientOrderId", skip_serializing_if = "Option::is_none")]
    pub new_client_order_id: Option<String>,
    /// Name of instrument (e.g., \"BTCUSD\", \"ETHUSD\")
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// Order price (required for LIMIT and LIMIT_MAKER orders)
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    /// Order Side
    #[serde(rename = "side")]
    pub side: Side,
    /// Order type
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Order amount in units of the instrument
    #[serde(rename = "quantity")]
    pub quantity: f64,
    /// Cash amount in the units of quote asset (required for MARKET orders)
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f64>,
    /// Recv Window. Default 5000
    #[serde(rename = "recvWindow", skip_serializing_if = "Option::is_none")]
    pub recv_window: Option<i64>,
    /// Millisecond Timestamp
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i64>,
    /// Signature
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
}

impl SpotOrderRequest {
    pub fn new(symbol: String, side: Side, r#type: Type, quantity: f64) -> SpotOrderRequest {
        SpotOrderRequest {
            new_client_order_id: None,
            symbol,
            price: None,
            side,
            r#type,
            quantity,
            amount: None,
            recv_window: None,
            timestamp: None,
            signature: None,
        }
    }
}
/// Order Side
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "BUY")]
    Buy,
    #[serde(rename = "SELL")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Order type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "LIMIT")]
    Limit,
    #[serde(rename = "MARKET")]
    Market,
    #[serde(rename = "LIMIT_MAKER")]
    LimitMaker,
}

impl Default for Type {
    fn default() -> Type {
        Self::Limit
    }
}

