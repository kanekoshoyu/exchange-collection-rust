/*
 * Hashkey Exchange
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`quote_ws_v1_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum QuoteWsV1PostError {
    UnknownValue(serde_json::Value),
}


/// Establishes a WebSocket connection for real-time communication
pub async fn quote_ws_v1_post(configuration: &configuration::Configuration, quote_ws_v1_post_request: Option<models::QuoteWsV1PostRequest>) -> Result<models::QuoteWsV1Post200Response, Error<QuoteWsV1PostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_quote_ws_v1_post_request = quote_ws_v1_post_request;

    let uri_str = format!("{}/quote/ws/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_quote_ws_v1_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<QuoteWsV1PostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

