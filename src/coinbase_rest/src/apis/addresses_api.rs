/*
 * Coinbase API
 *
 * The Coinbase v2 API (converted from Swagger to OpenAPI by kanekoshoyu)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`accounts_account_id_addresses_address_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsAccountIdAddressesAddressIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`accounts_account_id_addresses_address_id_transactions_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsAccountIdAddressesAddressIdTransactionsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`accounts_account_id_addresses_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsAccountIdAddressesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`accounts_account_id_addresses_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsAccountIdAddressesPostError {
    UnknownValue(serde_json::Value),
}


/// Show an individual address for an account. Regular bitcoin address can be used in place of address_id but the address has to be associated to the correct account.    *Important* Addresses should be considered one time use only. 
pub async fn accounts_account_id_addresses_address_id_get(configuration: &configuration::Configuration, account_id: &str, address_id: &str) -> Result<models::AccountsAccountIdAddressesPost201Response, Error<AccountsAccountIdAddressesAddressIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;
    let p_address_id = address_id;

    let uri_str = format!("{}/accounts/{account_id}/addresses/{address_id}", configuration.base_path, account_id=crate::apis::urlencode(p_account_id), address_id=crate::apis::urlencode(p_address_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountsAccountIdAddressesAddressIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// list transactions that have been sent to a specific address. Regular bitcoin address can be used in place of address_id but the address has to be associated to the correct account. 
pub async fn accounts_account_id_addresses_address_id_transactions_get(configuration: &configuration::Configuration, account_id: &str, address_id: &str) -> Result<models::AccountsAccountIdAddressesAddressIdTransactionsGet200Response, Error<AccountsAccountIdAddressesAddressIdTransactionsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;
    let p_address_id = address_id;

    let uri_str = format!("{}/accounts/{account_id}/addresses/{address_id}/transactions", configuration.base_path, account_id=crate::apis::urlencode(p_account_id), address_id=crate::apis::urlencode(p_address_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountsAccountIdAddressesAddressIdTransactionsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists addresses for an account.  *Important*: Addresses should be considered one time use only. 
pub async fn accounts_account_id_addresses_get(configuration: &configuration::Configuration, account_id: &str) -> Result<models::AccountsAccountIdAddressesGet200Response, Error<AccountsAccountIdAddressesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;

    let uri_str = format!("{}/accounts/{account_id}/addresses", configuration.base_path, account_id=crate::apis::urlencode(p_account_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountsAccountIdAddressesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a new address for an account. As all the arguments are optinal, itâ€™s possible just to do a empty POST which will create a new address. This is handy if you need to create new receive addresses for an account on-demand. Addresses can be created for all account types. With fiat accounts, funds will be received with Instant Exchange. 
pub async fn accounts_account_id_addresses_post(configuration: &configuration::Configuration, account_id: &str, address_properties: Option<models::AccountsAccountIdAddressesPostRequest>) -> Result<models::AccountsAccountIdAddressesPost201Response, Error<AccountsAccountIdAddressesPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;
    let p_address_properties = address_properties;

    let uri_str = format!("{}/accounts/{account_id}/addresses", configuration.base_path, account_id=crate::apis::urlencode(p_account_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_address_properties);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountsAccountIdAddressesPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

