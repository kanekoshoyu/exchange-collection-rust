/*
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubAccountCoinFuturesDetails {
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "assets")]
    pub assets: Vec<models::SubAccountCoinFuturesDetailsAssetsInner>,
    #[serde(rename = "canDeposit")]
    pub can_deposit: bool,
    #[serde(rename = "canTrade")]
    pub can_trade: bool,
    #[serde(rename = "canWithdraw")]
    pub can_withdraw: bool,
    #[serde(rename = "feeTier")]
    pub fee_tier: i64,
    #[serde(rename = "updateTime")]
    pub update_time: i64,
}

impl SubAccountCoinFuturesDetails {
    pub fn new(email: String, assets: Vec<models::SubAccountCoinFuturesDetailsAssetsInner>, can_deposit: bool, can_trade: bool, can_withdraw: bool, fee_tier: i64, update_time: i64) -> SubAccountCoinFuturesDetails {
        SubAccountCoinFuturesDetails {
            email,
            assets,
            can_deposit,
            can_trade,
            can_withdraw,
            fee_tier,
            update_time,
        }
    }
}

