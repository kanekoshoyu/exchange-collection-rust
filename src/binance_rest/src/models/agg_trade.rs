/*
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggTrade {
    /// Aggregate tradeId
    #[serde(rename = "a")]
    pub a: i64,
    /// Price
    #[serde(rename = "p")]
    pub p: String,
    /// Quantity
    #[serde(rename = "q")]
    pub q: String,
    /// First tradeId
    #[serde(rename = "f")]
    pub f: i64,
    /// Last tradeId
    #[serde(rename = "l")]
    pub l: i64,
    /// Timestamp
    #[serde(rename = "T")]
    pub t: bool,
    /// Was the buyer the maker?
    #[serde(rename = "m")]
    pub m: bool,
    /// Was the trade the best price match?
    #[serde(rename = "M")]
    pub m: bool,
}

impl AggTrade {
    pub fn new(a: i64, p: String, q: String, f: i64, l: i64, t: bool, m: bool, m: bool) -> AggTrade {
        AggTrade {
            a,
            p,
            q,
            f,
            l,
            t,
            m,
            m,
        }
    }
}

