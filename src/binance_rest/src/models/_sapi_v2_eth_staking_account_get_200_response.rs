/*
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SapiV2EthStakingAccountGet200Response {
    #[serde(rename = "holdingInETH")]
    pub holding_in_eth: String,
    #[serde(rename = "holdings")]
    pub holdings: Box<models::SapiV2EthStakingAccountGet200ResponseHoldings>,
    #[serde(rename = "thirtyDaysProfitInETH")]
    pub thirty_days_profit_in_eth: String,
    #[serde(rename = "profit")]
    pub profit: Box<models::SapiV2EthStakingAccountGet200ResponseProfit>,
}

impl SapiV2EthStakingAccountGet200Response {
    pub fn new(holding_in_eth: String, holdings: models::SapiV2EthStakingAccountGet200ResponseHoldings, thirty_days_profit_in_eth: String, profit: models::SapiV2EthStakingAccountGet200ResponseProfit) -> SapiV2EthStakingAccountGet200Response {
        SapiV2EthStakingAccountGet200Response {
            holding_in_eth,
            holdings: Box::new(holdings),
            thirty_days_profit_in_eth,
            profit: Box::new(profit),
        }
    }
}

