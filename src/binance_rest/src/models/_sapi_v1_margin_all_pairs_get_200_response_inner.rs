/*
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SapiV1MarginAllPairsGet200ResponseInner {
    #[serde(rename = "base")]
    pub base: String,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "isBuyAllowed")]
    pub is_buy_allowed: bool,
    #[serde(rename = "isMarginTrade")]
    pub is_margin_trade: bool,
    #[serde(rename = "isSellAllowed")]
    pub is_sell_allowed: bool,
    #[serde(rename = "quote")]
    pub quote: String,
    #[serde(rename = "symbol")]
    pub symbol: String,
}

impl SapiV1MarginAllPairsGet200ResponseInner {
    pub fn new(base: String, id: i64, is_buy_allowed: bool, is_margin_trade: bool, is_sell_allowed: bool, quote: String, symbol: String) -> SapiV1MarginAllPairsGet200ResponseInner {
        SapiV1MarginAllPairsGet200ResponseInner {
            base,
            id,
            is_buy_allowed,
            is_margin_trade,
            is_sell_allowed,
            quote,
            symbol,
        }
    }
}

