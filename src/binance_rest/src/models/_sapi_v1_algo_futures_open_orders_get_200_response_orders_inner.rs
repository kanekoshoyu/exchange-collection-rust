/*
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SapiV1AlgoFuturesOpenOrdersGet200ResponseOrdersInner {
    #[serde(rename = "algoId")]
    pub algo_id: i64,
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "side")]
    pub side: String,
    #[serde(rename = "positionSide")]
    pub position_side: String,
    #[serde(rename = "totalQty")]
    pub total_qty: String,
    #[serde(rename = "executedQty")]
    pub executed_qty: String,
    #[serde(rename = "executedAmt")]
    pub executed_amt: String,
    #[serde(rename = "avgPrice")]
    pub avg_price: String,
    #[serde(rename = "clientAlgoId")]
    pub client_algo_id: String,
    #[serde(rename = "bookTime")]
    pub book_time: i64,
    #[serde(rename = "endTime")]
    pub end_time: i64,
    #[serde(rename = "algoStatus")]
    pub algo_status: String,
    #[serde(rename = "algoType")]
    pub algo_type: String,
    #[serde(rename = "urgency")]
    pub urgency: String,
}

impl SapiV1AlgoFuturesOpenOrdersGet200ResponseOrdersInner {
    pub fn new(algo_id: i64, symbol: String, side: String, position_side: String, total_qty: String, executed_qty: String, executed_amt: String, avg_price: String, client_algo_id: String, book_time: i64, end_time: i64, algo_status: String, algo_type: String, urgency: String) -> SapiV1AlgoFuturesOpenOrdersGet200ResponseOrdersInner {
        SapiV1AlgoFuturesOpenOrdersGet200ResponseOrdersInner {
            algo_id,
            symbol,
            side,
            position_side,
            total_qty,
            executed_qty,
            executed_amt,
            avg_price,
            client_algo_id,
            book_time,
            end_time,
            algo_status,
            algo_type,
            urgency,
        }
    }
}

