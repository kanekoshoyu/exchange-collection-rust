/*
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Trade {
    /// trade id
    #[serde(rename = "id")]
    pub id: i64,
    /// price
    #[serde(rename = "price")]
    pub price: String,
    /// amount of base asset
    #[serde(rename = "qty")]
    pub qty: String,
    /// amount of quote asset
    #[serde(rename = "quoteQty")]
    pub quote_qty: String,
    /// Trade executed timestamp, as same as `T` in the stream
    #[serde(rename = "time")]
    pub time: i64,
    #[serde(rename = "isBuyerMaker")]
    pub is_buyer_maker: bool,
    #[serde(rename = "isBestMatch")]
    pub is_best_match: bool,
}

impl Trade {
    pub fn new(id: i64, price: String, qty: String, quote_qty: String, time: i64, is_buyer_maker: bool, is_best_match: bool) -> Trade {
        Trade {
            id,
            price,
            qty,
            quote_qty,
            time,
            is_buyer_maker,
            is_best_match,
        }
    }
}

