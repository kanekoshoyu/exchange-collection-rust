/*
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`sapi_v1_loan_adjust_ltv_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanAdjustLtvPostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_borrow_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanBorrowHistoryGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_borrow_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanBorrowPostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_collateral_data_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanCollateralDataGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_customize_margin_call_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanCustomizeMarginCallPostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_income_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanIncomeGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_loanable_data_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanLoanableDataGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_ltv_adjustment_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanLtvAdjustmentHistoryGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_ongoing_orders_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanOngoingOrdersGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_repay_collateral_rate_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanRepayCollateralRateGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_repay_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanRepayHistoryGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_loan_repay_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1LoanRepayPostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v2_loan_flexible_adjust_ltv_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV2LoanFlexibleAdjustLtvPostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v2_loan_flexible_borrow_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV2LoanFlexibleBorrowHistoryGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v2_loan_flexible_borrow_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV2LoanFlexibleBorrowPostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v2_loan_flexible_collateral_data_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV2LoanFlexibleCollateralDataGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v2_loan_flexible_loanable_data_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV2LoanFlexibleLoanableDataGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v2_loan_flexible_ltv_adjustment_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV2LoanFlexibleLtvAdjustmentHistoryGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v2_loan_flexible_ongoing_orders_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV2LoanFlexibleOngoingOrdersGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v2_loan_flexible_repay_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV2LoanFlexibleRepayHistoryGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v2_loan_flexible_repay_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV2LoanFlexibleRepayPostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}


/// Weight(UID): 6000
pub async fn sapi_v1_loan_adjust_ltv_post(configuration: &configuration::Configuration, order_id: i64, amount: f64, direction: &str, timestamp: i64, signature: &str, recv_window: Option<i64>) -> Result<models::SapiV1LoanAdjustLtvPost200Response, Error<SapiV1LoanAdjustLtvPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_order_id = order_id;
    let p_amount = amount;
    let p_direction = direction;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/adjust/ltv", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = req_builder.query(&[("orderId", &p_order_id.to_string())]);
    req_builder = req_builder.query(&[("amount", &p_amount.to_string())]);
    req_builder = req_builder.query(&[("direction", &p_direction.to_string())]);
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanAdjustLtvPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// - If startTime and endTime are not sent, the recent 90-day data will be returned. - The max interval between startTime and endTime is 180 days.  Weight(IP): 400
pub async fn sapi_v1_loan_borrow_history_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, order_id: Option<i64>, loan_coin: Option<&str>, collateral_coin: Option<&str>, start_time: Option<i64>, end_time: Option<i64>, current: Option<i32>, limit: Option<i64>, recv_window: Option<i64>) -> Result<models::SapiV1LoanBorrowHistoryGet200Response, Error<SapiV1LoanBorrowHistoryGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_order_id = order_id;
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_start_time = start_time;
    let p_end_time = end_time;
    let p_current = current;
    let p_limit = limit;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/borrow/history", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_order_id {
        req_builder = req_builder.query(&[("orderId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_start_time {
        req_builder = req_builder.query(&[("startTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_end_time {
        req_builder = req_builder.query(&[("endTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_current {
        req_builder = req_builder.query(&[("current", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanBorrowHistoryGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Weight(UID): 6000
pub async fn sapi_v1_loan_borrow_post(configuration: &configuration::Configuration, loan_coin: &str, collateral_coin: &str, loan_term: i32, timestamp: i64, signature: &str, loan_amount: Option<f32>, collateral_amount: Option<f32>, recv_window: Option<i64>) -> Result<models::SapiV1LoanBorrowPost200Response, Error<SapiV1LoanBorrowPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_loan_term = loan_term;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_loan_amount = loan_amount;
    let p_collateral_amount = collateral_amount;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/borrow", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = req_builder.query(&[("loanCoin", &p_loan_coin.to_string())]);
    if let Some(ref param_value) = p_loan_amount {
        req_builder = req_builder.query(&[("loanAmount", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("collateralCoin", &p_collateral_coin.to_string())]);
    if let Some(ref param_value) = p_collateral_amount {
        req_builder = req_builder.query(&[("collateralAmount", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("loanTerm", &p_loan_term.to_string())]);
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanBorrowPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get LTV information and collateral limit of collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400
pub async fn sapi_v1_loan_collateral_data_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, collateral_coin: Option<&str>, vip_level: Option<i32>, recv_window: Option<i64>) -> Result<models::SapiV1LoanCollateralDataGet200Response, Error<SapiV1LoanCollateralDataGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_collateral_coin = collateral_coin;
    let p_vip_level = vip_level;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/collateral/data", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_vip_level {
        req_builder = req_builder.query(&[("vipLevel", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanCollateralDataGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Customize margin call for ongoing orders only.  Weight(UID): 6000
pub async fn sapi_v1_loan_customize_margin_call_post(configuration: &configuration::Configuration, margin_call: f32, timestamp: i64, signature: &str, order_id: Option<i64>, collateral_coin: Option<&str>, recv_window: Option<i64>) -> Result<models::SapiV1LoanCustomizeMarginCallPost200Response, Error<SapiV1LoanCustomizeMarginCallPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_margin_call = margin_call;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_order_id = order_id;
    let p_collateral_coin = collateral_coin;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/customize/margin_call", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_order_id {
        req_builder = req_builder.query(&[("orderId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("marginCall", &p_margin_call.to_string())]);
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanCustomizeMarginCallPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// - If startTime and endTime are not sent, the recent 7-day data will be returned. - The max interval between startTime and endTime is 30 days.  Weight(UID): 6000
pub async fn sapi_v1_loan_income_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, asset: Option<&str>, r#type: Option<&str>, start_time: Option<i64>, end_time: Option<i64>, limit: Option<i32>, recv_window: Option<i64>) -> Result<Vec<models::SapiV1LoanIncomeGet200ResponseInner>, Error<SapiV1LoanIncomeGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_asset = asset;
    let p_type = r#type;
    let p_start_time = start_time;
    let p_end_time = end_time;
    let p_limit = limit;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/income", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_asset {
        req_builder = req_builder.query(&[("asset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_start_time {
        req_builder = req_builder.query(&[("startTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_end_time {
        req_builder = req_builder.query(&[("endTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanIncomeGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
pub async fn sapi_v1_loan_loanable_data_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, loan_coin: Option<&str>, vip_level: Option<i32>, recv_window: Option<i64>) -> Result<models::SapiV1LoanLoanableDataGet200Response, Error<SapiV1LoanLoanableDataGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_loan_coin = loan_coin;
    let p_vip_level = vip_level;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/loanable/data", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_vip_level {
        req_builder = req_builder.query(&[("vipLevel", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanLoanableDataGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400
pub async fn sapi_v1_loan_ltv_adjustment_history_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, order_id: Option<i64>, loan_coin: Option<&str>, collateral_coin: Option<&str>, start_time: Option<i64>, end_time: Option<i64>, current: Option<i32>, limit: Option<i64>, recv_window: Option<i64>) -> Result<models::SapiV1LoanLtvAdjustmentHistoryGet200Response, Error<SapiV1LoanLtvAdjustmentHistoryGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_order_id = order_id;
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_start_time = start_time;
    let p_end_time = end_time;
    let p_current = current;
    let p_limit = limit;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/ltv/adjustment/history", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_order_id {
        req_builder = req_builder.query(&[("orderId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_start_time {
        req_builder = req_builder.query(&[("startTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_end_time {
        req_builder = req_builder.query(&[("endTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_current {
        req_builder = req_builder.query(&[("current", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanLtvAdjustmentHistoryGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Weight(IP): 300
pub async fn sapi_v1_loan_ongoing_orders_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, order_id: Option<i64>, loan_coin: Option<&str>, collateral_coin: Option<&str>, current: Option<i32>, limit: Option<i64>, recv_window: Option<i64>) -> Result<models::SapiV1LoanOngoingOrdersGet200Response, Error<SapiV1LoanOngoingOrdersGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_order_id = order_id;
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_current = current;
    let p_limit = limit;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/ongoing/orders", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_order_id {
        req_builder = req_builder.query(&[("orderId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_current {
        req_builder = req_builder.query(&[("current", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanOngoingOrdersGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the the rate of collateral coin / loan coin when using collateral repay, the rate will be valid within 8 second.  Weight(IP): 6000
pub async fn sapi_v1_loan_repay_collateral_rate_get(configuration: &configuration::Configuration, loan_coin: &str, collateral_coin: &str, repay_amount: f32, timestamp: i64, signature: &str, recv_window: Option<i64>) -> Result<models::SapiV1LoanRepayCollateralRateGet200Response, Error<SapiV1LoanRepayCollateralRateGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_repay_amount = repay_amount;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/repay/collateral/rate", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("loanCoin", &p_loan_coin.to_string())]);
    req_builder = req_builder.query(&[("collateralCoin", &p_collateral_coin.to_string())]);
    req_builder = req_builder.query(&[("repayAmount", &p_repay_amount.to_string())]);
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanRepayCollateralRateGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400
pub async fn sapi_v1_loan_repay_history_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, order_id: Option<i64>, loan_coin: Option<&str>, collateral_coin: Option<&str>, start_time: Option<i64>, end_time: Option<i64>, current: Option<i32>, limit: Option<i64>, recv_window: Option<i64>) -> Result<models::SapiV1LoanRepayHistoryGet200Response, Error<SapiV1LoanRepayHistoryGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_order_id = order_id;
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_start_time = start_time;
    let p_end_time = end_time;
    let p_current = current;
    let p_limit = limit;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/repay/history", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_order_id {
        req_builder = req_builder.query(&[("orderId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_start_time {
        req_builder = req_builder.query(&[("startTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_end_time {
        req_builder = req_builder.query(&[("endTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_current {
        req_builder = req_builder.query(&[("current", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanRepayHistoryGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Weight(UID): 6000
pub async fn sapi_v1_loan_repay_post(configuration: &configuration::Configuration, order_id: i64, amount: f64, timestamp: i64, signature: &str, r#type: Option<i32>, collateral_return: Option<bool>, recv_window: Option<i64>) -> Result<models::SapiV1LoanRepayPost200Response, Error<SapiV1LoanRepayPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_order_id = order_id;
    let p_amount = amount;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_type = r#type;
    let p_collateral_return = collateral_return;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/loan/repay", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = req_builder.query(&[("orderId", &p_order_id.to_string())]);
    req_builder = req_builder.query(&[("amount", &p_amount.to_string())]);
    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_return {
        req_builder = req_builder.query(&[("collateralReturn", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1LoanRepayPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// - API Key needs Spot & Margin Trading permission for this endpoint  Weight(UID): 6000
pub async fn sapi_v2_loan_flexible_adjust_ltv_post(configuration: &configuration::Configuration, adjustment_amount: f32, direction: &str, timestamp: i64, signature: &str, loan_coin: Option<&str>, collateral_coin: Option<&str>, recv_window: Option<i64>) -> Result<models::SapiV2LoanFlexibleAdjustLtvPost200Response, Error<SapiV2LoanFlexibleAdjustLtvPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_adjustment_amount = adjustment_amount;
    let p_direction = direction;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v2/loan/flexible/adjust/ltv", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("adjustmentAmount", &p_adjustment_amount.to_string())]);
    req_builder = req_builder.query(&[("direction", &p_direction.to_string())]);
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV2LoanFlexibleAdjustLtvPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// - If startTime and endTime are not sent, the recent 90-day data will be returned. - The max interval between startTime and endTime is 180 days.  Weight(IP): 400
pub async fn sapi_v2_loan_flexible_borrow_history_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, loan_coin: Option<&str>, collateral_coin: Option<&str>, start_time: Option<i64>, end_time: Option<i64>, current: Option<i32>, limit: Option<i32>, recv_window: Option<i64>) -> Result<models::SapiV2LoanFlexibleBorrowHistoryGet200Response, Error<SapiV2LoanFlexibleBorrowHistoryGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_start_time = start_time;
    let p_end_time = end_time;
    let p_current = current;
    let p_limit = limit;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v2/loan/flexible/borrow/history", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_start_time {
        req_builder = req_builder.query(&[("startTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_end_time {
        req_builder = req_builder.query(&[("endTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_current {
        req_builder = req_builder.query(&[("current", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV2LoanFlexibleBorrowHistoryGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// - Only available for master account  Weight(UID): 6000
pub async fn sapi_v2_loan_flexible_borrow_post(configuration: &configuration::Configuration, timestamp: i64, signature: &str, loan_coin: Option<&str>, loan_amount: Option<f32>, collateral_coin: Option<&str>, collateral_amount: Option<f32>, recv_window: Option<i64>) -> Result<models::SapiV2LoanFlexibleBorrowPost200Response, Error<SapiV2LoanFlexibleBorrowPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_loan_coin = loan_coin;
    let p_loan_amount = loan_amount;
    let p_collateral_coin = collateral_coin;
    let p_collateral_amount = collateral_amount;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v2/loan/flexible/borrow", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_loan_amount {
        req_builder = req_builder.query(&[("loanAmount", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_amount {
        req_builder = req_builder.query(&[("collateralAmount", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV2LoanFlexibleBorrowPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400
pub async fn sapi_v2_loan_flexible_collateral_data_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, collateral_coin: Option<&str>, recv_window: Option<i64>) -> Result<models::SapiV2LoanFlexibleCollateralDataGet200Response, Error<SapiV2LoanFlexibleCollateralDataGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_collateral_coin = collateral_coin;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v2/loan/flexible/collateral/data", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV2LoanFlexibleCollateralDataGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
pub async fn sapi_v2_loan_flexible_loanable_data_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, loan_coin: Option<&str>, recv_window: Option<i64>) -> Result<models::SapiV2LoanFlexibleLoanableDataGet200Response, Error<SapiV2LoanFlexibleLoanableDataGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_loan_coin = loan_coin;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v2/loan/flexible/loanable/data", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV2LoanFlexibleLoanableDataGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// - If startTime and endTime are not sent, the recent 90-day data will be returned. - The max interval between startTime and endTime is 180 days.  Weight(IP): 400
pub async fn sapi_v2_loan_flexible_ltv_adjustment_history_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, loan_coin: Option<&str>, collateral_coin: Option<&str>, start_time: Option<i64>, end_time: Option<i64>, current: Option<i32>, limit: Option<i32>, recv_window: Option<i64>) -> Result<models::SapiV2LoanFlexibleLtvAdjustmentHistoryGet200Response, Error<SapiV2LoanFlexibleLtvAdjustmentHistoryGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_start_time = start_time;
    let p_end_time = end_time;
    let p_current = current;
    let p_limit = limit;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v2/loan/flexible/ltv/adjustment/history", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_start_time {
        req_builder = req_builder.query(&[("startTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_end_time {
        req_builder = req_builder.query(&[("endTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_current {
        req_builder = req_builder.query(&[("current", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV2LoanFlexibleLtvAdjustmentHistoryGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

///  Weight(IP): 300
pub async fn sapi_v2_loan_flexible_ongoing_orders_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, loan_coin: Option<&str>, collateral_coin: Option<&str>, current: Option<i32>, limit: Option<i32>, recv_window: Option<i64>) -> Result<models::SapiV2LoanFlexibleOngoingOrdersGet200Response, Error<SapiV2LoanFlexibleOngoingOrdersGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_current = current;
    let p_limit = limit;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v2/loan/flexible/ongoing/orders", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_current {
        req_builder = req_builder.query(&[("current", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV2LoanFlexibleOngoingOrdersGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// - If startTime and endTime are not sent, the recent 90-day data will be returned. - The max interval between startTime and endTime is 180 days.  Weight(IP): 400
pub async fn sapi_v2_loan_flexible_repay_history_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, loan_coin: Option<&str>, collateral_coin: Option<&str>, start_time: Option<i64>, end_time: Option<i64>, current: Option<i32>, limit: Option<i32>, recv_window: Option<i64>) -> Result<models::SapiV2LoanFlexibleRepayHistoryGet200Response, Error<SapiV2LoanFlexibleRepayHistoryGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_start_time = start_time;
    let p_end_time = end_time;
    let p_current = current;
    let p_limit = limit;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v2/loan/flexible/repay/history", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_start_time {
        req_builder = req_builder.query(&[("startTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_end_time {
        req_builder = req_builder.query(&[("endTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_current {
        req_builder = req_builder.query(&[("current", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV2LoanFlexibleRepayHistoryGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// - repayAmount is mandatory even fullRepayment = FALSE  Weight(IP): 6000
pub async fn sapi_v2_loan_flexible_repay_post(configuration: &configuration::Configuration, repay_amount: f32, timestamp: i64, signature: &str, loan_coin: Option<&str>, collateral_coin: Option<&str>, collateral_return: Option<bool>, full_repayment: Option<bool>, recv_window: Option<i64>) -> Result<models::SapiV2LoanFlexibleRepayPost200Response, Error<SapiV2LoanFlexibleRepayPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_repay_amount = repay_amount;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_loan_coin = loan_coin;
    let p_collateral_coin = collateral_coin;
    let p_collateral_return = collateral_return;
    let p_full_repayment = full_repayment;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v2/loan/flexible/repay", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_loan_coin {
        req_builder = req_builder.query(&[("loanCoin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_collateral_coin {
        req_builder = req_builder.query(&[("collateralCoin", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("repayAmount", &p_repay_amount.to_string())]);
    if let Some(ref param_value) = p_collateral_return {
        req_builder = req_builder.query(&[("collateralReturn", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_full_repayment {
        req_builder = req_builder.query(&[("fullRepayment", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV2LoanFlexibleRepayPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

