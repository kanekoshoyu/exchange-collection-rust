/*
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`sapi_v1_convert_accept_quote_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1ConvertAcceptQuotePostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_convert_asset_info_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1ConvertAssetInfoGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_convert_exchange_info_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1ConvertExchangeInfoGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_convert_get_quote_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1ConvertGetQuotePostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_convert_limit_cancel_order_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1ConvertLimitCancelOrderPostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_convert_limit_place_order_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1ConvertLimitPlaceOrderPostError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_convert_limit_query_open_orders_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1ConvertLimitQueryOpenOrdersGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_convert_order_status_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1ConvertOrderStatusGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sapi_v1_convert_trade_flow_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1ConvertTradeFlowGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}


/// Accept the offered quote by quote ID.  Weight(UID): 500
pub async fn sapi_v1_convert_accept_quote_post(configuration: &configuration::Configuration, quote_id: &str, timestamp: i64, signature: &str, recv_window: Option<i64>) -> Result<models::SapiV1ConvertAcceptQuotePost200Response, Error<SapiV1ConvertAcceptQuotePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_quote_id = quote_id;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/convert/acceptQuote", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = req_builder.query(&[("quoteId", &p_quote_id.to_string())]);
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1ConvertAcceptQuotePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Query for supported asset precision information  Weight(IP): 100
pub async fn sapi_v1_convert_asset_info_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, recv_window: Option<i64>) -> Result<Vec<models::SapiV1ConvertAssetInfoGet200ResponseInner>, Error<SapiV1ConvertAssetInfoGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/convert/assetInfo", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1ConvertAssetInfoGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Query for all convertible token pairs and the tokensâ€™ respective upper/lower limits  Weight(IP): 3000
pub async fn sapi_v1_convert_exchange_info_get(configuration: &configuration::Configuration, from_asset: Option<&str>, to_asset: Option<&str>) -> Result<Vec<models::SapiV1ConvertExchangeInfoGet200ResponseInner>, Error<SapiV1ConvertExchangeInfoGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_from_asset = from_asset;
    let p_to_asset = to_asset;

    let uri_str = format!("{}/sapi/v1/convert/exchangeInfo", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_from_asset {
        req_builder = req_builder.query(&[("fromAsset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_to_asset {
        req_builder = req_builder.query(&[("toAsset", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1ConvertExchangeInfoGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Request a quote for the requested token pairs  Weight(UID): 200
pub async fn sapi_v1_convert_get_quote_post(configuration: &configuration::Configuration, from_asset: &str, to_asset: &str, timestamp: i64, signature: &str, from_amount: Option<f32>, to_amount: Option<f32>, valid_time: Option<&str>, wallet_type: Option<&str>, recv_window: Option<i64>) -> Result<models::SapiV1ConvertGetQuotePost200Response, Error<SapiV1ConvertGetQuotePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_from_asset = from_asset;
    let p_to_asset = to_asset;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_from_amount = from_amount;
    let p_to_amount = to_amount;
    let p_valid_time = valid_time;
    let p_wallet_type = wallet_type;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/convert/getQuote", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = req_builder.query(&[("fromAsset", &p_from_asset.to_string())]);
    req_builder = req_builder.query(&[("toAsset", &p_to_asset.to_string())]);
    if let Some(ref param_value) = p_from_amount {
        req_builder = req_builder.query(&[("fromAmount", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_to_amount {
        req_builder = req_builder.query(&[("toAmount", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_valid_time {
        req_builder = req_builder.query(&[("validTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_wallet_type {
        req_builder = req_builder.query(&[("walletType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1ConvertGetQuotePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Enable users to cancel a limit order  Weight(UID): 200
pub async fn sapi_v1_convert_limit_cancel_order_post(configuration: &configuration::Configuration, order_id: i64, timestamp: i64, signature: &str, recv_window: Option<i64>) -> Result<models::SapiV1ConvertLimitCancelOrderPost200Response, Error<SapiV1ConvertLimitCancelOrderPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_order_id = order_id;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/convert/limit/cancelOrder", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = req_builder.query(&[("orderId", &p_order_id.to_string())]);
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1ConvertLimitCancelOrderPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Enable users to place a limit order  - baseAsset or quoteAsset can be determined via exchangeInfo endpoint. - Limit price is defined from baseAsset to quoteAsset. - Either baseAmount or quoteAmount is used.  Weight(UID): 500
pub async fn sapi_v1_convert_limit_place_order_post(configuration: &configuration::Configuration, base_asset: &str, quote_asset: &str, limit_price: f64, side: &str, timestamp: i64, signature: &str, base_amount: Option<f64>, quote_amount: Option<f64>, wallet_type: Option<&str>, expired_type: Option<&str>, recv_window: Option<i64>) -> Result<models::SapiV1ConvertLimitPlaceOrderPost200Response, Error<SapiV1ConvertLimitPlaceOrderPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_base_asset = base_asset;
    let p_quote_asset = quote_asset;
    let p_limit_price = limit_price;
    let p_side = side;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_base_amount = base_amount;
    let p_quote_amount = quote_amount;
    let p_wallet_type = wallet_type;
    let p_expired_type = expired_type;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/convert/limit/placeOrder", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = req_builder.query(&[("baseAsset", &p_base_asset.to_string())]);
    req_builder = req_builder.query(&[("quoteAsset", &p_quote_asset.to_string())]);
    req_builder = req_builder.query(&[("limitPrice", &p_limit_price.to_string())]);
    if let Some(ref param_value) = p_base_amount {
        req_builder = req_builder.query(&[("baseAmount", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_quote_amount {
        req_builder = req_builder.query(&[("quoteAmount", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("side", &p_side.to_string())]);
    if let Some(ref param_value) = p_wallet_type {
        req_builder = req_builder.query(&[("walletType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_expired_type {
        req_builder = req_builder.query(&[("expiredType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1ConvertLimitPlaceOrderPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Enable users to query for all existing limit orders  Weight(UID): 3000
pub async fn sapi_v1_convert_limit_query_open_orders_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, recv_window: Option<i64>) -> Result<models::SapiV1ConvertLimitQueryOpenOrdersGet200Response, Error<SapiV1ConvertLimitQueryOpenOrdersGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/convert/limit/queryOpenOrders", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1ConvertLimitQueryOpenOrdersGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Query order status by order ID.  Weight(UID): 100
pub async fn sapi_v1_convert_order_status_get(configuration: &configuration::Configuration, timestamp: i64, signature: &str, order_id: Option<&str>, quote_id: Option<&str>, recv_window: Option<i64>) -> Result<models::SapiV1ConvertOrderStatusGet200Response, Error<SapiV1ConvertOrderStatusGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_order_id = order_id;
    let p_quote_id = quote_id;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/convert/orderStatus", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_order_id {
        req_builder = req_builder.query(&[("orderId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_quote_id {
        req_builder = req_builder.query(&[("quoteId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1ConvertOrderStatusGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// - The max interval between startTime and endTime is 30 days.  Weight(UID): 3000
pub async fn sapi_v1_convert_trade_flow_get(configuration: &configuration::Configuration, start_time: i64, end_time: i64, timestamp: i64, signature: &str, limit: Option<i32>, recv_window: Option<i64>) -> Result<models::SapiV1ConvertTradeFlowGet200Response, Error<SapiV1ConvertTradeFlowGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_start_time = start_time;
    let p_end_time = end_time;
    let p_timestamp = timestamp;
    let p_signature = signature;
    let p_limit = limit;
    let p_recv_window = recv_window;

    let uri_str = format!("{}/sapi/v1/convert/tradeFlow", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("startTime", &p_start_time.to_string())]);
    req_builder = req_builder.query(&[("endTime", &p_end_time.to_string())]);
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recv_window {
        req_builder = req_builder.query(&[("recvWindow", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp", &p_timestamp.to_string())]);
    req_builder = req_builder.query(&[("signature", &p_signature.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-MBX-APIKEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<SapiV1ConvertTradeFlowGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

