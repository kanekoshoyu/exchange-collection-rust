/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchStatusObject {
    /// The unique client order identifier. This field is returned only if the order has a client order ID.
    #[serde(rename = "cliOrdId", skip_serializing_if = "Option::is_none")]
    pub cli_ord_id: Option<String>,
    /// The date and time the order was received.
    #[serde(rename = "dateTimeReceived", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_time_received: Option<Option<String>>,
    #[serde(rename = "orderEvents", skip_serializing_if = "Option::is_none")]
    pub order_events: Option<Vec<models::BatchStatusObjectOrderEventsInner>>,
    /// The unique identifier of the order.
    #[serde(rename = "order_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<Option<String>>,
    /// The arbitrary string provided client-side when the order was sent for mapping order sending instructions to the API's response.
    #[serde(rename = "order_tag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub order_tag: Option<Option<String>>,
    /// The status of the order.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl BatchStatusObject {
    pub fn new() -> BatchStatusObject {
        BatchStatusObject {
            cli_ord_id: None,
            date_time_received: None,
            order_events: None,
            order_id: None,
            order_tag: None,
            status: None,
        }
    }
}
/// The status of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "placed")]
    Placed,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "invalidOrderType")]
    InvalidOrderType,
    #[serde(rename = "invalidSide")]
    InvalidSide,
    #[serde(rename = "invalidSize")]
    InvalidSize,
    #[serde(rename = "invalidPrice")]
    InvalidPrice,
    #[serde(rename = "insufficientAvailableFunds")]
    InsufficientAvailableFunds,
    #[serde(rename = "selfFill")]
    SelfFill,
    #[serde(rename = "tooManySmallOrders")]
    TooManySmallOrders,
    #[serde(rename = "marketSuspended")]
    MarketSuspended,
    #[serde(rename = "marketInactive")]
    MarketInactive,
    #[serde(rename = "clientOrderIdAlreadyExist")]
    ClientOrderIdAlreadyExist,
    #[serde(rename = "clientOrderIdTooLong")]
    ClientOrderIdTooLong,
    #[serde(rename = "outsidePriceCollar")]
    OutsidePriceCollar,
    #[serde(rename = "postWouldExecute")]
    PostWouldExecute,
    #[serde(rename = "iocWouldNotExecute")]
    IocWouldNotExecute,
}

impl Default for Status {
    fn default() -> Status {
        Self::Placed
    }
}

