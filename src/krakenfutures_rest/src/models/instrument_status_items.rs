/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstrumentStatusItems {
    /// Indicates if the market is tradeable.
    #[serde(rename = "tradeable", skip_serializing_if = "Option::is_none")]
    pub tradeable: Option<String>,
    /// Indicates if the market is experiencing price dislocation.
    #[serde(rename = "isExperiencingDislocation", skip_serializing_if = "Option::is_none")]
    pub is_experiencing_dislocation: Option<bool>,
    /// The direction of the price dislocation.
    #[serde(rename = "priceDislocationDirection", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub price_dislocation_direction: Option<Option<PriceDislocationDirection>>,
    /// Indicates if the market is experiencing extreme volatility.
    #[serde(rename = "isExperiencingExtremeVolatility", skip_serializing_if = "Option::is_none")]
    pub is_experiencing_extreme_volatility: Option<bool>,
    /// Multiplier applied to initial margin due to extreme volatility.
    #[serde(rename = "extremeVolatilityInitialMarginMultiplier", skip_serializing_if = "Option::is_none")]
    pub extreme_volatility_initial_margin_multiplier: Option<i32>,
}

impl InstrumentStatusItems {
    pub fn new() -> InstrumentStatusItems {
        InstrumentStatusItems {
            tradeable: None,
            is_experiencing_dislocation: None,
            price_dislocation_direction: None,
            is_experiencing_extreme_volatility: None,
            extreme_volatility_initial_margin_multiplier: None,
        }
    }
}
/// The direction of the price dislocation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PriceDislocationDirection {
    #[serde(rename = "ABOVE_UPPER_BOUND")]
    AboveUpperBound,
    #[serde(rename = "BELOW_LOWER_BOUND")]
    BelowLowerBound,
}

impl Default for PriceDislocationDirection {
    fn default() -> PriceDislocationDirection {
        Self::AboveUpperBound
    }
}

