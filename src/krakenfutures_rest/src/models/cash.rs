/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Cash {
    /// The type of the account (always cashAccount).
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// A structure containing account balances.
    #[serde(rename = "balances", skip_serializing_if = "Option::is_none")]
    pub balances: Option<std::collections::HashMap<String, f64>>,
}

impl Cash {
    pub fn new() -> Cash {
        Cash {
            r#type: None,
            balances: None,
        }
    }
}
/// The type of the account (always cashAccount).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "cashAccount")]
    CashAccount,
}

impl Default for Type {
    fn default() -> Type {
        Self::CashAccount
    }
}

