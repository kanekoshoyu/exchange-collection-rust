/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExecutionResponse {
    /// The unique identifier of the account.
    #[serde(rename = "accountUid")]
    pub account_uid: uuid::Uuid,
    /// The number of elements to return in the response.
    #[serde(rename = "len")]
    pub len: i32,
    /// The server time in Coordinated Universal Time (UTC).
    #[serde(rename = "serverTime", skip_serializing_if = "Option::is_none")]
    pub server_time: Option<String>,
    /// The list of event elements.
    #[serde(rename = "elements")]
    pub elements: Vec<models::ExecutionResponseElementsInner>,
    /// Opaque token to pass to the next request to continue listing events. The `sort` parameter must be the same as in the previous request to continue listing in the same direction.
    #[serde(rename = "continuationToken", skip_serializing_if = "Option::is_none")]
    pub continuation_token: Option<String>,
}

impl ExecutionResponse {
    pub fn new(account_uid: uuid::Uuid, len: i32, elements: Vec<models::ExecutionResponseElementsInner>) -> ExecutionResponse {
        ExecutionResponse {
            account_uid,
            len,
            server_time: None,
            elements,
            continuation_token: None,
        }
    }
}

