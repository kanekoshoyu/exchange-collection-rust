/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderMarginResponse {
    /// Server time in Coordinated Universal Time (UTC)
    #[serde(rename = "serverTime", skip_serializing_if = "Option::is_none")]
    pub server_time: Option<String>,
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<Result>,
    /// The initial margin requirement or null if there is no market
    #[serde(rename = "initialMargin", skip_serializing_if = "Option::is_none")]
    pub initial_margin: Option<f64>,
    /// The limit price of the order or null if the order type was mkt and there is no market
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    /// Possible error values related to the order.
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<Error>,
}

impl OrderMarginResponse {
    pub fn new() -> OrderMarginResponse {
        OrderMarginResponse {
            server_time: None,
            result: None,
            initial_margin: None,
            price: None,
            error: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Result {
    #[serde(rename = "success")]
    Success,
}

impl Default for Result {
    fn default() -> Result {
        Self::Success
    }
}
/// Possible error values related to the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Error {
    #[serde(rename = "MARKET_SUSPENDED")]
    MarketSuspended,
    #[serde(rename = "MARKET_NOT_FOUND")]
    MarketNotFound,
    #[serde(rename = "INVALID_PRICE")]
    InvalidPrice,
    #[serde(rename = "INVALID_QUANTITY")]
    InvalidQuantity,
    #[serde(rename = "SMALL_ORDER_LIMIT_EXCEEDED")]
    SmallOrderLimitExceeded,
    #[serde(rename = "INSUFFICIENT_MARGIN")]
    InsufficientMargin,
    #[serde(rename = "WOULD_CAUSE_LIQUIDATION")]
    WouldCauseLiquidation,
    #[serde(rename = "CLIENT_ORDER_ID_IN_USE")]
    ClientOrderIdInUse,
    #[serde(rename = "CLIENT_ORDER_ID_TOO_LONG")]
    ClientOrderIdTooLong,
    #[serde(rename = "MAX_POSITION_EXCEEDED")]
    MaxPositionExceeded,
    #[serde(rename = "PRICE_COLLAR")]
    PriceCollar,
    #[serde(rename = "PRICE_DISLOCATION")]
    PriceDislocation,
    #[serde(rename = "EDIT_HAS_NO_EFFECT")]
    EditHasNoEffect,
    #[serde(rename = "ORDER_FOR_CANCELLATION_NOT_FOUND")]
    OrderForCancellationNotFound,
    #[serde(rename = "ORDER_FOR_EDIT_NOT_FOUND")]
    OrderForEditNotFound,
    #[serde(rename = "ORDER_CANNOT_HAVE_TRIGGER_PRICE")]
    OrderCannotHaveTriggerPrice,
    #[serde(rename = "POST_WOULD_EXECUTE")]
    PostWouldExecute,
    #[serde(rename = "IOC_WOULD_NOT_EXECUTE")]
    IocWouldNotExecute,
    #[serde(rename = "WOULD_EXECUTE_SELF")]
    WouldExecuteSelf,
    #[serde(rename = "WOULD_NOT_REDUCE_POSITION")]
    WouldNotReducePosition,
    #[serde(rename = "REJECTED_AFTER_EXECUTION")]
    RejectedAfterExecution,
    #[serde(rename = "MARKET_IS_POST_ONLY")]
    MarketIsPostOnly,
    #[serde(rename = "ORDER_LIMIT_EXCEEDED")]
    OrderLimitExceeded,
    #[serde(rename = "FIXED_LEVERAGE_TOO_HIGH")]
    FixedLeverageTooHigh,
    #[serde(rename = "CANNOT_EDIT_TRIGGER_PRICE_OF_TRAILING_STOP")]
    CannotEditTriggerPriceOfTrailingStop,
    #[serde(rename = "CANNOT_EDIT_LIMIT_PRICE_OF_TRAILING_STOP")]
    CannotEditLimitPriceOfTrailingStop,
    #[serde(rename = "TRAILING_STOP_ORDER_LIMIT_EXCEEDED")]
    TrailingStopOrderLimitExceeded,
    #[serde(rename = "TRAILING_STOP_PERCENT_DEVIATION_EXCEEDS_MAX_DECIMAL_PLACES")]
    TrailingStopPercentDeviationExceedsMaxDecimalPlaces,
    #[serde(rename = "TRAILING_STOP_QUOTE_DEVIATION_NOT_MULTIPLE_OF_TICK_SIZE")]
    TrailingStopQuoteDeviationNotMultipleOfTickSize,
    #[serde(rename = "TRAILING_STOP_MAX_DEVIATION_TOO_LARGE")]
    TrailingStopMaxDeviationTooLarge,
    #[serde(rename = "TRAILING_STOP_MAX_DEVIATION_TOO_SMALL")]
    TrailingStopMaxDeviationTooSmall,
    #[serde(rename = "INSUFFICIENT_HEADROOM_AROUND_CURRENT_PRICE_TO_EDIT_TRAILING_STOP")]
    InsufficientHeadroomAroundCurrentPriceToEditTrailingStop,
    #[serde(rename = "NO_REFERENCE_PRICE_AVAILABLE_FOR_CALCULATING_TRAILING_STOP_TRIGGER_PRICE")]
    NoReferencePriceAvailableForCalculatingTrailingStopTriggerPrice,
    #[serde(rename = "INSUFFICIENT_CLOSING_MARGIN")]
    InsufficientClosingMargin,
    #[serde(rename = "LIMIT_PRICE_SET_AS_ABSOLUTE_AND_RELATIVE")]
    LimitPriceSetAsAbsoluteAndRelative,
    #[serde(rename = "LIMIT_PRICE_OFFSET_VALUE_INVALID")]
    LimitPriceOffsetValueInvalid,
    #[serde(rename = "LIMIT_PRICE_OFFSET_UNIT_INVALID")]
    LimitPriceOffsetUnitInvalid,
    #[serde(rename = "LIMIT_PRICE_OFFSET_MUST_HAVE_VALUE_AND_UNIT")]
    LimitPriceOffsetMustHaveValueAndUnit,
    #[serde(rename = "LIMIT_PRICE_OFFSET_QUOTE_CURRENCY_VALUE_MUST_BE_MULTIPLE_OF_TICK_SIZE")]
    LimitPriceOffsetQuoteCurrencyValueMustBeMultipleOfTickSize,
    #[serde(rename = "LIMIT_PRICE_OFFSET_PERCENT_VALUE_TOO_MANY_DECIMAL_PLACES")]
    LimitPriceOffsetPercentValueTooManyDecimalPlaces,
    #[serde(rename = "LIMIT_PRICE_OFFSET_TOO_HIGH")]
    LimitPriceOffsetTooHigh,
    #[serde(rename = "LIMIT_PRICE_OFFSET_TOO_LOW")]
    LimitPriceOffsetTooLow,
}

impl Default for Error {
    fn default() -> Error {
        Self::MarketSuspended
    }
}

