/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HistoryItems {
    /// For futures: The price of a fill. For indices: The calculated value.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    /// The classification of the taker side in the matched trade: 'buy' if the taker is a buyer, 'sell' if the taker is a seller.
    #[serde(rename = "side", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub side: Option<Option<String>>,
    /// For futures: The size of a fill. For indices: Not returned because N/A.
    #[serde(rename = "size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub size: Option<Option<String>>,
    /// The date and time of a trade or index computation.
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    /// For futures: A continuous index starting at 1 for the first fill in a Futures contract maturity. For indices: Not returned because N/A.
    #[serde(rename = "trade_id", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<i32>,
    /// The classification of the matched trade in an orderbook.
    #[serde(rename = "type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Option<Type>>,
    #[serde(rename = "uid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub uid: Option<Option<String>>,
    #[serde(rename = "instrument_identification_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub instrument_identification_type: Option<Option<String>>,
    #[serde(rename = "isin", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub isin: Option<Option<String>>,
    #[serde(rename = "execution_venue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub execution_venue: Option<Option<String>>,
    #[serde(rename = "price_notation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub price_notation: Option<Option<String>>,
    #[serde(rename = "price_currency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub price_currency: Option<Option<String>>,
    #[serde(rename = "notional_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub notional_amount: Option<Option<f64>>,
    #[serde(rename = "notional_currency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub notional_currency: Option<Option<String>>,
    #[serde(rename = "publication_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub publication_time: Option<Option<String>>,
    #[serde(rename = "publication_venue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub publication_venue: Option<Option<String>>,
    #[serde(rename = "transaction_identification_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub transaction_identification_code: Option<Option<String>>,
    #[serde(rename = "to_be_cleared", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub to_be_cleared: Option<Option<bool>>,
}

impl HistoryItems {
    pub fn new() -> HistoryItems {
        HistoryItems {
            price: None,
            side: None,
            size: None,
            time: None,
            trade_id: None,
            r#type: None,
            uid: None,
            instrument_identification_type: None,
            isin: None,
            execution_venue: None,
            price_notation: None,
            price_currency: None,
            notional_amount: None,
            notional_currency: None,
            publication_time: None,
            publication_venue: None,
            transaction_identification_code: None,
            to_be_cleared: None,
        }
    }
}
/// The classification of the matched trade in an orderbook.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "fill")]
    Fill,
    #[serde(rename = "liquidation")]
    Liquidation,
    #[serde(rename = "assignment")]
    Assignment,
    #[serde(rename = "termination")]
    Termination,
    #[serde(rename = "block")]
    Block,
}

impl Default for Type {
    fn default() -> Type {
        Self::Fill
    }
}

