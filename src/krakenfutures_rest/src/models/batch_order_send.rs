/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchOrderSend {
    /// Always send.
    #[serde(rename = "order")]
    pub order: Order,
    /// An arbitrary string provided client-side to tag the order for mapping order sending instructions to the API's response.
    #[serde(rename = "order_tag")]
    pub order_tag: String,
    /// Type of the order.
    #[serde(rename = "orderType")]
    pub order_type: OrderType,
    /// The symbol of the Futures.
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// The direction of the order.
    #[serde(rename = "side")]
    pub side: Side,
    /// The size associated with the order.
    #[serde(rename = "size")]
    pub size: f64,
    /// The limit price associated with the order. Leave undefined if placing a trailing_stop order.
    #[serde(rename = "limitPrice", skip_serializing_if = "Option::is_none")]
    pub limit_price: Option<f64>,
    /// The stop price associated with a stop order. Required if orderType is stp.
    #[serde(rename = "stopPrice", skip_serializing_if = "Option::is_none")]
    pub stop_price: Option<f64>,
    /// The globally unique order identity specified by the user.
    #[serde(rename = "cliOrdId", skip_serializing_if = "Option::is_none")]
    pub cli_ord_id: Option<String>,
    #[serde(rename = "triggerSignal", skip_serializing_if = "Option::is_none")]
    pub trigger_signal: Option<TriggerSignal>,
    /// Set to true if the order should only reduce an existing position.
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<bool>,
    /// Required if the order type is trailing_stop. The maximum distance the trailing stop's trigger price may trail behind the trigger signal.
    #[serde(rename = "trailingStopMaxDeviation", skip_serializing_if = "Option::is_none")]
    pub trailing_stop_max_deviation: Option<f64>,
    /// Defines how the trailing trigger price is calculated from the requested trigger signal.
    #[serde(rename = "trailingStopDeviationUnit", skip_serializing_if = "Option::is_none")]
    pub trailing_stop_deviation_unit: Option<TrailingStopDeviationUnit>,
}

impl BatchOrderSend {
    pub fn new(order: Order, order_tag: String, order_type: OrderType, symbol: String, side: Side, size: f64) -> BatchOrderSend {
        BatchOrderSend {
            order,
            order_tag,
            order_type,
            symbol,
            side,
            size,
            limit_price: None,
            stop_price: None,
            cli_ord_id: None,
            trigger_signal: None,
            reduce_only: None,
            trailing_stop_max_deviation: None,
            trailing_stop_deviation_unit: None,
        }
    }
}
/// Always send.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Order {
    #[serde(rename = "send")]
    Send,
}

impl Default for Order {
    fn default() -> Order {
        Self::Send
    }
}
/// Type of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "lmt")]
    Lmt,
    #[serde(rename = "ioc")]
    Ioc,
    #[serde(rename = "post")]
    Post,
    #[serde(rename = "stp")]
    Stp,
    #[serde(rename = "take_profit")]
    TakeProfit,
    #[serde(rename = "trailing_stop")]
    TrailingStop,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Lmt
    }
}
/// The direction of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerSignal {
    #[serde(rename = "mark")]
    Mark,
    #[serde(rename = "spot")]
    Spot,
    #[serde(rename = "last")]
    Last,
}

impl Default for TriggerSignal {
    fn default() -> TriggerSignal {
        Self::Mark
    }
}
/// Defines how the trailing trigger price is calculated from the requested trigger signal.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrailingStopDeviationUnit {
    #[serde(rename = "PERCENT")]
    Percent,
    #[serde(rename = "QUOTE_CURRENCY")]
    QuoteCurrency,
}

impl Default for TrailingStopDeviationUnit {
    fn default() -> TrailingStopDeviationUnit {
        Self::Percent
    }
}

