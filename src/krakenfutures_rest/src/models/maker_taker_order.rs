/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MakerTakerOrder {
    /// The unique identifier for the trade.
    #[serde(rename = "uid")]
    pub uid: uuid::Uuid,
    /// The unique identifier for the account associated with the trade.
    #[serde(rename = "accountUid")]
    pub account_uid: uuid::Uuid,
    /// The tradeable asset.
    #[serde(rename = "tradeable")]
    pub tradeable: String,
    /// The trade direction.
    #[serde(rename = "direction")]
    pub direction: Direction,
    /// The quantity of the tradeable asset.
    #[serde(rename = "quantity")]
    pub quantity: String,
    /// The filled quantity of the trade.
    #[serde(rename = "filled")]
    pub filled: String,
    /// The time of the trade in milliseconds since epoch.
    #[serde(rename = "timestamp")]
    pub timestamp: i64,
    /// The limit price of the trade.
    #[serde(rename = "limitPrice")]
    pub limit_price: String,
    /// The type of order.
    #[serde(rename = "orderType")]
    pub order_type: OrderType,
    /// The client ID associated with the order.
    #[serde(rename = "clientId")]
    pub client_id: String,
    /// Whether the trade is a reduce-only order.
    #[serde(rename = "reduceOnly")]
    pub reduce_only: bool,
    /// The last update timestamp for the order in milliseconds.
    #[serde(rename = "lastUpdateTimestamp")]
    pub last_update_timestamp: i64,
    /// Spot data associated with the trade, if applicable.
    #[serde(rename = "spotData", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub spot_data: Option<Option<String>>,
}

impl MakerTakerOrder {
    pub fn new(uid: uuid::Uuid, account_uid: uuid::Uuid, tradeable: String, direction: Direction, quantity: String, filled: String, timestamp: i64, limit_price: String, order_type: OrderType, client_id: String, reduce_only: bool, last_update_timestamp: i64) -> MakerTakerOrder {
        MakerTakerOrder {
            uid,
            account_uid,
            tradeable,
            direction,
            quantity,
            filled,
            timestamp,
            limit_price,
            order_type,
            client_id,
            reduce_only,
            last_update_timestamp,
            spot_data: None,
        }
    }
}
/// The trade direction.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "Buy")]
    Buy,
    #[serde(rename = "Sell")]
    Sell,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Buy
    }
}
/// The type of order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "Limit")]
    Limit,
    #[serde(rename = "IoC")]
    IoC,
    #[serde(rename = "Post")]
    Post,
    #[serde(rename = "Market")]
    Market,
    #[serde(rename = "Liquidation")]
    Liquidation,
    #[serde(rename = "Assignment")]
    Assignment,
    #[serde(rename = "Unwind")]
    Unwind,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Limit
    }
}

