/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlexCurrencySummary {
    /// The type of the account (always multiCollateralMarginAccount).
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// Structure with collateral currency details.
    #[serde(rename = "currencies", skip_serializing_if = "Option::is_none")]
    pub currencies: Option<std::collections::HashMap<String, models::Currencies>>,
    /// Margin available for trading.
    #[serde(rename = "availableMargin", skip_serializing_if = "Option::is_none")]
    pub available_margin: Option<f64>,
    /// Total initial margin held for open positions (USD).
    #[serde(rename = "initialMargin", skip_serializing_if = "Option::is_none")]
    pub initial_margin: Option<f64>,
    /// Total initial margin held for open positions and open orders (USD).
    #[serde(rename = "initialMarginWithOrders", skip_serializing_if = "Option::is_none")]
    pub initial_margin_with_orders: Option<f64>,
    /// Total maintenance margin held for open positions (USD).
    #[serde(rename = "maintenanceMargin", skip_serializing_if = "Option::is_none")]
    pub maintenance_margin: Option<f64>,
    /// USD value of all collateral in multi-collateral wallet.
    #[serde(rename = "balanceValue", skip_serializing_if = "Option::is_none")]
    pub balance_value: Option<f64>,
    /// Balance value plus unrealised PnL in USD.
    #[serde(rename = "portfolioValue", skip_serializing_if = "Option::is_none")]
    pub portfolio_value: Option<f64>,
    /// USD value of balances in account usable for margin.
    #[serde(rename = "collateralValue", skip_serializing_if = "Option::is_none")]
    pub collateral_value: Option<f64>,
    /// Unrealised PnL in USD.
    #[serde(rename = "pnl", skip_serializing_if = "Option::is_none")]
    pub pnl: Option<f64>,
    /// Unrealised funding from funding rate (USD).
    #[serde(rename = "unrealizedFunding", skip_serializing_if = "Option::is_none")]
    pub unrealized_funding: Option<f64>,
    /// Total USD value of unrealised funding and unrealised PnL.
    #[serde(rename = "totalUnrealized", skip_serializing_if = "Option::is_none")]
    pub total_unrealized: Option<f64>,
    /// Unrealised pnl and unrealised funding that is usable as margin.
    #[serde(rename = "totalUnrealizedAsMargin", skip_serializing_if = "Option::is_none")]
    pub total_unrealized_as_margin: Option<f64>,
    /// Balance Value in USD adjusted for haircut and unrealised profit/loss.
    #[serde(rename = "marginEquity", skip_serializing_if = "Option::is_none")]
    pub margin_equity: Option<f64>,
}

impl FlexCurrencySummary {
    pub fn new() -> FlexCurrencySummary {
        FlexCurrencySummary {
            r#type: None,
            currencies: None,
            available_margin: None,
            initial_margin: None,
            initial_margin_with_orders: None,
            maintenance_margin: None,
            balance_value: None,
            portfolio_value: None,
            collateral_value: None,
            pnl: None,
            unrealized_funding: None,
            total_unrealized: None,
            total_unrealized_as_margin: None,
            margin_equity: None,
        }
    }
}
/// The type of the account (always multiCollateralMarginAccount).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "multiCollateralMarginAccount")]
    MultiCollateralMarginAccount,
}

impl Default for Type {
    fn default() -> Type {
        Self::MultiCollateralMarginAccount
    }
}

