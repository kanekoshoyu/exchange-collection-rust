/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Logs {
    /// The asset related to the entry.
    #[serde(rename = "asset")]
    pub asset: String,
    /// UID of the log entry.
    #[serde(rename = "booking_uid")]
    pub booking_uid: uuid::Uuid,
    /// Currency of the associated entry.
    #[serde(rename = "collateral", deserialize_with = "Option::deserialize")]
    pub collateral: Option<String>,
    /// The contract related to the entry, if applicable.
    #[serde(rename = "contract", deserialize_with = "Option::deserialize")]
    pub contract: Option<String>,
    /// The RFC 3339 formatted date-time.
    #[serde(rename = "date")]
    pub date: String,
    /// UID of the associated execution.
    #[serde(rename = "execution")]
    pub execution: uuid::Uuid,
    /// Fee paid.
    #[serde(rename = "fee")]
    pub fee: f64,
    /// Absolute funding rate at the time of entry.
    #[serde(rename = "funding_rate")]
    pub funding_rate: f64,
    /// Log entry ID.
    #[serde(rename = "id")]
    pub id: i64,
    /// Short description of the entry.
    #[serde(rename = "info")]
    pub info: Info,
    /// Name of the wallet associated with the entry.
    #[serde(rename = "margin_account")]
    pub margin_account: String,
    /// Mark price at the time the trade was executed.
    #[serde(rename = "mark_price")]
    pub mark_price: f64,
    /// Average entry price of the position after this trade.
    #[serde(rename = "new_average_entry_price")]
    pub new_average_entry_price: f64,
    /// New balance of the wallet or position size after the action.
    #[serde(rename = "new_balance")]
    pub new_balance: f64,
    /// Average entry price of the position before this trade.
    #[serde(rename = "old_average_entry_price")]
    pub old_average_entry_price: f64,
    /// Account balance before the action described in `info`.
    #[serde(rename = "old_balance")]
    pub old_balance: f64,
    /// Funding realized due to a position change or the end of a funding rate period.
    #[serde(rename = "realized_funding")]
    pub realized_funding: f64,
    /// Realized profit and loss by reducing the position.
    #[serde(rename = "realized_pnl")]
    pub realized_pnl: f64,
    /// Price at which the trade was executed.
    #[serde(rename = "trade_price")]
    pub trade_price: f64,
    /// Percentage conversion spread used in a currency conversion.
    #[serde(rename = "conversion_spread_percentage", skip_serializing_if = "Option::is_none")]
    pub conversion_spread_percentage: Option<f64>,
    /// Liquidation fee associated with a liquidation or assignment entry.
    #[serde(rename = "liquidation_fee", skip_serializing_if = "Option::is_none")]
    pub liquidation_fee: Option<f64>,
}

impl Logs {
    pub fn new(asset: String, booking_uid: uuid::Uuid, collateral: Option<String>, contract: Option<String>, date: String, execution: uuid::Uuid, fee: f64, funding_rate: f64, id: i64, info: Info, margin_account: String, mark_price: f64, new_average_entry_price: f64, new_balance: f64, old_average_entry_price: f64, old_balance: f64, realized_funding: f64, realized_pnl: f64, trade_price: f64) -> Logs {
        Logs {
            asset,
            booking_uid,
            collateral,
            contract,
            date,
            execution,
            fee,
            funding_rate,
            id,
            info,
            margin_account,
            mark_price,
            new_average_entry_price,
            new_balance,
            old_average_entry_price,
            old_balance,
            realized_funding,
            realized_pnl,
            trade_price,
            conversion_spread_percentage: None,
            liquidation_fee: None,
        }
    }
}
/// Short description of the entry.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Info {
    #[serde(rename = "futures trade")]
    FuturesTrade,
    #[serde(rename = "liquidation")]
    Liquidation,
    #[serde(rename = "assignor")]
    Assignor,
    #[serde(rename = "assignee")]
    Assignee,
    #[serde(rename = "unwind counterparty")]
    UnwindCounterparty,
    #[serde(rename = "unwind bankrupt")]
    UnwindBankrupt,
    #[serde(rename = "covered liquidation")]
    CoveredLiquidation,
    #[serde(rename = "funding rate change")]
    FundingRateChange,
    #[serde(rename = "conversion")]
    Conversion,
    #[serde(rename = "interest payment")]
    InterestPayment,
    #[serde(rename = "transfer")]
    Transfer,
    #[serde(rename = "cross-exchange transfer")]
    CrossExchangeTransfer,
}

impl Default for Info {
    fn default() -> Info {
        Self::FuturesTrade
    }
}

