/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Order {
    /// The UID associated with the order.
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// The client order id, or null if the order does not have one.
    #[serde(rename = "cliOrdId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cli_ord_id: Option<Option<String>>,
    /// The type of the order.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// The symbol of the Futures.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// The side associated with the order.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// The quantity (size) associated with the order.
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<f64>,
    /// The total amount of the order that has been filled.
    #[serde(rename = "filled", skip_serializing_if = "Option::is_none")]
    pub filled: Option<f64>,
    /// The limit price associated with a limit order.
    #[serde(rename = "limitPrice", skip_serializing_if = "Option::is_none")]
    pub limit_price: Option<f64>,
    /// Whether the order is reduce-only or not.
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<bool>,
    /// The date and time the order was placed.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// The date and time the order was last updated.
    #[serde(rename = "lastUpdateTimestamp", skip_serializing_if = "Option::is_none")]
    pub last_update_timestamp: Option<String>,
    /// The amount of quantity that was removed before placement, or null if the order is not reduce-only.
    #[serde(rename = "reducedQuantity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reduced_quantity: Option<Option<f64>>,
}

impl Order {
    pub fn new() -> Order {
        Order {
            order_id: None,
            cli_ord_id: None,
            r#type: None,
            symbol: None,
            side: None,
            quantity: None,
            filled: None,
            limit_price: None,
            reduce_only: None,
            timestamp: None,
            last_update_timestamp: None,
            reduced_quantity: None,
        }
    }
}
/// The type of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "lmt")]
    Lmt,
    #[serde(rename = "ioc")]
    Ioc,
    #[serde(rename = "post")]
    Post,
    #[serde(rename = "liquidation")]
    Liquidation,
    #[serde(rename = "assignment")]
    Assignment,
    #[serde(rename = "stp")]
    Stp,
    #[serde(rename = "unwind")]
    Unwind,
    #[serde(rename = "block")]
    Block,
}

impl Default for Type {
    fn default() -> Type {
        Self::Lmt
    }
}
/// The side associated with the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}

