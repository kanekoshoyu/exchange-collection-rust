/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubAccountsArray {
    /// The account UID
    #[serde(rename = "accountUid", skip_serializing_if = "Option::is_none")]
    pub account_uid: Option<String>,
    /// The email associated with the account
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// The full name associated with the account (nullable)
    #[serde(rename = "fullName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<Option<String>>,
    #[serde(rename = "holdingAccounts", skip_serializing_if = "Option::is_none")]
    pub holding_accounts: Option<Vec<models::HoldingAccounts>>,
    #[serde(rename = "futuresAccounts", skip_serializing_if = "Option::is_none")]
    pub futures_accounts: Option<Vec<models::FuturesAccounts>>,
    #[serde(rename = "flexAccount", skip_serializing_if = "Option::is_none")]
    pub flex_account: Option<Box<models::Accounts>>,
}

impl SubAccountsArray {
    pub fn new() -> SubAccountsArray {
        SubAccountsArray {
            account_uid: None,
            email: None,
            full_name: None,
            holding_accounts: None,
            futures_accounts: None,
            flex_account: None,
        }
    }
}

