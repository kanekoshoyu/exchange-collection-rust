/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(rename = "serverTime", skip_serializing_if = "Option::is_none")]
    pub server_time: Option<String>,
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<String>,
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<Error>,
}

impl ErrorResponse {
    pub fn new() -> ErrorResponse {
        ErrorResponse {
            server_time: None,
            result: None,
            error: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Error {
    #[serde(rename = "accountInactive")]
    AccountInactive,
    #[serde(rename = "apiLimitExceeded")]
    ApiLimitExceeded,
    #[serde(rename = "authenticationError")]
    AuthenticationError,
    #[serde(rename = "insufficientFunds")]
    InsufficientFunds,
    #[serde(rename = "invalidAccount")]
    InvalidAccount,
    #[serde(rename = "invalidAmount")]
    InvalidAmount,
    #[serde(rename = "invalidArgument")]
    InvalidArgument,
    #[serde(rename = "invalidUnit")]
    InvalidUnit,
    #[serde(rename = "jsonParseError")]
    JsonParseError,
    #[serde(rename = "marketUnavailable")]
    MarketUnavailable,
    #[serde(rename = "nonceBelowThreshold")]
    NonceBelowThreshold,
    #[serde(rename = "nonceDuplicate")]
    NonceDuplicate,
    #[serde(rename = "notFound")]
    NotFound,
    #[serde(rename = "requiredArgumentMissing")]
    RequiredArgumentMissing,
    #[serde(rename = "serverError")]
    ServerError,
    #[serde(rename = "unavailable")]
    Unavailable,
    #[serde(rename = "unknownError")]
    UnknownError,
}

impl Default for Error {
    fn default() -> Error {
        Self::AccountInactive
    }
}

