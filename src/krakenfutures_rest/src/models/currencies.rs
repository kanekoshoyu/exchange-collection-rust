/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Currencies {
    /// Quantity of the asset.
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<f64>,
    /// USD value of the asset.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
    /// USD value of the asset usable for margin.
    #[serde(rename = "collateralValue", skip_serializing_if = "Option::is_none")]
    pub collateral_value: Option<f64>,
    /// Quantity of asset available for trading.
    #[serde(rename = "available", skip_serializing_if = "Option::is_none")]
    pub available: Option<f64>,
}

impl Currencies {
    pub fn new() -> Currencies {
        Currencies {
            quantity: None,
            value: None,
            collateral_value: None,
            available: None,
        }
    }
}

