/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Fills {
    /// The unique client order identifier. This field is returned only if the order has a client order ID.
    #[serde(rename = "cliOrdId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cli_ord_id: Option<Option<String>>,
    /// The date and time the order was filled.
    #[serde(rename = "fillTime", skip_serializing_if = "Option::is_none")]
    pub fill_time: Option<String>,
    /// The classification of the fill.
    #[serde(rename = "fillType", skip_serializing_if = "Option::is_none")]
    pub fill_type: Option<FillType>,
    /// The unique identifier of the fill. Note that several fill_id can pertain to one order_id (but not vice versa).
    #[serde(rename = "fill_id", skip_serializing_if = "Option::is_none")]
    pub fill_id: Option<uuid::Uuid>,
    /// The unique identifier of the order.
    #[serde(rename = "order_id", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<uuid::Uuid>,
    /// The price of the fill.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    /// The direction of the order.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// The size of the fill.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The symbol of the futures the fill occurred in.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
}

impl Fills {
    pub fn new() -> Fills {
        Fills {
            cli_ord_id: None,
            fill_time: None,
            fill_type: None,
            fill_id: None,
            order_id: None,
            price: None,
            side: None,
            size: None,
            symbol: None,
        }
    }
}
/// The classification of the fill.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FillType {
    #[serde(rename = "maker")]
    Maker,
    #[serde(rename = "taker")]
    Taker,
    #[serde(rename = "liquidation")]
    Liquidation,
    #[serde(rename = "assignor")]
    Assignor,
    #[serde(rename = "assignee")]
    Assignee,
    #[serde(rename = "takerAfterEdit")]
    TakerAfterEdit,
    #[serde(rename = "unwindBankrupt")]
    UnwindBankrupt,
    #[serde(rename = "unwindCounterparty")]
    UnwindCounterparty,
}

impl Default for FillType {
    fn default() -> FillType {
        Self::Maker
    }
}
/// The direction of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}

