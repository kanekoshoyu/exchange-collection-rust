/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SendOrderRequest {
    /// The time before which the request should be processed; otherwise, it is rejected.
    #[serde(rename = "processBefore", skip_serializing_if = "Option::is_none")]
    pub process_before: Option<String>,
    /// The type of order.
    #[serde(rename = "orderType", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<OrderType>,
    /// The symbol of the Futures.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// The direction of the order.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// The size associated with the order. Note that different Futures have different contract sizes.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The limit price associated with the order. For stop orders, this denotes the worst price for the stp or take_profit order. If no limitPrice is provided, the stp or take_profit order will trigger a market order. Leave undefined for trailing_stop orders.
    #[serde(rename = "limitPrice", skip_serializing_if = "Option::is_none")]
    pub limit_price: Option<f64>,
    /// The stop price associated with a stop or take profit order. Required if orderType is stp or take_profit; leave undefined for trailing_stop orders.
    #[serde(rename = "stopPrice", skip_serializing_if = "Option::is_none")]
    pub stop_price: Option<f64>,
    /// The unique order identifier specified by the user.
    #[serde(rename = "cliOrdId", skip_serializing_if = "Option::is_none")]
    pub cli_ord_id: Option<String>,
    /// The signal used for triggering stp, take_profit, or trailing_stop orders.
    #[serde(rename = "triggerSignal", skip_serializing_if = "Option::is_none")]
    pub trigger_signal: Option<TriggerSignal>,
    /// Set as true if the order should only reduce an existing position; any order increasing a position will be rejected.
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<bool>,
    /// Maximum value of 50%, minimum value of 0.1% for 'PERCENT' maxDeviationUnit. Required if order type is trailing_stop.
    #[serde(rename = "trailingStopMaxDeviation", skip_serializing_if = "Option::is_none")]
    pub trailing_stop_max_deviation: Option<f64>,
    /// Defines how the trailing trigger price is calculated from the requested trigger signal. Required if order type is trailing_stop.
    #[serde(rename = "trailingStopDeviationUnit", skip_serializing_if = "Option::is_none")]
    pub trailing_stop_deviation_unit: Option<TrailingStopDeviationUnit>,
    /// Can only be set for triggers (e.g., order types take_profit, stop, and trailing_stop). Defines a relative limit price based on the trigger stopPrice. The offset can be positive or negative, with potential restrictions on value depending on limitPriceOffsetUnit.
    #[serde(rename = "limitPriceOffsetValue", skip_serializing_if = "Option::is_none")]
    pub limit_price_offset_value: Option<f64>,
    /// Defines the unit for the relative limit price distance from the trigger's stopPrice. Must be set together with limitPriceOffsetValue.
    #[serde(rename = "limitPriceOffsetUnit", skip_serializing_if = "Option::is_none")]
    pub limit_price_offset_unit: Option<LimitPriceOffsetUnit>,
}

impl SendOrderRequest {
    pub fn new() -> SendOrderRequest {
        SendOrderRequest {
            process_before: None,
            order_type: None,
            symbol: None,
            side: None,
            size: None,
            limit_price: None,
            stop_price: None,
            cli_ord_id: None,
            trigger_signal: None,
            reduce_only: None,
            trailing_stop_max_deviation: None,
            trailing_stop_deviation_unit: None,
            limit_price_offset_value: None,
            limit_price_offset_unit: None,
        }
    }
}
/// The type of order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "lmt")]
    Lmt,
    #[serde(rename = "post")]
    Post,
    #[serde(rename = "ioc")]
    Ioc,
    #[serde(rename = "mkt")]
    Mkt,
    #[serde(rename = "stp")]
    Stp,
    #[serde(rename = "take_profit")]
    TakeProfit,
    #[serde(rename = "trailing_stop")]
    TrailingStop,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Lmt
    }
}
/// The direction of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// The signal used for triggering stp, take_profit, or trailing_stop orders.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerSignal {
    #[serde(rename = "mark")]
    Mark,
    #[serde(rename = "spot")]
    Spot,
    #[serde(rename = "last")]
    Last,
}

impl Default for TriggerSignal {
    fn default() -> TriggerSignal {
        Self::Mark
    }
}
/// Defines how the trailing trigger price is calculated from the requested trigger signal. Required if order type is trailing_stop.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrailingStopDeviationUnit {
    #[serde(rename = "PERCENT")]
    Percent,
    #[serde(rename = "QUOTE_CURRENCY")]
    QuoteCurrency,
}

impl Default for TrailingStopDeviationUnit {
    fn default() -> TrailingStopDeviationUnit {
        Self::Percent
    }
}
/// Defines the unit for the relative limit price distance from the trigger's stopPrice. Must be set together with limitPriceOffsetValue.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LimitPriceOffsetUnit {
    #[serde(rename = "QUOTE_CURRENCY")]
    QuoteCurrency,
    #[serde(rename = "PERCENT")]
    Percent,
}

impl Default for LimitPriceOffsetUnit {
    fn default() -> LimitPriceOffsetUnit {
        Self::QuoteCurrency
    }
}

