/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BatchOrderInner {
    BatchOrderSend(Box<models::BatchOrderSend>),
    BatchOrderEdit(Box<models::BatchOrderEdit>),
    BatchOrderCancel(Box<models::BatchOrderCancel>),
}

impl Default for BatchOrderInner {
    fn default() -> Self {
        Self::BatchOrderSend(Default::default())
    }
}
/// Always cancel.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Order {
    #[serde(rename = "cancel")]
    Cancel,
}

impl Default for Order {
    fn default() -> Order {
        Self::Cancel
    }
}
/// Type of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "lmt")]
    Lmt,
    #[serde(rename = "ioc")]
    Ioc,
    #[serde(rename = "post")]
    Post,
    #[serde(rename = "stp")]
    Stp,
    #[serde(rename = "take_profit")]
    TakeProfit,
    #[serde(rename = "trailing_stop")]
    TrailingStop,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Lmt
    }
}
/// The direction of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerSignal {
    #[serde(rename = "mark")]
    Mark,
    #[serde(rename = "spot")]
    Spot,
    #[serde(rename = "last")]
    Last,
}

impl Default for TriggerSignal {
    fn default() -> TriggerSignal {
        Self::Mark
    }
}
/// Defines how the trailing trigger price is calculated from the requested trigger signal.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrailingStopDeviationUnit {
    #[serde(rename = "PERCENT")]
    Percent,
    #[serde(rename = "QUOTE_CURRENCY")]
    QuoteCurrency,
}

impl Default for TrailingStopDeviationUnit {
    fn default() -> TrailingStopDeviationUnit {
        Self::Percent
    }
}

