/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EditOrder {
    /// The time before which the request should be processed; otherwise, it is rejected.
    #[serde(rename = "processBefore", skip_serializing_if = "Option::is_none")]
    pub process_before: Option<String>,
    /// ID of the order you wish to edit. Required if `cliOrdId` is not included.
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// The order identity specified by the user. It must be globally unique. Required if `orderId` is not included.
    #[serde(rename = "cliOrdId", skip_serializing_if = "Option::is_none")]
    pub cli_ord_id: Option<String>,
    /// The size associated with the order.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The limit price associated with the order. Must not exceed the tick size of the contract.
    #[serde(rename = "limitPrice", skip_serializing_if = "Option::is_none")]
    pub limit_price: Option<f64>,
    /// The stop price associated with a stop order. Required if the old `orderType` is stp. Must not exceed the tick size of the contract. For stp orders, `limitPrice` is also required and denotes the worst price at which the stp order can get filled.
    #[serde(rename = "stopPrice", skip_serializing_if = "Option::is_none")]
    pub stop_price: Option<f64>,
    /// Maximum value of 50%, minimum value of 0.1% for 'PERCENT' `maxDeviationUnit`. Relevant only for trailing stop orders.
    #[serde(rename = "trailingStopMaxDeviation", skip_serializing_if = "Option::is_none")]
    pub trailing_stop_max_deviation: Option<f64>,
    /// Defines how the trailing trigger price is calculated from the requested trigger signal. Relevant only for trailing stop orders.
    #[serde(rename = "trailingStopDeviationUnit", skip_serializing_if = "Option::is_none")]
    pub trailing_stop_deviation_unit: Option<TrailingStopDeviationUnit>,
}

impl EditOrder {
    pub fn new() -> EditOrder {
        EditOrder {
            process_before: None,
            order_id: None,
            cli_ord_id: None,
            size: None,
            limit_price: None,
            stop_price: None,
            trailing_stop_max_deviation: None,
            trailing_stop_deviation_unit: None,
        }
    }
}
/// Defines how the trailing trigger price is calculated from the requested trigger signal. Relevant only for trailing stop orders.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrailingStopDeviationUnit {
    #[serde(rename = "PERCENT")]
    Percent,
    #[serde(rename = "QUOTE_CURRENCY")]
    QuoteCurrency,
}

impl Default for TrailingStopDeviationUnit {
    fn default() -> TrailingStopDeviationUnit {
        Self::Percent
    }
}

