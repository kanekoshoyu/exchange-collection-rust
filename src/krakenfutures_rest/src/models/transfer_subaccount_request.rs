/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferSubaccountRequest {
    /// The user account (this or a sub account) from which funds should be debited
    #[serde(rename = "fromUser")]
    pub from_user: String,
    /// The user account (this or a sub account) to which funds should be credited
    #[serde(rename = "toUser")]
    pub to_user: String,
    /// The wallet (cash or margin account) from which funds should be debited
    #[serde(rename = "fromAccount")]
    pub from_account: String,
    /// The wallet (cash or margin account) to which funds should be credited
    #[serde(rename = "toAccount")]
    pub to_account: String,
    /// The currency unit to transfer
    #[serde(rename = "unit")]
    pub unit: String,
    /// The amount to transfer
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
}

impl TransferSubaccountRequest {
    pub fn new(from_user: String, to_user: String, from_account: String, to_account: String, unit: String) -> TransferSubaccountRequest {
        TransferSubaccountRequest {
            from_user,
            to_user,
            from_account,
            to_account,
            unit,
            amount: None,
        }
    }
}

