/*
 * Kraken API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CancelResponse {
    /// Server time in Coordinated Universal Time (UTC).
    #[serde(rename = "serverTime", skip_serializing_if = "Option::is_none")]
    pub server_time: Option<String>,
    /// The result of the cancellation operation. Always \"success\".
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<Result>,
    /// The cancelled order ID.
    #[serde(rename = "order_id", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<uuid::Uuid>,
    #[serde(rename = "OrderEvents", skip_serializing_if = "Option::is_none")]
    pub order_events: Option<Box<models::BatchStatusObject>>,
    /// The date and time the order cancellation was received.
    #[serde(rename = "receivedTime", skip_serializing_if = "Option::is_none")]
    pub received_time: Option<String>,
    /// The status of the order cancellation.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "cancelStatus", skip_serializing_if = "Option::is_none")]
    pub cancel_status: Option<Box<models::CancelResponseCancelStatus>>,
}

impl CancelResponse {
    pub fn new() -> CancelResponse {
        CancelResponse {
            server_time: None,
            result: None,
            order_id: None,
            order_events: None,
            received_time: None,
            status: None,
            cancel_status: None,
        }
    }
}
/// The result of the cancellation operation. Always \"success\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Result {
    #[serde(rename = "success")]
    Success,
}

impl Default for Result {
    fn default() -> Result {
        Self::Success
    }
}
/// The status of the order cancellation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "filled")]
    Filled,
    #[serde(rename = "notFound")]
    NotFound,
}

impl Default for Status {
    fn default() -> Status {
        Self::Cancelled
    }
}

