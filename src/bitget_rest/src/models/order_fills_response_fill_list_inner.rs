/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderFillsResponseFillListInner {
    /// Unique identifier for the trade.
    #[serde(rename = "tradeId", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<String>,
    /// Trading pair, e.g., ethusdt.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Unique identifier for the order.
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// Price at which the trade occurred.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// Base volume of the trade.
    #[serde(rename = "baseVolume", skip_serializing_if = "Option::is_none")]
    pub base_volume: Option<String>,
    /// Details of fees applied to the trade.
    #[serde(rename = "feeDetail", skip_serializing_if = "Option::is_none")]
    pub fee_detail: Option<Vec<models::OrderFillsResponseFillListInnerFeeDetailInner>>,
    /// Side of the trade, e.g., 'buy' or 'sell'.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<String>,
    /// Quote volume of the trade.
    #[serde(rename = "quoteVolume", skip_serializing_if = "Option::is_none")]
    pub quote_volume: Option<String>,
    /// Profit from the trade.
    #[serde(rename = "profit", skip_serializing_if = "Option::is_none")]
    pub profit: Option<String>,
    /// Source of the entry point, e.g., 'api'.
    #[serde(rename = "enterPointSource", skip_serializing_if = "Option::is_none")]
    pub enter_point_source: Option<String>,
    /// Trade side, e.g., 'open' or 'close'.
    #[serde(rename = "tradeSide", skip_serializing_if = "Option::is_none")]
    pub trade_side: Option<String>,
    /// Position mode, e.g., 'hedge_mode'.
    #[serde(rename = "posMode", skip_serializing_if = "Option::is_none")]
    pub pos_mode: Option<String>,
    /// Scope of the trade, e.g., 'taker'.
    #[serde(rename = "tradeScope", skip_serializing_if = "Option::is_none")]
    pub trade_scope: Option<String>,
    /// Creation time of the trade in milliseconds.
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
}

impl OrderFillsResponseFillListInner {
    pub fn new() -> OrderFillsResponseFillListInner {
        OrderFillsResponseFillListInner {
            trade_id: None,
            symbol: None,
            order_id: None,
            price: None,
            base_volume: None,
            fee_detail: None,
            side: None,
            quote_volume: None,
            profit: None,
            enter_point_source: None,
            trade_side: None,
            pos_mode: None,
            trade_scope: None,
            c_time: None,
        }
    }
}

