/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModifyTpslRequest {
    /// Take profit and stop loss order number. Either `orderId` or `clientOid` must be provided. 
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// Take profit and stop loss client order number. Either `orderId` or `clientOid` must be provided. 
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// Margin currency.
    #[serde(rename = "marginCoin")]
    pub margin_coin: String,
    /// Product type options. - usdt-futures: USDT professional futures - coin-futures: Mixed futures - usdc-futures: USDC professional futures - susdt-futures: USDT professional futures demo - scoin-futures: Mixed futures demo - susdc-futures: USDC professional futures demo 
    #[serde(rename = "productType")]
    pub product_type: ProductType,
    /// Trading pair, e.g., ETHUSDT.
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// Trigger price.
    #[serde(rename = "triggerPrice")]
    pub trigger_price: String,
    /// Trigger type. Options:   - fill_price: transaction price   - mark_price: mark price 
    #[serde(rename = "triggerType", skip_serializing_if = "Option::is_none")]
    pub trigger_type: Option<TriggerType>,
    /// Execution price. - If 0 or not provided, it means market price execution. - If greater than 0, it means limit price execution. - When `planType` is `moving_plan`, it is fixed to the market price. 
    #[serde(rename = "executePrice", skip_serializing_if = "Option::is_none")]
    pub execute_price: Option<String>,
    /// Order quantity.
    #[serde(rename = "size")]
    pub size: String,
    /// Callback range. Required only for trailing stop orders. 
    #[serde(rename = "rangeRate", skip_serializing_if = "Option::is_none")]
    pub range_rate: Option<String>,
}

impl ModifyTpslRequest {
    pub fn new(margin_coin: String, product_type: ProductType, symbol: String, trigger_price: String, size: String) -> ModifyTpslRequest {
        ModifyTpslRequest {
            order_id: None,
            client_oid: None,
            margin_coin,
            product_type,
            symbol,
            trigger_price,
            trigger_type: None,
            execute_price: None,
            size,
            range_rate: None,
        }
    }
}
/// Product type options. - usdt-futures: USDT professional futures - coin-futures: Mixed futures - usdc-futures: USDC professional futures - susdt-futures: USDT professional futures demo - scoin-futures: Mixed futures demo - susdc-futures: USDC professional futures demo 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProductType {
    #[serde(rename = "usdt-futures")]
    UsdtFutures,
    #[serde(rename = "coin-futures")]
    CoinFutures,
    #[serde(rename = "usdc-futures")]
    UsdcFutures,
    #[serde(rename = "susdt-futures")]
    SusdtFutures,
    #[serde(rename = "scoin-futures")]
    ScoinFutures,
    #[serde(rename = "susdc-futures")]
    SusdcFutures,
}

impl Default for ProductType {
    fn default() -> ProductType {
        Self::UsdtFutures
    }
}
/// Trigger type. Options:   - fill_price: transaction price   - mark_price: mark price 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerType {
    #[serde(rename = "fill_price")]
    FillPrice,
    #[serde(rename = "mark_price")]
    MarkPrice,
}

impl Default for TriggerType {
    fn default() -> TriggerType {
        Self::FillPrice
    }
}

