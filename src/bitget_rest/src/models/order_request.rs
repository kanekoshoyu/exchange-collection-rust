/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderRequest {
    /// Trading pair name, e.g., BTCUSDT. All symbols can be returned by the Get Symbol Info interface.
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// Order direction.
    #[serde(rename = "side")]
    pub side: Side,
    /// Order type.
    #[serde(rename = "orderType")]
    pub order_type: OrderType,
    /// Execution strategy (invalid when orderType is market).
    #[serde(rename = "force")]
    pub force: Force,
    /// Limit price. The decimal places of price and the price step can be returned by the Get Symbol Info interface.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// Amount. For Limit and Market-Sell orders, it represents the number of base coins. For Market-Buy orders, it represents the number of quote coins. The decimal places of amount can be obtained through the Get Symbol Info interface.
    #[serde(rename = "size")]
    pub size: String,
    /// Customized order ID. The idempotency time is 6 hours, only valid when orders are unfilled. It's invalid when tpslType is tpsl.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// SPOT TP/SL trigger price, only required in SPOT TP/SL order.
    #[serde(rename = "triggerPrice", skip_serializing_if = "Option::is_none")]
    pub trigger_price: Option<String>,
    /// Order type. Default is normal.
    #[serde(rename = "tpslType", skip_serializing_if = "Option::is_none")]
    pub tpsl_type: Option<TpslType>,
    /// Request time in Unix millisecond timestamp.
    #[serde(rename = "requestTime", skip_serializing_if = "Option::is_none")]
    pub request_time: Option<String>,
    /// Valid time window in Unix millisecond timestamp. If set, the request is valid only when the time range between the timestamp in the request and the time that server received the request is within receiveWindow.
    #[serde(rename = "receiveWindow", skip_serializing_if = "Option::is_none")]
    pub receive_window: Option<String>,
    /// STP Mode (Self Trade Prevention). Default is none.
    #[serde(rename = "stpMode", skip_serializing_if = "Option::is_none")]
    pub stp_mode: Option<StpMode>,
    /// Take profit price. It's invalid when tpslType is tpsl. The decimal places of price and the price step can be returned by the Get Symbol Info interface.
    #[serde(rename = "presetTakeProfitPrice", skip_serializing_if = "Option::is_none")]
    pub preset_take_profit_price: Option<String>,
    /// Take profit execute price. It's invalid when tpslType is tpsl. The decimal places of price and the price step can be returned by the Get Symbol Info interface.
    #[serde(rename = "executeTakeProfitPrice", skip_serializing_if = "Option::is_none")]
    pub execute_take_profit_price: Option<String>,
    /// Stop loss price. It's invalid when tpslType is tpsl. The decimal places of price and the price step can be returned by the Get Symbol Info interface.
    #[serde(rename = "presetStopLossPrice", skip_serializing_if = "Option::is_none")]
    pub preset_stop_loss_price: Option<String>,
    /// Stop loss execute price. It's invalid when tpslType is tpsl. The decimal places of price and the price step can be returned by the Get Symbol Info interface.
    #[serde(rename = "executeStopLossPrice", skip_serializing_if = "Option::is_none")]
    pub execute_stop_loss_price: Option<String>,
}

impl OrderRequest {
    pub fn new(symbol: String, side: Side, order_type: OrderType, force: Force, size: String) -> OrderRequest {
        OrderRequest {
            symbol,
            side,
            order_type,
            force,
            price: None,
            size,
            client_oid: None,
            trigger_price: None,
            tpsl_type: None,
            request_time: None,
            receive_window: None,
            stp_mode: None,
            preset_take_profit_price: None,
            execute_take_profit_price: None,
            preset_stop_loss_price: None,
            execute_stop_loss_price: None,
        }
    }
}
/// Order direction.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Order type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "limit")]
    Limit,
    #[serde(rename = "market")]
    Market,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Limit
    }
}
/// Execution strategy (invalid when orderType is market).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Force {
    #[serde(rename = "gtc")]
    Gtc,
    #[serde(rename = "post_only")]
    PostOnly,
    #[serde(rename = "fok")]
    Fok,
    #[serde(rename = "ioc")]
    Ioc,
}

impl Default for Force {
    fn default() -> Force {
        Self::Gtc
    }
}
/// Order type. Default is normal.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TpslType {
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "tpsl")]
    Tpsl,
}

impl Default for TpslType {
    fn default() -> TpslType {
        Self::Normal
    }
}
/// STP Mode (Self Trade Prevention). Default is none.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StpMode {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "cancel_taker")]
    CancelTaker,
    #[serde(rename = "cancel_maker")]
    CancelMaker,
    #[serde(rename = "cancel_both")]
    CancelBoth,
}

impl Default for StpMode {
    fn default() -> StpMode {
        Self::None
    }
}

