/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WithdrawRequest {
    /// Coin name (e.g., USDT). All available coins can be retrieved from the Get Coin Info interface.
    #[serde(rename = "coin")]
    pub coin: String,
    /// Type of withdrawal. Options include 'on_chain' for on-chain withdrawal and 'internal_transfer' for internal transfers.
    #[serde(rename = "transferType")]
    pub transfer_type: TransferType,
    /// Withdrawal address. For 'on_chain', it represents the chain address. For 'internal_transfer', it could be UID, email, or mobile, based on innerToType.
    #[serde(rename = "address")]
    pub address: String,
    /// Chain network (e.g., erc20, trc20). This is required if the transferType is 'on_chain'. Chain names are available via the Get Coin Info interface.
    #[serde(rename = "chain", skip_serializing_if = "Option::is_none")]
    pub chain: Option<String>,
    /// Address type for internal withdrawals (default is 'uid').
    #[serde(rename = "innerToType", skip_serializing_if = "Option::is_none")]
    pub inner_to_type: Option<InnerToType>,
    /// Required when innerToType is 'mobile' to specify the phone's country/region code.
    #[serde(rename = "areaCode", skip_serializing_if = "Option::is_none")]
    pub area_code: Option<String>,
    /// Address tag for specific coins like EOS, where this field is needed.
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// Amount to withdraw. For Bitcoin Lightning Network withdrawals, this should equal the invoice's deposit amount and exclude fees. Decimal precision details are available via the Get Coin Info interface.
    #[serde(rename = "size")]
    pub size: String,
    /// Optional note for the withdrawal request.
    #[serde(rename = "remark", skip_serializing_if = "Option::is_none")]
    pub remark: Option<String>,
    /// Unique client-defined ID for tracking the withdrawal request.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
}

impl WithdrawRequest {
    pub fn new(coin: String, transfer_type: TransferType, address: String, size: String) -> WithdrawRequest {
        WithdrawRequest {
            coin,
            transfer_type,
            address,
            chain: None,
            inner_to_type: None,
            area_code: None,
            tag: None,
            size,
            remark: None,
            client_oid: None,
        }
    }
}
/// Type of withdrawal. Options include 'on_chain' for on-chain withdrawal and 'internal_transfer' for internal transfers.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransferType {
    #[serde(rename = "on_chain")]
    OnChain,
    #[serde(rename = "internal_transfer")]
    InternalTransfer,
}

impl Default for TransferType {
    fn default() -> TransferType {
        Self::OnChain
    }
}
/// Address type for internal withdrawals (default is 'uid').
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InnerToType {
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "mobile")]
    Mobile,
    #[serde(rename = "uid")]
    Uid,
}

impl Default for InnerToType {
    fn default() -> InnerToType {
        Self::Email
    }
}

