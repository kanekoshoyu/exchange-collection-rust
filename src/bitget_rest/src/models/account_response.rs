/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountResponse {
    /// User ID.
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// Inviter's user ID.
    #[serde(rename = "inviterId", skip_serializing_if = "Option::is_none")]
    pub inviter_id: Option<String>,
    /// Affiliate referral code.
    #[serde(rename = "channelCode", skip_serializing_if = "Option::is_none")]
    pub channel_code: Option<String>,
    /// Affiliate channel.
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// IP whitelist.
    #[serde(rename = "ips", skip_serializing_if = "Option::is_none")]
    pub ips: Option<String>,
    /// Permissions for the user.
    #[serde(rename = "authorities", skip_serializing_if = "Option::is_none")]
    pub authorities: Option<Vec<Authorities>>,
    /// Main account user ID.
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<i32>,
    /// Indicates if the user is a trader.
    #[serde(rename = "traderType", skip_serializing_if = "Option::is_none")]
    pub trader_type: Option<TraderType>,
    /// Registration time in Unix millisecond timestamp.
    #[serde(rename = "regisTime", skip_serializing_if = "Option::is_none")]
    pub regis_time: Option<String>,
}

impl AccountResponse {
    pub fn new() -> AccountResponse {
        AccountResponse {
            user_id: None,
            inviter_id: None,
            channel_code: None,
            channel: None,
            ips: None,
            authorities: None,
            parent_id: None,
            trader_type: None,
            regis_time: None,
        }
    }
}
/// Permissions for the user.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Authorities {
    #[serde(rename = "readonly")]
    Readonly,
    #[serde(rename = "coor")]
    Coor,
    #[serde(rename = "cpor")]
    Cpor,
    #[serde(rename = "stor")]
    Stor,
    #[serde(rename = "smor")]
    Smor,
    #[serde(rename = "ttor")]
    Ttor,
    #[serde(rename = "wtor")]
    Wtor,
    #[serde(rename = "taxr")]
    Taxr,
    #[serde(rename = "chor")]
    Chor,
    #[serde(rename = "p2pr")]
    P2pr,
    #[serde(rename = "coow")]
    Coow,
    #[serde(rename = "cpow")]
    Cpow,
    #[serde(rename = "stow")]
    Stow,
    #[serde(rename = "smow")]
    Smow,
    #[serde(rename = "ttow")]
    Ttow,
    #[serde(rename = "wtow")]
    Wtow,
    #[serde(rename = "wwow")]
    Wwow,
    #[serde(rename = "chow")]
    Chow,
    #[serde(rename = "p2p")]
    P2p,
}

impl Default for Authorities {
    fn default() -> Authorities {
        Self::Readonly
    }
}
/// Indicates if the user is a trader.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TraderType {
    #[serde(rename = "trader")]
    Trader,
    #[serde(rename = "not_trader")]
    NotTrader,
}

impl Default for TraderType {
    fn default() -> TraderType {
        Self::Trader
    }
}

