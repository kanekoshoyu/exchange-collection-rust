/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TpslRequest {
    /// Margin currency (capitalized).
    #[serde(rename = "marginCoin")]
    pub margin_coin: String,
    /// Product type.
    #[serde(rename = "productType")]
    pub product_type: ProductType,
    /// Trading pair, e.g., ETHUSDT.
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// Take profit and stop loss type.
    #[serde(rename = "planType")]
    pub plan_type: PlanType,
    /// Trigger price.
    #[serde(rename = "triggerPrice")]
    pub trigger_price: String,
    /// Trigger type.
    #[serde(rename = "triggerType", skip_serializing_if = "Option::is_none")]
    pub trigger_type: Option<TriggerType>,
    /// Execution price. If it is 0 or not filled in, it means market price execution. If it is greater than 0, it means limit price execution. Do not fill in this parameter when planType is 'moving_plan', as it only executes at market price. 
    #[serde(rename = "executePrice", skip_serializing_if = "Option::is_none")]
    pub execute_price: Option<String>,
    /// Two-way position options: (long: long position, short: short position). One-way position options: (buy: long position, sell: short position). 
    #[serde(rename = "holdSide")]
    pub hold_side: HoldSide,
    /// Order quantity (base coin). Required when planType is 'profit_plan', 'loss_plan', or 'moving_plan'  and should be greater than 0. Not required for 'pos_profit' or 'pos_loss'. 
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// Callback range, required only when planType is 'moving_plan'. 
    #[serde(rename = "rangeRate", skip_serializing_if = "Option::is_none")]
    pub range_rate: Option<String>,
    /// Custom order ID.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// STP Mode, default is 'none'.
    #[serde(rename = "stpMode", skip_serializing_if = "Option::is_none")]
    pub stp_mode: Option<StpMode>,
}

impl TpslRequest {
    pub fn new(margin_coin: String, product_type: ProductType, symbol: String, plan_type: PlanType, trigger_price: String, hold_side: HoldSide) -> TpslRequest {
        TpslRequest {
            margin_coin,
            product_type,
            symbol,
            plan_type,
            trigger_price,
            trigger_type: None,
            execute_price: None,
            hold_side,
            size: None,
            range_rate: None,
            client_oid: None,
            stp_mode: None,
        }
    }
}
/// Product type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProductType {
    #[serde(rename = "usdt-futures")]
    UsdtFutures,
    #[serde(rename = "coin-futures")]
    CoinFutures,
    #[serde(rename = "usdc-futures")]
    UsdcFutures,
    #[serde(rename = "susdt-futures")]
    SusdtFutures,
    #[serde(rename = "scoin-futures")]
    ScoinFutures,
    #[serde(rename = "susdc-futures")]
    SusdcFutures,
}

impl Default for ProductType {
    fn default() -> ProductType {
        Self::UsdtFutures
    }
}
/// Take profit and stop loss type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlanType {
    #[serde(rename = "profit_plan")]
    ProfitPlan,
    #[serde(rename = "loss_plan")]
    LossPlan,
    #[serde(rename = "moving_plan")]
    MovingPlan,
    #[serde(rename = "pos_profit")]
    PosProfit,
    #[serde(rename = "pos_loss")]
    PosLoss,
}

impl Default for PlanType {
    fn default() -> PlanType {
        Self::ProfitPlan
    }
}
/// Trigger type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerType {
    #[serde(rename = "fill_price")]
    FillPrice,
    #[serde(rename = "mark_price")]
    MarkPrice,
}

impl Default for TriggerType {
    fn default() -> TriggerType {
        Self::FillPrice
    }
}
/// Two-way position options: (long: long position, short: short position). One-way position options: (buy: long position, sell: short position). 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HoldSide {
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "short")]
    Short,
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for HoldSide {
    fn default() -> HoldSide {
        Self::Long
    }
}
/// STP Mode, default is 'none'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StpMode {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "cancel_taker")]
    CancelTaker,
    #[serde(rename = "cancel_maker")]
    CancelMaker,
    #[serde(rename = "cancel_both")]
    CancelBoth,
}

impl Default for StpMode {
    fn default() -> StpMode {
        Self::None
    }
}

