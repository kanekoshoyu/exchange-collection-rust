/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ModifyOrdersRequest : Request schema for modifying an existing order.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModifyOrdersRequest {
    /// Order ID. Either `orderId` or `clientOid` is required. If both are provided, `orderId` takes precedence.
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// Custom order ID. Either `orderId` or `clientOid` is required. If both are provided, `orderId` takes precedence.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// Trading pair, e.g., \"ETHUSDT\".
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// Type of product for futures trading.
    #[serde(rename = "productType")]
    pub product_type: ProductType,
    /// New custom order ID for the modified order.
    #[serde(rename = "newClientOid")]
    pub new_client_oid: String,
    /// Updated amount for the transaction. The amount remains unchanged if this field is left blank.
    #[serde(rename = "newSize", skip_serializing_if = "Option::is_none")]
    pub new_size: Option<String>,
    /// Modified price for placing new orders.
    #[serde(rename = "newPrice", skip_serializing_if = "Option::is_none")]
    pub new_price: Option<String>,
    /// Updated take-profit value. If the original order has a take-profit set and this field is empty, the original value is retained.
    #[serde(rename = "newPresetStopSurplusPrice", skip_serializing_if = "Option::is_none")]
    pub new_preset_stop_surplus_price: Option<String>,
    /// Updated stop-loss value. If the original order has a stop-loss set and this field is empty, the original value is retained.
    #[serde(rename = "newPresetStopLossPrice", skip_serializing_if = "Option::is_none")]
    pub new_preset_stop_loss_price: Option<String>,
}

impl ModifyOrdersRequest {
    /// Request schema for modifying an existing order.
    pub fn new(symbol: String, product_type: ProductType, new_client_oid: String) -> ModifyOrdersRequest {
        ModifyOrdersRequest {
            order_id: None,
            client_oid: None,
            symbol,
            product_type,
            new_client_oid,
            new_size: None,
            new_price: None,
            new_preset_stop_surplus_price: None,
            new_preset_stop_loss_price: None,
        }
    }
}
/// Type of product for futures trading.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProductType {
    #[serde(rename = "USDT-FUTURES")]
    UsdtFutures,
    #[serde(rename = "COIN-FUTURES")]
    CoinFutures,
    #[serde(rename = "USDC-FUTURES")]
    UsdcFutures,
    #[serde(rename = "SUSDT-FUTURES")]
    SusdtFutures,
    #[serde(rename = "SCOIN-FUTURES")]
    ScoinFutures,
    #[serde(rename = "SUSDC-FUTURES")]
    SusdcFutures,
}

impl Default for ProductType {
    fn default() -> ProductType {
        Self::UsdtFutures
    }
}

