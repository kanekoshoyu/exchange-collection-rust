/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModifyPlanRequest {
    /// Trigger order type. - normal_plan: average trigger order - track_plan: trailing stop order 
    #[serde(rename = "planType")]
    pub plan_type: PlanType,
    /// Order ID for the trigger order.
    #[serde(rename = "orderId")]
    pub order_id: String,
    /// Client order ID for the trigger order.
    #[serde(rename = "clientOid")]
    pub client_oid: String,
    /// Trading pair, e.g., ETHUSDT.
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// Product type options. - usdt-futures: USDT professional futures - coin-futures: Mixed futures - usdc-futures: USDC professional futures - susdt-futures: USDT professional futures demo - scoin-futures: Mixed futures demo - susdc-futures: USDC professional futures demo 
    #[serde(rename = "productType")]
    pub product_type: ProductType,
    /// New order size.
    #[serde(rename = "newSize")]
    pub new_size: String,
    /// New price for the order.
    #[serde(rename = "newPrice")]
    pub new_price: String,
    /// New callback ratio (required for trailing stop orders).
    #[serde(rename = "newCallbackRatio", skip_serializing_if = "Option::is_none")]
    pub new_callback_ratio: Option<String>,
    /// New trigger price.
    #[serde(rename = "newTriggerPrice")]
    pub new_trigger_price: String,
    /// New trigger type.
    #[serde(rename = "newTriggerType")]
    pub new_trigger_type: NewTriggerType,
    /// New stop surplus execution price.
    #[serde(rename = "newStopSurplusExecutePrice", skip_serializing_if = "Option::is_none")]
    pub new_stop_surplus_execute_price: Option<String>,
    /// New stop surplus trigger price.
    #[serde(rename = "newStopSurplusTriggerPrice", skip_serializing_if = "Option::is_none")]
    pub new_stop_surplus_trigger_price: Option<String>,
    /// New stop surplus trigger type.
    #[serde(rename = "newStopSurplusTriggerType", skip_serializing_if = "Option::is_none")]
    pub new_stop_surplus_trigger_type: Option<NewStopSurplusTriggerType>,
    /// New stop loss execution price.
    #[serde(rename = "newStopLossExecutePrice", skip_serializing_if = "Option::is_none")]
    pub new_stop_loss_execute_price: Option<String>,
    /// New stop loss trigger price.
    #[serde(rename = "newStopLossTriggerPrice", skip_serializing_if = "Option::is_none")]
    pub new_stop_loss_trigger_price: Option<String>,
    /// New stop loss trigger type.
    #[serde(rename = "newStopLossTriggerType", skip_serializing_if = "Option::is_none")]
    pub new_stop_loss_trigger_type: Option<NewStopLossTriggerType>,
}

impl ModifyPlanRequest {
    pub fn new(plan_type: PlanType, order_id: String, client_oid: String, symbol: String, product_type: ProductType, new_size: String, new_price: String, new_trigger_price: String, new_trigger_type: NewTriggerType) -> ModifyPlanRequest {
        ModifyPlanRequest {
            plan_type,
            order_id,
            client_oid,
            symbol,
            product_type,
            new_size,
            new_price,
            new_callback_ratio: None,
            new_trigger_price,
            new_trigger_type,
            new_stop_surplus_execute_price: None,
            new_stop_surplus_trigger_price: None,
            new_stop_surplus_trigger_type: None,
            new_stop_loss_execute_price: None,
            new_stop_loss_trigger_price: None,
            new_stop_loss_trigger_type: None,
        }
    }
}
/// Trigger order type. - normal_plan: average trigger order - track_plan: trailing stop order 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlanType {
    #[serde(rename = "normal_plan")]
    NormalPlan,
    #[serde(rename = "track_plan")]
    TrackPlan,
}

impl Default for PlanType {
    fn default() -> PlanType {
        Self::NormalPlan
    }
}
/// Product type options. - usdt-futures: USDT professional futures - coin-futures: Mixed futures - usdc-futures: USDC professional futures - susdt-futures: USDT professional futures demo - scoin-futures: Mixed futures demo - susdc-futures: USDC professional futures demo 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProductType {
    #[serde(rename = "usdt-futures")]
    UsdtFutures,
    #[serde(rename = "coin-futures")]
    CoinFutures,
    #[serde(rename = "usdc-futures")]
    UsdcFutures,
    #[serde(rename = "susdt-futures")]
    SusdtFutures,
    #[serde(rename = "scoin-futures")]
    ScoinFutures,
    #[serde(rename = "susdc-futures")]
    SusdcFutures,
}

impl Default for ProductType {
    fn default() -> ProductType {
        Self::UsdtFutures
    }
}
/// New trigger type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NewTriggerType {
    #[serde(rename = "fill_price")]
    FillPrice,
    #[serde(rename = "mark_price")]
    MarkPrice,
}

impl Default for NewTriggerType {
    fn default() -> NewTriggerType {
        Self::FillPrice
    }
}
/// New stop surplus trigger type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NewStopSurplusTriggerType {
    #[serde(rename = "fill_price")]
    FillPrice,
    #[serde(rename = "mark_price")]
    MarkPrice,
}

impl Default for NewStopSurplusTriggerType {
    fn default() -> NewStopSurplusTriggerType {
        Self::FillPrice
    }
}
/// New stop loss trigger type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NewStopLossTriggerType {
    #[serde(rename = "fill_price")]
    FillPrice,
    #[serde(rename = "mark_price")]
    MarkPrice,
}

impl Default for NewStopLossTriggerType {
    fn default() -> NewStopLossTriggerType {
        Self::FillPrice
    }
}

