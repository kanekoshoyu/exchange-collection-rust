/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CurrentPlanResponseOrderListInner {
    /// Unique identifier for the order.
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// Client-defined order ID.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// Trading pair name, e.g., TRXUSDT.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Quantity of the asset to buy.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// Price at which the order will execute.
    #[serde(rename = "executePrice", skip_serializing_if = "Option::is_none")]
    pub execute_price: Option<String>,
    /// Price at which the order will be triggered.
    #[serde(rename = "triggerPrice", skip_serializing_if = "Option::is_none")]
    pub trigger_price: Option<String>,
    /// Current status of the order.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Type of order.
    #[serde(rename = "orderType", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<OrderType>,
    /// Order direction.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Specifies the type of order amount.
    #[serde(rename = "planType", skip_serializing_if = "Option::is_none")]
    pub plan_type: Option<PlanType>,
    /// Type of trigger for the order.
    #[serde(rename = "triggerType", skip_serializing_if = "Option::is_none")]
    pub trigger_type: Option<TriggerType>,
    /// Source of the order entry.
    #[serde(rename = "enterPointSource", skip_serializing_if = "Option::is_none")]
    pub enter_point_source: Option<String>,
    /// Unix timestamp in milliseconds when the order was last updated.
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
    /// Unix timestamp in milliseconds when the order was created.
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
}

impl CurrentPlanResponseOrderListInner {
    pub fn new() -> CurrentPlanResponseOrderListInner {
        CurrentPlanResponseOrderListInner {
            order_id: None,
            client_oid: None,
            symbol: None,
            size: None,
            execute_price: None,
            trigger_price: None,
            status: None,
            order_type: None,
            side: None,
            plan_type: None,
            trigger_type: None,
            enter_point_source: None,
            u_time: None,
            c_time: None,
        }
    }
}
/// Type of order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "limit")]
    Limit,
    #[serde(rename = "market")]
    Market,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Limit
    }
}
/// Order direction.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Specifies the type of order amount.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlanType {
    #[serde(rename = "amount")]
    Amount,
    #[serde(rename = "total")]
    Total,
}

impl Default for PlanType {
    fn default() -> PlanType {
        Self::Amount
    }
}
/// Type of trigger for the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerType {
    #[serde(rename = "fill_price")]
    FillPrice,
    #[serde(rename = "mark_price")]
    MarkPrice,
}

impl Default for TriggerType {
    fn default() -> TriggerType {
        Self::FillPrice
    }
}

