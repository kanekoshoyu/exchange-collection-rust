/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubOrderResponse {
    /// Unique identifier for the order.
    #[serde(rename = "orderId")]
    pub order_id: String,
    /// Price of the order.
    #[serde(rename = "price")]
    pub price: String,
    /// Type of the order, e.g., 'limit' or 'market'.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Current status of the order.
    #[serde(rename = "status")]
    pub status: Status,
}

impl SubOrderResponse {
    pub fn new(order_id: String, price: String, r#type: Type, status: Status) -> SubOrderResponse {
        SubOrderResponse {
            order_id,
            price,
            r#type,
            status,
        }
    }
}
/// Type of the order, e.g., 'limit' or 'market'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "limit")]
    Limit,
    #[serde(rename = "market")]
    Market,
}

impl Default for Type {
    fn default() -> Type {
        Self::Limit
    }
}
/// Current status of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Success
    }
}

