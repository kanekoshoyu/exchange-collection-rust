/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlaceOrderRequest {
    /// The trading pair symbol, e.g., \"ETHUSDT\".
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// The product type (e.g., USDT-FUTURES, COIN-FUTURES).
    #[serde(rename = "productType")]
    pub product_type: ProductType,
    /// The position mode.
    #[serde(rename = "marginMode")]
    pub margin_mode: MarginMode,
    /// The margin coin, e.g., \"USDT\" (capitalized).
    #[serde(rename = "marginCoin")]
    pub margin_coin: String,
    /// The amount of the base coin.
    #[serde(rename = "size")]
    pub size: String,
    /// The price of the order (required for limit orders).
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// The trade side.
    #[serde(rename = "side")]
    pub side: Side,
    /// The trade type (only required in hedge mode).
    #[serde(rename = "tradeSide", skip_serializing_if = "Option::is_none")]
    pub trade_side: Option<TradeSide>,
    /// The type of order.
    #[serde(rename = "orderType")]
    pub order_type: OrderType,
    /// Order expiration date.
    #[serde(rename = "force", skip_serializing_if = "Option::is_none")]
    pub force: Option<Force>,
    /// A customized order ID.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// Whether to reduce the position only (YES or NO).
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<ReduceOnly>,
    /// The take-profit price. If empty, no take-profit is set.
    #[serde(rename = "presetStopSurplusPrice", skip_serializing_if = "Option::is_none")]
    pub preset_stop_surplus_price: Option<String>,
    /// The stop-loss price. If empty, no stop-loss is set.
    #[serde(rename = "presetStopLossPrice", skip_serializing_if = "Option::is_none")]
    pub preset_stop_loss_price: Option<String>,
    /// Self Trade Prevention (STP) mode.
    #[serde(rename = "stpMode", skip_serializing_if = "Option::is_none")]
    pub stp_mode: Option<StpMode>,
}

impl PlaceOrderRequest {
    pub fn new(symbol: String, product_type: ProductType, margin_mode: MarginMode, margin_coin: String, size: String, side: Side, order_type: OrderType) -> PlaceOrderRequest {
        PlaceOrderRequest {
            symbol,
            product_type,
            margin_mode,
            margin_coin,
            size,
            price: None,
            side,
            trade_side: None,
            order_type,
            force: None,
            client_oid: None,
            reduce_only: None,
            preset_stop_surplus_price: None,
            preset_stop_loss_price: None,
            stp_mode: None,
        }
    }
}
/// The product type (e.g., USDT-FUTURES, COIN-FUTURES).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProductType {
    #[serde(rename = "USDT-FUTURES")]
    UsdtFutures,
    #[serde(rename = "COIN-FUTURES")]
    CoinFutures,
    #[serde(rename = "USDC-FUTURES")]
    UsdcFutures,
    #[serde(rename = "SUSDT-FUTURES")]
    SusdtFutures,
    #[serde(rename = "SCOIN-FUTURES")]
    ScoinFutures,
    #[serde(rename = "SUSDC-FUTURES")]
    SusdcFutures,
}

impl Default for ProductType {
    fn default() -> ProductType {
        Self::UsdtFutures
    }
}
/// The position mode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MarginMode {
    #[serde(rename = "isolated")]
    Isolated,
    #[serde(rename = "crossed")]
    Crossed,
}

impl Default for MarginMode {
    fn default() -> MarginMode {
        Self::Isolated
    }
}
/// The trade side.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// The trade type (only required in hedge mode).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TradeSide {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "close")]
    Close,
}

impl Default for TradeSide {
    fn default() -> TradeSide {
        Self::Open
    }
}
/// The type of order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "limit")]
    Limit,
    #[serde(rename = "market")]
    Market,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Limit
    }
}
/// Order expiration date.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Force {
    #[serde(rename = "ioc")]
    Ioc,
    #[serde(rename = "fok")]
    Fok,
    #[serde(rename = "gtc")]
    Gtc,
    #[serde(rename = "post_only")]
    PostOnly,
}

impl Default for Force {
    fn default() -> Force {
        Self::Ioc
    }
}
/// Whether to reduce the position only (YES or NO).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReduceOnly {
    #[serde(rename = "YES")]
    Yes,
    #[serde(rename = "NO")]
    No,
}

impl Default for ReduceOnly {
    fn default() -> ReduceOnly {
        Self::Yes
    }
}
/// Self Trade Prevention (STP) mode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StpMode {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "cancel_taker")]
    CancelTaker,
    #[serde(rename = "cancel_maker")]
    CancelMaker,
    #[serde(rename = "cancel_both")]
    CancelBoth,
}

impl Default for StpMode {
    fn default() -> StpMode {
        Self::None
    }
}

