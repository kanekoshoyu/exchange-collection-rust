/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlacePlanRequest {
    /// Trigger order type. Options: normal_plan (average trigger order), track_plan (trailing stop order). 
    #[serde(rename = "planType")]
    pub plan_type: PlanType,
    /// Trading pair, e.g., ETHUSDT.
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// Product type options. - USDT-FUTURES: USDT professional futures - COIN-FUTURES: Mixed futures - USDC-FUTURES: USDC professional futures - SUSDT-FUTURES: USDT professional futures demo - SCOIN-FUTURES: Mixed futures demo - SUSDC-FUTURES: USDC professional futures demo 
    #[serde(rename = "productType")]
    pub product_type: ProductType,
    /// Position mode. Options: isolated (isolated margin), cross (cross margin). 
    #[serde(rename = "marginMode")]
    pub margin_mode: MarginMode,
    /// Margin coin (must be capitalized).
    #[serde(rename = "marginCoin")]
    pub margin_coin: String,
    /// Order amount.
    #[serde(rename = "size")]
    pub size: String,
    /// Strike price. Required when placing a limit trigger order, must be empty for trailing stop orders. 
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// Callback rate for trailing stop orders only. Required for trailing stop orders, cannot exceed 10. 
    #[serde(rename = "callbackRatio", skip_serializing_if = "Option::is_none")]
    pub callback_ratio: Option<String>,
    /// Trigger price for trigger or trailing stop orders.
    #[serde(rename = "triggerPrice")]
    pub trigger_price: String,
    /// Trigger type options. Required for trigger and trailing stop orders. - mark_price: mark price - fill_price: filled price 
    #[serde(rename = "triggerType")]
    pub trigger_type: TriggerType,
    /// Order direction: Buy or Sell.
    #[serde(rename = "side")]
    pub side: Side,
    /// Direction in hedge mode position. For open positions, tradeSide should be \"Open\"; for close positions, \"Close\". Examples:   - For open long, side=\"Buy\" and tradeSide=\"Open\".   - For close long, side=\"Buy\" and tradeSide=\"Close\". 
    #[serde(rename = "tradeSide", skip_serializing_if = "Option::is_none")]
    pub trade_side: Option<TradeSide>,
    /// Order type. For trailing stop orders, must be market. For ordinary trigger orders, can be limit or market. 
    #[serde(rename = "orderType")]
    pub order_type: OrderType,
    /// Custom order ID.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// Whether to reduce position only. Options: YES, NO. Default: NO. Only applicable in one-way position mode, must be empty or \"no\" in hedge mode. 
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<ReduceOnly>,
    /// Take-profit trigger price, empty if not set.
    #[serde(rename = "stopSurplusTriggerPrice", skip_serializing_if = "Option::is_none")]
    pub stop_surplus_trigger_price: Option<String>,
    /// Take-profit strike price. Required if stopSurplusTriggerPrice is set. Must be empty for trailing stop orders. 
    #[serde(rename = "stopSurplusExecutePrice", skip_serializing_if = "Option::is_none")]
    pub stop_surplus_execute_price: Option<String>,
    /// Take-profit trigger type, defaults to transaction price. Options:   - fill_price: filled price   - mark_price: mark price   - index_price: index price Required if stopSurplusTriggerPrice is set. 
    #[serde(rename = "stopSurplusTriggerType", skip_serializing_if = "Option::is_none")]
    pub stop_surplus_trigger_type: Option<StopSurplusTriggerType>,
    /// Stop-loss trigger price, empty if not set.
    #[serde(rename = "stopLossTriggerPrice", skip_serializing_if = "Option::is_none")]
    pub stop_loss_trigger_price: Option<String>,
    /// Stop-loss strike price. Required if stopLossTriggerPrice is set. Must be empty for trailing stop orders. 
    #[serde(rename = "stopLossExecutePrice", skip_serializing_if = "Option::is_none")]
    pub stop_loss_execute_price: Option<String>,
    /// Stop-loss trigger type, defaults to transaction price. Options:   - fill_price: filled price   - mark_price: mark price   - index_price: index price Required if stopLossTriggerPrice is set. 
    #[serde(rename = "stopLossTriggerType", skip_serializing_if = "Option::is_none")]
    pub stop_loss_trigger_type: Option<StopLossTriggerType>,
    /// STP Mode, default is 'none'. Options:   - none: no STP setting   - cancel_taker: cancel taker order   - cancel_maker: cancel maker order   - cancel_both: cancel both taker and maker orders 
    #[serde(rename = "stpMode", skip_serializing_if = "Option::is_none")]
    pub stp_mode: Option<StpMode>,
}

impl PlacePlanRequest {
    pub fn new(plan_type: PlanType, symbol: String, product_type: ProductType, margin_mode: MarginMode, margin_coin: String, size: String, trigger_price: String, trigger_type: TriggerType, side: Side, order_type: OrderType) -> PlacePlanRequest {
        PlacePlanRequest {
            plan_type,
            symbol,
            product_type,
            margin_mode,
            margin_coin,
            size,
            price: None,
            callback_ratio: None,
            trigger_price,
            trigger_type,
            side,
            trade_side: None,
            order_type,
            client_oid: None,
            reduce_only: None,
            stop_surplus_trigger_price: None,
            stop_surplus_execute_price: None,
            stop_surplus_trigger_type: None,
            stop_loss_trigger_price: None,
            stop_loss_execute_price: None,
            stop_loss_trigger_type: None,
            stp_mode: None,
        }
    }
}
/// Trigger order type. Options: normal_plan (average trigger order), track_plan (trailing stop order). 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlanType {
    #[serde(rename = "normal_plan")]
    NormalPlan,
    #[serde(rename = "track_plan")]
    TrackPlan,
}

impl Default for PlanType {
    fn default() -> PlanType {
        Self::NormalPlan
    }
}
/// Product type options. - USDT-FUTURES: USDT professional futures - COIN-FUTURES: Mixed futures - USDC-FUTURES: USDC professional futures - SUSDT-FUTURES: USDT professional futures demo - SCOIN-FUTURES: Mixed futures demo - SUSDC-FUTURES: USDC professional futures demo 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProductType {
    #[serde(rename = "USDT-FUTURES")]
    UsdtFutures,
    #[serde(rename = "COIN-FUTURES")]
    CoinFutures,
    #[serde(rename = "USDC-FUTURES")]
    UsdcFutures,
    #[serde(rename = "SUSDT-FUTURES")]
    SusdtFutures,
    #[serde(rename = "SCOIN-FUTURES")]
    ScoinFutures,
    #[serde(rename = "SUSDC-FUTURES")]
    SusdcFutures,
}

impl Default for ProductType {
    fn default() -> ProductType {
        Self::UsdtFutures
    }
}
/// Position mode. Options: isolated (isolated margin), cross (cross margin). 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MarginMode {
    #[serde(rename = "isolated")]
    Isolated,
    #[serde(rename = "cross")]
    Cross,
}

impl Default for MarginMode {
    fn default() -> MarginMode {
        Self::Isolated
    }
}
/// Trigger type options. Required for trigger and trailing stop orders. - mark_price: mark price - fill_price: filled price 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerType {
    #[serde(rename = "mark_price")]
    MarkPrice,
    #[serde(rename = "fill_price")]
    FillPrice,
}

impl Default for TriggerType {
    fn default() -> TriggerType {
        Self::MarkPrice
    }
}
/// Order direction: Buy or Sell.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "Buy")]
    Buy,
    #[serde(rename = "Sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Direction in hedge mode position. For open positions, tradeSide should be \"Open\"; for close positions, \"Close\". Examples:   - For open long, side=\"Buy\" and tradeSide=\"Open\".   - For close long, side=\"Buy\" and tradeSide=\"Close\". 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TradeSide {
    #[serde(rename = "Open")]
    Open,
    #[serde(rename = "Close")]
    Close,
}

impl Default for TradeSide {
    fn default() -> TradeSide {
        Self::Open
    }
}
/// Order type. For trailing stop orders, must be market. For ordinary trigger orders, can be limit or market. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "limit")]
    Limit,
    #[serde(rename = "market")]
    Market,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Limit
    }
}
/// Whether to reduce position only. Options: YES, NO. Default: NO. Only applicable in one-way position mode, must be empty or \"no\" in hedge mode. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReduceOnly {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

impl Default for ReduceOnly {
    fn default() -> ReduceOnly {
        Self::True
    }
}
/// Take-profit trigger type, defaults to transaction price. Options:   - fill_price: filled price   - mark_price: mark price   - index_price: index price Required if stopSurplusTriggerPrice is set. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StopSurplusTriggerType {
    #[serde(rename = "fill_price")]
    FillPrice,
    #[serde(rename = "mark_price")]
    MarkPrice,
    #[serde(rename = "index_price")]
    IndexPrice,
}

impl Default for StopSurplusTriggerType {
    fn default() -> StopSurplusTriggerType {
        Self::FillPrice
    }
}
/// Stop-loss trigger type, defaults to transaction price. Options:   - fill_price: filled price   - mark_price: mark price   - index_price: index price Required if stopLossTriggerPrice is set. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StopLossTriggerType {
    #[serde(rename = "fill_price")]
    FillPrice,
    #[serde(rename = "mark_price")]
    MarkPrice,
    #[serde(rename = "index_price")]
    IndexPrice,
}

impl Default for StopLossTriggerType {
    fn default() -> StopLossTriggerType {
        Self::FillPrice
    }
}
/// STP Mode, default is 'none'. Options:   - none: no STP setting   - cancel_taker: cancel taker order   - cancel_maker: cancel maker order   - cancel_both: cancel both taker and maker orders 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StpMode {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "cancel_taker")]
    CancelTaker,
    #[serde(rename = "cancel_maker")]
    CancelMaker,
    #[serde(rename = "cancel_both")]
    CancelBoth,
}

impl Default for StpMode {
    fn default() -> StpMode {
        Self::None
    }
}

