/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MergeDepth {
    /// List of ask orders
    #[serde(rename = "asks", skip_serializing_if = "Option::is_none")]
    pub asks: Option<Vec<Vec<String>>>,
    /// List of bid orders
    #[serde(rename = "bids", skip_serializing_if = "Option::is_none")]
    pub bids: Option<Vec<Vec<String>>>,
    /// Current time Unix millisecond timestamp
    #[serde(rename = "ts", skip_serializing_if = "Option::is_none")]
    pub ts: Option<String>,
    /// Scale level used in the response
    #[serde(rename = "scale", skip_serializing_if = "Option::is_none")]
    pub scale: Option<String>,
    /// Price precision level
    #[serde(rename = "precision", skip_serializing_if = "Option::is_none")]
    pub precision: Option<String>,
    /// Indicates if this is the maximum precision
    #[serde(rename = "isMaxPrecision", skip_serializing_if = "Option::is_none")]
    pub is_max_precision: Option<String>,
}

impl MergeDepth {
    pub fn new() -> MergeDepth {
        MergeDepth {
            asks: None,
            bids: None,
            ts: None,
            scale: None,
            precision: None,
            is_max_precision: None,
        }
    }
}

