/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TradeFillsResponse {
    /// User identifier.
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// Trading pair (e.g., BTCUSDT).
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Unique identifier for the order.
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// Unique identifier for the trade.
    #[serde(rename = "tradeId", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<String>,
    /// Type of the order (e.g., market, limit).
    #[serde(rename = "orderType", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<String>,
    /// Direction of the order (buy/sell).
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<String>,
    /// Average price at which the order was executed.
    #[serde(rename = "priceAvg", skip_serializing_if = "Option::is_none")]
    pub price_avg: Option<String>,
    /// Size of the order.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// Amount involved in the trade.
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    #[serde(rename = "feeDetail", skip_serializing_if = "Option::is_none")]
    pub fee_detail: Option<Box<models::TradeFillsResponseFeeDetail>>,
    /// Scope of the trade (e.g., taker, maker).
    #[serde(rename = "tradeScope", skip_serializing_if = "Option::is_none")]
    pub trade_scope: Option<String>,
    /// Creation time of the order (Unix millisecond timestamp).
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
    /// Last update time of the order (Unix millisecond timestamp).
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
}

impl TradeFillsResponse {
    pub fn new() -> TradeFillsResponse {
        TradeFillsResponse {
            user_id: None,
            symbol: None,
            order_id: None,
            trade_id: None,
            order_type: None,
            side: None,
            price_avg: None,
            size: None,
            amount: None,
            fee_detail: None,
            trade_scope: None,
            c_time: None,
            u_time: None,
        }
    }
}

