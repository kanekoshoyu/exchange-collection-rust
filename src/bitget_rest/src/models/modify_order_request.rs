/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModifyOrderRequest {
    /// Either 'orderId' or 'clientOid' is required.
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// Either 'orderId' or 'clientOid' is required.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// Trigger price.
    #[serde(rename = "triggerPrice")]
    pub trigger_price: String,
    /// Type of order.
    #[serde(rename = "orderType")]
    pub order_type: OrderType,
    /// Execution price (required when orderType is limit).
    #[serde(rename = "executePrice", skip_serializing_if = "Option::is_none")]
    pub execute_price: Option<String>,
    /// Quantity to buy. If `planType=amount`, the quote currency is the base coin. If `planType=total`, the quote currency is the quote coin.
    #[serde(rename = "size")]
    pub size: String,
}

impl ModifyOrderRequest {
    pub fn new(trigger_price: String, order_type: OrderType, size: String) -> ModifyOrderRequest {
        ModifyOrderRequest {
            order_id: None,
            client_oid: None,
            trigger_price,
            order_type,
            execute_price: None,
            size,
        }
    }
}
/// Type of order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "limit")]
    Limit,
    #[serde(rename = "market")]
    Market,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Limit
    }
}

