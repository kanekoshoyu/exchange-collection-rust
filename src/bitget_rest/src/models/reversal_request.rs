/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReversalRequest {
    /// The trading pair symbol, e.g., \"ETHUSDT\".
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// The margin coin, e.g., \"USDT\".
    #[serde(rename = "marginCoin")]
    pub margin_coin: String,
    /// The product type.
    #[serde(rename = "productType")]
    pub product_type: ProductType,
    /// The amount of the base coin.
    #[serde(rename = "size")]
    pub size: String,
    /// The order direction.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// The direction of the trade. Required for open and close positions in hedge mode.
    #[serde(rename = "tradeSide", skip_serializing_if = "Option::is_none")]
    pub trade_side: Option<TradeSide>,
    /// A customized order ID.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
}

impl ReversalRequest {
    pub fn new(symbol: String, margin_coin: String, product_type: ProductType, size: String) -> ReversalRequest {
        ReversalRequest {
            symbol,
            margin_coin,
            product_type,
            size,
            side: None,
            trade_side: None,
            client_oid: None,
        }
    }
}
/// The product type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProductType {
    #[serde(rename = "USDT-FUTURES")]
    UsdtFutures,
    #[serde(rename = "COIN-FUTURES")]
    CoinFutures,
    #[serde(rename = "USDC-FUTURES")]
    UsdcFutures,
    #[serde(rename = "SUSDT-FUTURES")]
    SusdtFutures,
    #[serde(rename = "SCOIN-FUTURES")]
    ScoinFutures,
    #[serde(rename = "SUSDC-FUTURES")]
    SusdcFutures,
}

impl Default for ProductType {
    fn default() -> ProductType {
        Self::UsdtFutures
    }
}
/// The order direction.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// The direction of the trade. Required for open and close positions in hedge mode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TradeSide {
    #[serde(rename = "Open")]
    Open,
    #[serde(rename = "Close")]
    Close,
}

impl Default for TradeSide {
    fn default() -> TradeSide {
        Self::Open
    }
}

