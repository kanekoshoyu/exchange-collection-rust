/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchPlaceRequestOrderListInner {
    /// Trading pair name, e.g. BTCUSDT. Not required when batchMode is 'single'.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Order direction. Can be 'buy' or 'sell'.
    #[serde(rename = "side")]
    pub side: Side,
    /// Order type. Can be 'limit' for limit orders or 'market' for market orders.
    #[serde(rename = "orderType")]
    pub order_type: OrderType,
    /// Execution strategy. This is invalid when orderType is 'market'.
    #[serde(rename = "force")]
    pub force: Force,
    /// Limit price. The decimal places of price and the price step can be returned by the Get Symbol Info interface.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// Amount. For limit and market-sell orders, it represents the number of base coins. For market-buy orders, it represents the number of quote coins. The decimal places of amount can be obtained through the Get Symbol Info interface.
    #[serde(rename = "size")]
    pub size: String,
    /// Custom order ID. The idempotency time is 6 hours, only valid when orders are unfilled.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// STP mode. Default is 'none'.
    #[serde(rename = "stpMode", skip_serializing_if = "Option::is_none")]
    pub stp_mode: Option<StpMode>,
    /// Take profit price. The decimal places of price and the price step can be returned by the Get Symbol Info interface.
    #[serde(rename = "presetTakeProfitPrice", skip_serializing_if = "Option::is_none")]
    pub preset_take_profit_price: Option<String>,
    /// Take profit execute price. The decimal places of price and the price step can be returned by the Get Symbol Info interface.
    #[serde(rename = "executeTakeProfitPrice", skip_serializing_if = "Option::is_none")]
    pub execute_take_profit_price: Option<String>,
    /// Stop loss price. The decimal places of price and the price step can be returned by the Get Symbol Info interface.
    #[serde(rename = "presetStopLossPrice", skip_serializing_if = "Option::is_none")]
    pub preset_stop_loss_price: Option<String>,
    /// Stop loss execute price. The decimal places of price and the price step can be returned by the Get Symbol Info interface.
    #[serde(rename = "executeStopLossPrice", skip_serializing_if = "Option::is_none")]
    pub execute_stop_loss_price: Option<String>,
}

impl BatchPlaceRequestOrderListInner {
    pub fn new(side: Side, order_type: OrderType, force: Force, size: String) -> BatchPlaceRequestOrderListInner {
        BatchPlaceRequestOrderListInner {
            symbol: None,
            side,
            order_type,
            force,
            price: None,
            size,
            client_oid: None,
            stp_mode: None,
            preset_take_profit_price: None,
            execute_take_profit_price: None,
            preset_stop_loss_price: None,
            execute_stop_loss_price: None,
        }
    }
}
/// Order direction. Can be 'buy' or 'sell'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Order type. Can be 'limit' for limit orders or 'market' for market orders.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "limit")]
    Limit,
    #[serde(rename = "market")]
    Market,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Limit
    }
}
/// Execution strategy. This is invalid when orderType is 'market'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Force {
    #[serde(rename = "gtc")]
    Gtc,
    #[serde(rename = "post_only")]
    PostOnly,
    #[serde(rename = "fok")]
    Fok,
    #[serde(rename = "ioc")]
    Ioc,
}

impl Default for Force {
    fn default() -> Force {
        Self::Gtc
    }
}
/// STP mode. Default is 'none'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StpMode {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "cancel_taker")]
    CancelTaker,
    #[serde(rename = "cancel_maker")]
    CancelMaker,
    #[serde(rename = "cancel_both")]
    CancelBoth,
}

impl Default for StpMode {
    fn default() -> StpMode {
        Self::None
    }
}

