/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CancelAllOrderRequest {
    /// Trading pair, e.g., ETHUSDT.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Product type. Possible values include: - `USDT-FUTURES`: USDT professional futures - `COIN-FUTURES`: Mixed futures - `USDC-FUTURES`: USDC professional futures - `SUSDT-FUTURES`: USDT professional futures demo - `SCOIN-FUTURES`: Mixed futures demo - `SUSDC-FUTURES`: USDC professional futures demo 
    #[serde(rename = "productType")]
    pub product_type: ProductType,
    /// Margin coin, must be capitalized.
    #[serde(rename = "marginCoin", skip_serializing_if = "Option::is_none")]
    pub margin_coin: Option<String>,
    /// Request time in Unix millisecond timestamp format.
    #[serde(rename = "requestTime", skip_serializing_if = "Option::is_none")]
    pub request_time: Option<String>,
    /// Valid window period in Unix millisecond timestamp format.
    #[serde(rename = "receiveWindow", skip_serializing_if = "Option::is_none")]
    pub receive_window: Option<String>,
}

impl CancelAllOrderRequest {
    pub fn new(product_type: ProductType) -> CancelAllOrderRequest {
        CancelAllOrderRequest {
            symbol: None,
            product_type,
            margin_coin: None,
            request_time: None,
            receive_window: None,
        }
    }
}
/// Product type. Possible values include: - `USDT-FUTURES`: USDT professional futures - `COIN-FUTURES`: Mixed futures - `USDC-FUTURES`: USDC professional futures - `SUSDT-FUTURES`: USDT professional futures demo - `SCOIN-FUTURES`: Mixed futures demo - `SUSDC-FUTURES`: USDC professional futures demo 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProductType {
    #[serde(rename = "USDT-FUTURES")]
    UsdtFutures,
    #[serde(rename = "COIN-FUTURES")]
    CoinFutures,
    #[serde(rename = "USDC-FUTURES")]
    UsdcFutures,
    #[serde(rename = "SUSDT-FUTURES")]
    SusdtFutures,
    #[serde(rename = "SCOIN-FUTURES")]
    ScoinFutures,
    #[serde(rename = "SUSDC-FUTURES")]
    SusdcFutures,
}

impl Default for ProductType {
    fn default() -> ProductType {
        Self::UsdtFutures
    }
}

