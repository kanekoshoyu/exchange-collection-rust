/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubTransferRequest {
    /// Source account type for the transfer.
    #[serde(rename = "fromType", skip_serializing_if = "Option::is_none")]
    pub from_type: Option<FromType>,
    /// Destination account type for the transfer.
    #[serde(rename = "toType", skip_serializing_if = "Option::is_none")]
    pub to_type: Option<ToType>,
    /// Amount to transfer.
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// Currency of the transfer, e.g., USDT.
    #[serde(rename = "coin", skip_serializing_if = "Option::is_none")]
    pub coin: Option<String>,
    /// Required when transferring to or from an account type that is a leveraged position-by-position account.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Custom order ID. Must be unique; duplicate clientOids will return results of the existing clientOid transfer.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// Outgoing Account UID
    #[serde(rename = "fromUserId", skip_serializing_if = "Option::is_none")]
    pub from_user_id: Option<String>,
    /// Incoming Account UID
    #[serde(rename = "toUserId", skip_serializing_if = "Option::is_none")]
    pub to_user_id: Option<String>,
}

impl SubTransferRequest {
    pub fn new() -> SubTransferRequest {
        SubTransferRequest {
            from_type: None,
            to_type: None,
            amount: None,
            coin: None,
            symbol: None,
            client_oid: None,
            from_user_id: None,
            to_user_id: None,
        }
    }
}
/// Source account type for the transfer.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FromType {
    #[serde(rename = "spot")]
    Spot,
    #[serde(rename = "p2p")]
    P2p,
    #[serde(rename = "coin_futures")]
    CoinFutures,
    #[serde(rename = "usdt_futures")]
    UsdtFutures,
    #[serde(rename = "usdc_futures")]
    UsdcFutures,
    #[serde(rename = "crossed_margin")]
    CrossedMargin,
    #[serde(rename = "isolated_margin")]
    IsolatedMargin,
}

impl Default for FromType {
    fn default() -> FromType {
        Self::Spot
    }
}
/// Destination account type for the transfer.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ToType {
    #[serde(rename = "spot")]
    Spot,
    #[serde(rename = "p2p")]
    P2p,
    #[serde(rename = "coin_futures")]
    CoinFutures,
    #[serde(rename = "usdt_futures")]
    UsdtFutures,
    #[serde(rename = "usdc_futures")]
    UsdcFutures,
    #[serde(rename = "crossed_margin")]
    CrossedMargin,
    #[serde(rename = "isolated_margin")]
    IsolatedMargin,
}

impl Default for ToType {
    fn default() -> ToType {
        Self::Spot
    }
}

