/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchOrdersRequestOrderListInner {
    /// The amount for the order.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// The order direction.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Specifies whether the trade is opening or closing a position.
    #[serde(rename = "tradeSide", skip_serializing_if = "Option::is_none")]
    pub trade_side: Option<TradeSide>,
    /// The type of order.
    #[serde(rename = "orderType", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<OrderType>,
    /// Order expiration type.
    #[serde(rename = "force", skip_serializing_if = "Option::is_none")]
    pub force: Option<Force>,
    /// Custom order ID.
    #[serde(rename = "clientOid", skip_serializing_if = "Option::is_none")]
    pub client_oid: Option<String>,
    /// Whether to reduce the position only, applicable in one-way mode.
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<ReduceOnly>,
    /// The take-profit price.
    #[serde(rename = "presetStopSurplusPrice", skip_serializing_if = "Option::is_none")]
    pub preset_stop_surplus_price: Option<String>,
    /// The stop-loss price.
    #[serde(rename = "presetStopLossPrice", skip_serializing_if = "Option::is_none")]
    pub preset_stop_loss_price: Option<String>,
}

impl BatchOrdersRequestOrderListInner {
    pub fn new() -> BatchOrdersRequestOrderListInner {
        BatchOrdersRequestOrderListInner {
            size: None,
            side: None,
            trade_side: None,
            order_type: None,
            force: None,
            client_oid: None,
            reduce_only: None,
            preset_stop_surplus_price: None,
            preset_stop_loss_price: None,
        }
    }
}
/// The order direction.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Specifies whether the trade is opening or closing a position.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TradeSide {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "close")]
    Close,
}

impl Default for TradeSide {
    fn default() -> TradeSide {
        Self::Open
    }
}
/// The type of order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "limit")]
    Limit,
    #[serde(rename = "market")]
    Market,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Limit
    }
}
/// Order expiration type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Force {
    #[serde(rename = "gtc")]
    Gtc,
    #[serde(rename = "ioc")]
    Ioc,
    #[serde(rename = "fok")]
    Fok,
    #[serde(rename = "post_only")]
    PostOnly,
}

impl Default for Force {
    fn default() -> Force {
        Self::Gtc
    }
}
/// Whether to reduce the position only, applicable in one-way mode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReduceOnly {
    #[serde(rename = "YES")]
    Yes,
    #[serde(rename = "NO")]
    No,
}

impl Default for ReduceOnly {
    fn default() -> ReduceOnly {
        Self::Yes
    }
}

