/*
 * Bitget API
 *
 * Welcome to Bitget Developer document! 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InterestHistoryResponse {
    /// Next settlement time in Unix milliseconds format
    #[serde(rename = "nextSettleTime", skip_serializing_if = "Option::is_none")]
    pub next_settle_time: Option<String>,
    /// Total amount borrowed
    #[serde(rename = "borrowAmount", skip_serializing_if = "Option::is_none")]
    pub borrow_amount: Option<String>,
    /// Maximum borrowing limit
    #[serde(rename = "borrowLimit", skip_serializing_if = "Option::is_none")]
    pub borrow_limit: Option<String>,
    #[serde(rename = "interestList", skip_serializing_if = "Option::is_none")]
    pub interest_list: Option<Vec<models::InterestHistoryResponseInterestListInner>>,
    /// End identifier for pagination
    #[serde(rename = "endId", skip_serializing_if = "Option::is_none")]
    pub end_id: Option<String>,
}

impl InterestHistoryResponse {
    pub fn new() -> InterestHistoryResponse {
        InterestHistoryResponse {
            next_settle_time: None,
            borrow_amount: None,
            borrow_limit: None,
            interest_list: None,
            end_id: None,
        }
    }
}

