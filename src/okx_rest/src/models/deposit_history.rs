/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DepositHistory {
    /// Currency, e.g., BTC
    #[serde(rename = "ccy")]
    pub ccy: String,
    /// Chain name, e.g., USDT-ERC20, USDT-TRC20
    #[serde(rename = "chain")]
    pub chain: String,
    /// Deposit amount
    #[serde(rename = "amt")]
    pub amt: String,
    /// Deposit account. If the deposit comes from an internal transfer, this field displays the account information of the internal transfer initiator, which can be a mobile phone number, email address, account name, and will return an empty string (\"\") in other cases. 
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// If `from` is a phone number, this parameter returns the area code of the phone number.
    #[serde(rename = "areaCodeFrom", skip_serializing_if = "Option::is_none")]
    pub area_code_from: Option<String>,
    /// Deposit address. If the deposit comes from the on-chain, this field displays the on-chain address, and will return an empty string (\"\") in other cases. 
    #[serde(rename = "to", skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
    /// Hash record of the deposit.
    #[serde(rename = "txId", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<String>,
    /// The timestamp that the deposit record is created, Unix timestamp format in milliseconds, e.g., 1655251200000. 
    #[serde(rename = "ts")]
    pub ts: String,
    /// Status of deposit: - `0`: Waiting for confirmation   - `1`: Deposit credited   - `2`: Deposit successful   - `8`: Pending due to temporary deposit suspension on this cryptocurrency   - `11`: Match the address blacklist   - `12`: Account or deposit is frozen   - `13`: Sub-account deposit interception   - `14`: KYC limit 
    #[serde(rename = "state")]
    pub state: State,
    /// Deposit ID.
    #[serde(rename = "depId")]
    pub dep_id: String,
    /// Internal transfer initiator's withdrawal ID. If the deposit comes from an internal transfer, this field displays the withdrawal ID of the internal transfer initiator, and will return an empty string (\"\") in other cases. 
    #[serde(rename = "fromWdId", skip_serializing_if = "Option::is_none")]
    pub from_wd_id: Option<String>,
    /// The actual amount of blockchain confirmed in a single deposit.
    #[serde(rename = "actualDepBlkConfirm", skip_serializing_if = "Option::is_none")]
    pub actual_dep_blk_confirm: Option<String>,
}

impl DepositHistory {
    pub fn new(ccy: String, chain: String, amt: String, ts: String, state: State, dep_id: String) -> DepositHistory {
        DepositHistory {
            ccy,
            chain,
            amt,
            from: None,
            area_code_from: None,
            to: None,
            tx_id: None,
            ts,
            state,
            dep_id,
            from_wd_id: None,
            actual_dep_blk_confirm: None,
        }
    }
}
/// Status of deposit: - `0`: Waiting for confirmation   - `1`: Deposit credited   - `2`: Deposit successful   - `8`: Pending due to temporary deposit suspension on this cryptocurrency   - `11`: Match the address blacklist   - `12`: Account or deposit is frozen   - `13`: Sub-account deposit interception   - `14`: KYC limit 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "8")]
    Variant8,
    #[serde(rename = "11")]
    Variant11,
    #[serde(rename = "12")]
    Variant12,
    #[serde(rename = "13")]
    Variant13,
    #[serde(rename = "14")]
    Variant14,
}

impl Default for State {
    fn default() -> State {
        Self::Variant0
    }
}

