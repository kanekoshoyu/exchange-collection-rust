/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TradeOrderAlgoPostRequest {
    StopLossRequest(Box<models::StopLossRequest>),
    TriggerRequest(Box<models::TriggerRequest>),
    TrailingRequest(Box<models::TrailingRequest>),
    TwapRequest(Box<models::TwapRequest>),
}

impl Default for TradeOrderAlgoPostRequest {
    fn default() -> Self {
        Self::StopLossRequest(Default::default())
    }
}
/// Trade mode: Margin mode (cross, isolated), Non-Margin mode (cash), or spot_isolated for SPOT lead trading.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TdMode {
    #[serde(rename = "cross")]
    Cross,
    #[serde(rename = "isolated")]
    Isolated,
    #[serde(rename = "cash")]
    Cash,
    #[serde(rename = "spot_isolated")]
    SpotIsolated,
}

impl Default for TdMode {
    fn default() -> TdMode {
        Self::Cross
    }
}
/// Order side: buy or sell.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Position side. Required in long/short mode, and can only be long or short.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PosSide {
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "short")]
    Short,
}

impl Default for PosSide {
    fn default() -> PosSide {
        Self::Long
    }
}
/// Order type: conditional, oco, trigger, move_order_stop, or twap.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrdType {
    #[serde(rename = "conditional")]
    Conditional,
    #[serde(rename = "oco")]
    Oco,
    #[serde(rename = "trigger")]
    Trigger,
    #[serde(rename = "move_order_stop")]
    MoveOrderStop,
    #[serde(rename = "twap")]
    Twap,
}

impl Default for OrdType {
    fn default() -> OrdType {
        Self::Conditional
    }
}
/// Order quantity unit setting for sz. Only applicable to SPOT traded with Market buy conditional order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TgtCcy {
    #[serde(rename = "base_ccy")]
    BaseCcy,
    #[serde(rename = "quote_ccy")]
    QuoteCcy,
}

impl Default for TgtCcy {
    fn default() -> TgtCcy {
        Self::BaseCcy
    }
}
/// Take-profit trigger price type: last price, index price, or mark price. Default is 'last'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TpTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for TpTriggerPxType {
    fn default() -> TpTriggerPxType {
        Self::Last
    }
}
/// Take-profit order kind: condition or limit. Default is 'condition'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TpOrdKind {
    #[serde(rename = "condition")]
    Condition,
    #[serde(rename = "limit")]
    Limit,
}

impl Default for TpOrdKind {
    fn default() -> TpOrdKind {
        Self::Condition
    }
}
/// Stop-loss trigger price type: last price, index price, or mark price. Default is 'last'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SlTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for SlTriggerPxType {
    fn default() -> SlTriggerPxType {
        Self::Last
    }
}
/// Quick Margin type. Only applicable to Quick Margin Mode of isolated margin.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum QuickMgnType {
    #[serde(rename = "manual")]
    Manual,
    #[serde(rename = "auto_borrow")]
    AutoBorrow,
    #[serde(rename = "auto_repay")]
    AutoRepay,
}

impl Default for QuickMgnType {
    fn default() -> QuickMgnType {
        Self::Manual
    }
}

