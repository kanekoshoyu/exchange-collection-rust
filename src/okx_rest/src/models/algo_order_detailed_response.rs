/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlgoOrderDetailedResponse {
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<String>,
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    #[serde(rename = "ccy", skip_serializing_if = "Option::is_none")]
    pub ccy: Option<String>,
    /// Latest order ID (deprecated soon).
    #[serde(rename = "ordId", skip_serializing_if = "Option::is_none")]
    pub ord_id: Option<String>,
    #[serde(rename = "ordIdList", skip_serializing_if = "Option::is_none")]
    pub ord_id_list: Option<Vec<String>>,
    #[serde(rename = "algoId", skip_serializing_if = "Option::is_none")]
    pub algo_id: Option<String>,
    #[serde(rename = "clOrdId", skip_serializing_if = "Option::is_none")]
    pub cl_ord_id: Option<String>,
    #[serde(rename = "sz", skip_serializing_if = "Option::is_none")]
    pub sz: Option<String>,
    #[serde(rename = "closeFraction", skip_serializing_if = "Option::is_none")]
    pub close_fraction: Option<String>,
    #[serde(rename = "ordType", skip_serializing_if = "Option::is_none")]
    pub ord_type: Option<String>,
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<String>,
    #[serde(rename = "posSide", skip_serializing_if = "Option::is_none")]
    pub pos_side: Option<String>,
    #[serde(rename = "tdMode", skip_serializing_if = "Option::is_none")]
    pub td_mode: Option<String>,
    #[serde(rename = "tgtCcy", skip_serializing_if = "Option::is_none")]
    pub tgt_ccy: Option<TgtCcy>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "lever", skip_serializing_if = "Option::is_none")]
    pub lever: Option<String>,
    #[serde(rename = "tpTriggerPx", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px: Option<String>,
    #[serde(rename = "tpTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px_type: Option<TpTriggerPxType>,
    #[serde(rename = "tpOrdPx", skip_serializing_if = "Option::is_none")]
    pub tp_ord_px: Option<String>,
    #[serde(rename = "slTriggerPx", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px: Option<String>,
    #[serde(rename = "slTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px_type: Option<SlTriggerPxType>,
    #[serde(rename = "slOrdPx", skip_serializing_if = "Option::is_none")]
    pub sl_ord_px: Option<String>,
    #[serde(rename = "triggerPx", skip_serializing_if = "Option::is_none")]
    pub trigger_px: Option<String>,
    #[serde(rename = "triggerPxType", skip_serializing_if = "Option::is_none")]
    pub trigger_px_type: Option<TriggerPxType>,
    #[serde(rename = "ordPx", skip_serializing_if = "Option::is_none")]
    pub ord_px: Option<String>,
    #[serde(rename = "actualSz", skip_serializing_if = "Option::is_none")]
    pub actual_sz: Option<String>,
    #[serde(rename = "actualPx", skip_serializing_if = "Option::is_none")]
    pub actual_px: Option<String>,
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(rename = "actualSide", skip_serializing_if = "Option::is_none")]
    pub actual_side: Option<ActualSide>,
    /// Unix timestamp in milliseconds.
    #[serde(rename = "triggerTime", skip_serializing_if = "Option::is_none")]
    pub trigger_time: Option<String>,
    #[serde(rename = "pxVar", skip_serializing_if = "Option::is_none")]
    pub px_var: Option<String>,
    #[serde(rename = "pxSpread", skip_serializing_if = "Option::is_none")]
    pub px_spread: Option<String>,
    #[serde(rename = "szLimit", skip_serializing_if = "Option::is_none")]
    pub sz_limit: Option<String>,
    #[serde(rename = "pxLimit", skip_serializing_if = "Option::is_none")]
    pub px_limit: Option<String>,
    #[serde(rename = "timeInterval", skip_serializing_if = "Option::is_none")]
    pub time_interval: Option<String>,
    #[serde(rename = "callbackRatio", skip_serializing_if = "Option::is_none")]
    pub callback_ratio: Option<String>,
    #[serde(rename = "callbackSpread", skip_serializing_if = "Option::is_none")]
    pub callback_spread: Option<String>,
    #[serde(rename = "activePx", skip_serializing_if = "Option::is_none")]
    pub active_px: Option<String>,
    #[serde(rename = "moveTriggerPx", skip_serializing_if = "Option::is_none")]
    pub move_trigger_px: Option<String>,
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<bool>,
    #[serde(rename = "quickMgnType", skip_serializing_if = "Option::is_none")]
    pub quick_mgn_type: Option<QuickMgnType>,
    #[serde(rename = "last", skip_serializing_if = "Option::is_none")]
    pub last: Option<String>,
    #[serde(rename = "failCode", skip_serializing_if = "Option::is_none")]
    pub fail_code: Option<String>,
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    #[serde(rename = "amendPxOnTriggerType", skip_serializing_if = "Option::is_none")]
    pub amend_px_on_trigger_type: Option<AmendPxOnTriggerType>,
    #[serde(rename = "attachAlgoOrds", skip_serializing_if = "Option::is_none")]
    pub attach_algo_ords: Option<Vec<models::AlgoOrderDetailedResponseAttachAlgoOrdsInner>>,
    #[serde(rename = "linkedOrd", skip_serializing_if = "Option::is_none")]
    pub linked_ord: Option<Box<models::FiatCancelWithdrawalPostRequest>>,
    /// Creation time in Unix timestamp (milliseconds).
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
    /// Updated time in Unix timestamp (milliseconds).
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
    /// Indicates auto-borrow for trade.
    #[serde(rename = "isTradeBorrowMode", skip_serializing_if = "Option::is_none")]
    pub is_trade_borrow_mode: Option<bool>,
}

impl AlgoOrderDetailedResponse {
    pub fn new() -> AlgoOrderDetailedResponse {
        AlgoOrderDetailedResponse {
            inst_type: None,
            inst_id: None,
            ccy: None,
            ord_id: None,
            ord_id_list: None,
            algo_id: None,
            cl_ord_id: None,
            sz: None,
            close_fraction: None,
            ord_type: None,
            side: None,
            pos_side: None,
            td_mode: None,
            tgt_ccy: None,
            state: None,
            lever: None,
            tp_trigger_px: None,
            tp_trigger_px_type: None,
            tp_ord_px: None,
            sl_trigger_px: None,
            sl_trigger_px_type: None,
            sl_ord_px: None,
            trigger_px: None,
            trigger_px_type: None,
            ord_px: None,
            actual_sz: None,
            actual_px: None,
            tag: None,
            actual_side: None,
            trigger_time: None,
            px_var: None,
            px_spread: None,
            sz_limit: None,
            px_limit: None,
            time_interval: None,
            callback_ratio: None,
            callback_spread: None,
            active_px: None,
            move_trigger_px: None,
            reduce_only: None,
            quick_mgn_type: None,
            last: None,
            fail_code: None,
            algo_cl_ord_id: None,
            amend_px_on_trigger_type: None,
            attach_algo_ords: None,
            linked_ord: None,
            c_time: None,
            u_time: None,
            is_trade_borrow_mode: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TgtCcy {
    #[serde(rename = "base_ccy")]
    BaseCcy,
    #[serde(rename = "quote_ccy")]
    QuoteCcy,
}

impl Default for TgtCcy {
    fn default() -> TgtCcy {
        Self::BaseCcy
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "live")]
    Live,
    #[serde(rename = "pause")]
    Pause,
    #[serde(rename = "partially_effective")]
    PartiallyEffective,
    #[serde(rename = "effective")]
    Effective,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "order_failed")]
    OrderFailed,
    #[serde(rename = "partially_failed")]
    PartiallyFailed,
}

impl Default for State {
    fn default() -> State {
        Self::Live
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TpTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for TpTriggerPxType {
    fn default() -> TpTriggerPxType {
        Self::Last
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SlTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for SlTriggerPxType {
    fn default() -> SlTriggerPxType {
        Self::Last
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for TriggerPxType {
    fn default() -> TriggerPxType {
        Self::Last
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ActualSide {
    #[serde(rename = "tp")]
    Tp,
    #[serde(rename = "sl")]
    Sl,
}

impl Default for ActualSide {
    fn default() -> ActualSide {
        Self::Tp
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum QuickMgnType {
    #[serde(rename = "manual")]
    Manual,
    #[serde(rename = "auto_borrow")]
    AutoBorrow,
    #[serde(rename = "auto_repay")]
    AutoRepay,
}

impl Default for QuickMgnType {
    fn default() -> QuickMgnType {
        Self::Manual
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AmendPxOnTriggerType {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for AmendPxOnTriggerType {
    fn default() -> AmendPxOnTriggerType {
        Self::Variant0
    }
}

