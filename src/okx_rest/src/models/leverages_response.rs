/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LeveragesResponse {
    /// Instrument ID set successfully.
    #[serde(rename = "succInstId", skip_serializing_if = "Option::is_none")]
    pub succ_inst_id: Option<String>,
    /// Instrument ID set unsuccessfully.
    #[serde(rename = "failInstId", skip_serializing_if = "Option::is_none")]
    pub fail_inst_id: Option<String>,
    /// Result of the operation.
    #[serde(rename = "result")]
    pub result: Result,
}

impl LeveragesResponse {
    pub fn new(result: Result) -> LeveragesResponse {
        LeveragesResponse {
            succ_inst_id: None,
            fail_inst_id: None,
            result,
        }
    }
}
/// Result of the operation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Result {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for Result {
    fn default() -> Result {
        Self::Variant0
    }
}

