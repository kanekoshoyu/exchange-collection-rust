/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WithdrawalRequestRcvrInfo : Recipient information, required for specific entity users for on-chain or lightning withdrawals. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WithdrawalRequestRcvrInfo {
    /// Wallet type:   - `exchange`: Withdraw to exchange wallet   - `private`: Withdraw to private wallet   For `exchange`, additional recipient information is required. 
    #[serde(rename = "walletType", skip_serializing_if = "Option::is_none")]
    pub wallet_type: Option<WalletType>,
    /// Exchange ID. Query supported exchanges through the \"Get exchange list\" endpoint.   If the exchange is not listed, use `0`.   Required if `walletType` is `exchange`. 
    #[serde(rename = "exchId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub exch_id: Option<Option<String>>,
    /// Receiver's first name, e.g., Bruce.   Required if `walletType` is `exchange`. 
    #[serde(rename = "rcvrFirstName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rcvr_first_name: Option<Option<String>>,
    /// Receiver's last name, e.g., Wayne.   Required if `walletType` is `exchange`. 
    #[serde(rename = "rcvrLastName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rcvr_last_name: Option<Option<String>>,
    /// Recipient's country, e.g., United States.   Use an English country name or a two-letter ISO 3166-1 code.   Required if `walletType` is `exchange`. 
    #[serde(rename = "rcvrCountry", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rcvr_country: Option<Option<String>>,
    /// State/Province of the recipient, e.g., California.   Required if `walletType` is `exchange`. 
    #[serde(rename = "rcvrCountrySubDivision", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rcvr_country_sub_division: Option<Option<String>>,
    /// The town/city where the recipient is located, e.g., San Jose.   Required if `walletType` is `exchange`. 
    #[serde(rename = "rcvrTownName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rcvr_town_name: Option<Option<String>>,
    /// Recipient's street address, e.g., Clementi Avenue 1.   Required if `walletType` is `exchange`. 
    #[serde(rename = "rcvrStreetName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rcvr_street_name: Option<Option<String>>,
}

impl WithdrawalRequestRcvrInfo {
    /// Recipient information, required for specific entity users for on-chain or lightning withdrawals. 
    pub fn new() -> WithdrawalRequestRcvrInfo {
        WithdrawalRequestRcvrInfo {
            wallet_type: None,
            exch_id: None,
            rcvr_first_name: None,
            rcvr_last_name: None,
            rcvr_country: None,
            rcvr_country_sub_division: None,
            rcvr_town_name: None,
            rcvr_street_name: None,
        }
    }
}
/// Wallet type:   - `exchange`: Withdraw to exchange wallet   - `private`: Withdraw to private wallet   For `exchange`, additional recipient information is required. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WalletType {
    #[serde(rename = "exchange")]
    Exchange,
    #[serde(rename = "private")]
    Private,
}

impl Default for WalletType {
    fn default() -> WalletType {
        Self::Exchange
    }
}

