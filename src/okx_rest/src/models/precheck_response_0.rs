/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrecheckResponse {
    /// Instrument ID, e.g., BTC-USDT.
    #[serde(rename = "instrumentId", skip_serializing_if = "Option::is_none")]
    pub instrument_id: Option<String>,
    /// Trade mode: margin mode (cross, isolated), non-margin mode (cash), or spot lead trading (spot_isolated).
    #[serde(rename = "tdMode", skip_serializing_if = "Option::is_none")]
    pub td_mode: Option<TdMode>,
    /// Order side.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Position side. Required in long/short mode and only applicable to FUTURES/SWAP. Default is 'net'.
    #[serde(rename = "posSide", skip_serializing_if = "Option::is_none")]
    pub pos_side: Option<PosSide>,
    /// Order type.
    #[serde(rename = "ordType", skip_serializing_if = "Option::is_none")]
    pub ord_type: Option<OrdType>,
    /// Quantity to buy or sell.
    #[serde(rename = "sz", skip_serializing_if = "Option::is_none")]
    pub sz: Option<String>,
    /// Order price. Only applicable to limit, post_only, fok, ioc, mmp, or mmp_and_post_only orders.
    #[serde(rename = "px", skip_serializing_if = "Option::is_none")]
    pub px: Option<String>,
    /// Whether orders can only reduce position size. Default is false. Only applicable to MARGIN and FUTURES/SWAP orders in net mode.
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<bool>,
    /// Target currency. Applicable to SPOT Market Orders. Default is quote_ccy for buy, base_ccy for sell.
    #[serde(rename = "tgtCcy", skip_serializing_if = "Option::is_none")]
    pub tgt_ccy: Option<TgtCcy>,
    #[serde(rename = "attachAlgoOrds", skip_serializing_if = "Option::is_none")]
    pub attach_algo_ords: Option<Vec<models::PrecheckResponseAttachAlgoOrdsInner>>,
}

impl PrecheckResponse {
    pub fn new() -> PrecheckResponse {
        PrecheckResponse {
            instrument_id: None,
            td_mode: None,
            side: None,
            pos_side: None,
            ord_type: None,
            sz: None,
            px: None,
            reduce_only: None,
            tgt_ccy: None,
            attach_algo_ords: None,
        }
    }
}
/// Trade mode: margin mode (cross, isolated), non-margin mode (cash), or spot lead trading (spot_isolated).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TdMode {
    #[serde(rename = "cross")]
    Cross,
    #[serde(rename = "isolated")]
    Isolated,
    #[serde(rename = "cash")]
    Cash,
    #[serde(rename = "spot_isolated")]
    SpotIsolated,
}

impl Default for TdMode {
    fn default() -> TdMode {
        Self::Cross
    }
}
/// Order side.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Position side. Required in long/short mode and only applicable to FUTURES/SWAP. Default is 'net'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PosSide {
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "short")]
    Short,
}

impl Default for PosSide {
    fn default() -> PosSide {
        Self::Long
    }
}
/// Order type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrdType {
    #[serde(rename = "market")]
    Market,
    #[serde(rename = "limit")]
    Limit,
    #[serde(rename = "post_only")]
    PostOnly,
    #[serde(rename = "fok")]
    Fok,
    #[serde(rename = "ioc")]
    Ioc,
    #[serde(rename = "optimal_limit_ioc")]
    OptimalLimitIoc,
}

impl Default for OrdType {
    fn default() -> OrdType {
        Self::Market
    }
}
/// Target currency. Applicable to SPOT Market Orders. Default is quote_ccy for buy, base_ccy for sell.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TgtCcy {
    #[serde(rename = "base_ccy")]
    BaseCcy,
    #[serde(rename = "quote_ccy")]
    QuoteCcy,
}

impl Default for TgtCcy {
    fn default() -> TgtCcy {
        Self::BaseCcy
    }
}

