/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PreCheckResponse {
    /// Current adjusted / effective equity in USD.
    #[serde(rename = "adjEq")]
    pub adj_eq: String,
    /// Changed quantity of adjusted / effective equity in USD after placing the order.
    #[serde(rename = "adjEqChg", skip_serializing_if = "Option::is_none")]
    pub adj_eq_chg: Option<String>,
    /// Current initial margin requirement in USD.
    #[serde(rename = "imr")]
    pub imr: String,
    /// Changed quantity of initial margin requirement in USD after placing the order.
    #[serde(rename = "imrChg", skip_serializing_if = "Option::is_none")]
    pub imr_chg: Option<String>,
    /// Current maintenance margin requirement in USD.
    #[serde(rename = "mmr")]
    pub mmr: String,
    /// Changed quantity of maintenance margin requirement in USD after placing the order.
    #[serde(rename = "mmrChg", skip_serializing_if = "Option::is_none")]
    pub mmr_chg: Option<String>,
    /// Current margin ratio in USD.
    #[serde(rename = "mgnRatio")]
    pub mgn_ratio: String,
    /// Changed quantity of margin ratio in USD after placing the order.
    #[serde(rename = "mgnRatioChg", skip_serializing_if = "Option::is_none")]
    pub mgn_ratio_chg: Option<String>,
    /// Current available balance in margin coin currency, only applicable when auto borrow is off.
    #[serde(rename = "availBal")]
    pub avail_bal: String,
    /// Changed quantity of available balance after placing the order, only applicable when auto borrow is off.
    #[serde(rename = "availBalChg", skip_serializing_if = "Option::is_none")]
    pub avail_bal_chg: Option<String>,
    /// Current estimated liquidation price.
    #[serde(rename = "liqPx")]
    pub liq_px: String,
    /// Distance between estimated liquidation price and mark price after placing the order.
    #[serde(rename = "liqPxDiff", skip_serializing_if = "Option::is_none")]
    pub liq_px_diff: Option<String>,
    /// Distance rate between estimated liquidation price and mark price after placing the order.
    #[serde(rename = "liqPxDiffRatio", skip_serializing_if = "Option::is_none")]
    pub liq_px_diff_ratio: Option<String>,
    /// Current positive asset, only applicable to margin isolated position.
    #[serde(rename = "posBal", skip_serializing_if = "Option::is_none")]
    pub pos_bal: Option<String>,
    /// Positive asset of margin isolated position after placing the order.
    #[serde(rename = "posBalChg", skip_serializing_if = "Option::is_none")]
    pub pos_bal_chg: Option<String>,
    /// Current liabilities of currency. For cross, it is cross liabilities. For isolated position, it is isolated liabilities.
    #[serde(rename = "liab")]
    pub liab: String,
    /// Changed quantity of liabilities after placing the order. For cross, it is cross liabilities. For isolated position, it is isolated liabilities.
    #[serde(rename = "liabChg", skip_serializing_if = "Option::is_none")]
    pub liab_chg: Option<String>,
    /// Unit of changed liabilities quantity after placing the order. Only applicable to cross and in auto borrow.
    #[serde(rename = "liabChgCcy", skip_serializing_if = "Option::is_none")]
    pub liab_chg_ccy: Option<String>,
    /// Unit type of positive asset, only applicable to margin isolated position. The options are 1, 2, 3, or 4.
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl PreCheckResponse {
    pub fn new(adj_eq: String, imr: String, mmr: String, mgn_ratio: String, avail_bal: String, liq_px: String, liab: String, r#type: Type) -> PreCheckResponse {
        PreCheckResponse {
            adj_eq,
            adj_eq_chg: None,
            imr,
            imr_chg: None,
            mmr,
            mmr_chg: None,
            mgn_ratio,
            mgn_ratio_chg: None,
            avail_bal,
            avail_bal_chg: None,
            liq_px,
            liq_px_diff: None,
            liq_px_diff_ratio: None,
            pos_bal: None,
            pos_bal_chg: None,
            liab,
            liab_chg: None,
            liab_chg_ccy: None,
            r#type,
        }
    }
}
/// Unit type of positive asset, only applicable to margin isolated position. The options are 1, 2, 3, or 4.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
}

impl Default for Type {
    fn default() -> Type {
        Self::Variant1
    }
}

