/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateWithdrawal {
    /// Payment account id to withdraw to, retrieved from get withdrawal payment methods API.
    #[serde(rename = "paymentAcctId")]
    pub payment_acct_id: String,
    /// Currency for withdrawal, must match currency allowed for paymentMethod.
    #[serde(rename = "ccy")]
    pub ccy: String,
    /// Requested withdrawal amount before fees. Has to be less than or equal to 2 decimal points double.
    #[serde(rename = "amt")]
    pub amt: String,
    /// Payment method to use for withdrawal.
    #[serde(rename = "paymentMethod")]
    pub payment_method: PaymentMethod,
    /// Client-supplied ID, a combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.
    #[serde(rename = "clientId")]
    pub client_id: String,
}

impl CreateWithdrawal {
    pub fn new(payment_acct_id: String, ccy: String, amt: String, payment_method: PaymentMethod, client_id: String) -> CreateWithdrawal {
        CreateWithdrawal {
            payment_acct_id,
            ccy,
            amt,
            payment_method,
            client_id,
        }
    }
}
/// Payment method to use for withdrawal.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentMethod {
    #[serde(rename = "TR_BANKS")]
    TrBanks,
    #[serde(rename = "SEPA")]
    Sepa,
    #[serde(rename = "PIX")]
    Pix,
}

impl Default for PaymentMethod {
    fn default() -> PaymentMethod {
        Self::TrBanks
    }
}

