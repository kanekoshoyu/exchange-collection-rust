/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SignalPositionResponse {
    /// Unique identifier for the algorithm.
    #[serde(rename = "algoId")]
    pub algo_id: String,
    /// Client-supplied Algo ID. Used for potential extensions in the future.
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// Type of instrument (e.g., spot, futures, swap).
    #[serde(rename = "instType")]
    pub inst_type: String,
    /// Instrument ID, such as BTC-USDT-SWAP.
    #[serde(rename = "instId")]
    pub inst_id: String,
    /// Algo order creation time, in Unix timestamp format (milliseconds).
    #[serde(rename = "cTime")]
    pub c_time: String,
    /// Algo order last updated time, in Unix timestamp format (milliseconds).
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
    /// Average price of the open position.
    #[serde(rename = "avgPx")]
    pub avg_px: String,
    /// Margin currency.
    #[serde(rename = "ccy")]
    pub ccy: String,
    /// Leverage applied to the position.
    #[serde(rename = "lever")]
    pub lever: String,
    /// Estimated liquidation price.
    #[serde(rename = "liqPx", skip_serializing_if = "Option::is_none")]
    pub liq_px: Option<String>,
    /// Position side, currently supports `net`.
    #[serde(rename = "posSide")]
    pub pos_side: PosSide,
    /// Quantity of the position.
    #[serde(rename = "pos", skip_serializing_if = "Option::is_none")]
    pub pos: Option<String>,
    /// Margin mode, either cross or isolated.
    #[serde(rename = "mgnMode")]
    pub mgn_mode: MgnMode,
    /// Margin ratio.
    #[serde(rename = "mgnRatio", skip_serializing_if = "Option::is_none")]
    pub mgn_ratio: Option<String>,
    /// Initial margin requirement.
    #[serde(rename = "imr", skip_serializing_if = "Option::is_none")]
    pub imr: Option<String>,
    /// Maintenance margin requirement.
    #[serde(rename = "mmr", skip_serializing_if = "Option::is_none")]
    pub mmr: Option<String>,
    /// Unrealized profit and loss (PnL).
    #[serde(rename = "upl", skip_serializing_if = "Option::is_none")]
    pub upl: Option<String>,
    /// Unrealized profit and loss ratio.
    #[serde(rename = "uplRatio", skip_serializing_if = "Option::is_none")]
    pub upl_ratio: Option<String>,
    /// Latest traded price.
    #[serde(rename = "last", skip_serializing_if = "Option::is_none")]
    pub last: Option<String>,
    /// Notional value of the position in USD.
    #[serde(rename = "notionalUsd", skip_serializing_if = "Option::is_none")]
    pub notional_usd: Option<String>,
    /// Auto Decrease Line (ADL) signal area: - Divided into 5 levels (1-5). - Smaller numbers indicate weaker ADL intensity. 
    #[serde(rename = "adl", skip_serializing_if = "Option::is_none")]
    pub adl: Option<String>,
    /// Mark price of the instrument.
    #[serde(rename = "markPx", skip_serializing_if = "Option::is_none")]
    pub mark_px: Option<String>,
}

impl SignalPositionResponse {
    pub fn new(algo_id: String, inst_type: String, inst_id: String, c_time: String, avg_px: String, ccy: String, lever: String, pos_side: PosSide, mgn_mode: MgnMode) -> SignalPositionResponse {
        SignalPositionResponse {
            algo_id,
            algo_cl_ord_id: None,
            inst_type,
            inst_id,
            c_time,
            u_time: None,
            avg_px,
            ccy,
            lever,
            liq_px: None,
            pos_side,
            pos: None,
            mgn_mode,
            mgn_ratio: None,
            imr: None,
            mmr: None,
            upl: None,
            upl_ratio: None,
            last: None,
            notional_usd: None,
            adl: None,
            mark_px: None,
        }
    }
}
/// Position side, currently supports `net`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PosSide {
    #[serde(rename = "net")]
    Net,
}

impl Default for PosSide {
    fn default() -> PosSide {
        Self::Net
    }
}
/// Margin mode, either cross or isolated.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MgnMode {
    #[serde(rename = "cross")]
    Cross,
    #[serde(rename = "isolated")]
    Isolated,
}

impl Default for MgnMode {
    fn default() -> MgnMode {
        Self::Cross
    }
}

