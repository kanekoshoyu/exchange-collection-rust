/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Auction {
    /// Instrument ID.
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Equilibrium price.
    #[serde(rename = "eqPx", skip_serializing_if = "Option::is_none")]
    pub eq_px: Option<String>,
    /// Matched size for both buy and sell. The unit is in base currency.
    #[serde(rename = "matchedSz", skip_serializing_if = "Option::is_none")]
    pub matched_sz: Option<String>,
    /// Unmatched size.
    #[serde(rename = "unmatchedSz", skip_serializing_if = "Option::is_none")]
    pub unmatched_sz: Option<String>,
    /// Call auction end time in Unix timestamp (milliseconds).
    #[serde(rename = "auctionEndTime", skip_serializing_if = "Option::is_none")]
    pub auction_end_time: Option<String>,
    /// Trading state of the symbol.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Data generation time in Unix timestamp (milliseconds).
    #[serde(rename = "ts", skip_serializing_if = "Option::is_none")]
    pub ts: Option<String>,
}

impl Auction {
    pub fn new() -> Auction {
        Auction {
            inst_id: None,
            eq_px: None,
            matched_sz: None,
            unmatched_sz: None,
            auction_end_time: None,
            state: None,
            ts: None,
        }
    }
}
/// Trading state of the symbol.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "call_auction")]
    CallAuction,
    #[serde(rename = "continuous_trading")]
    ContinuousTrading,
}

impl Default for State {
    fn default() -> State {
        Self::CallAuction
    }
}

