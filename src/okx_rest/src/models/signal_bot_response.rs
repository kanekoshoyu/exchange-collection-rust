/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SignalBotResponse {
    /// The unique identifier for the algorithm.
    #[serde(rename = "algoId")]
    pub algo_id: String,
    /// Client-supplied Algo ID.
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// The type of instrument (e.g., spot, future).
    #[serde(rename = "instType")]
    pub inst_type: String,
    /// Array of instrument IDs involved in the algorithm.
    #[serde(rename = "instIds")]
    pub inst_ids: Vec<String>,
    /// Algo order creation time in Unix timestamp format (milliseconds).
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
    /// Algo order last update time in Unix timestamp format (milliseconds).
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
    /// Type of algo order (e.g., contract signal).
    #[serde(rename = "algoOrdType")]
    pub algo_ord_type: String,
    /// The current state of the algo order.
    #[serde(rename = "state")]
    pub state: State,
    /// The reason the algo order stopped: - `0`: None - `1`: Manual stop 
    #[serde(rename = "cancelType", skip_serializing_if = "Option::is_none")]
    pub cancel_type: Option<CancelType>,
    /// Total profit and loss from the algorithm.
    #[serde(rename = "totalPnl")]
    pub total_pnl: String,
    /// Total profit and loss ratio.
    #[serde(rename = "totalPnlRatio", skip_serializing_if = "Option::is_none")]
    pub total_pnl_ratio: Option<String>,
    /// Total equity in the strategy account.
    #[serde(rename = "totalEq")]
    pub total_eq: String,
    /// Unrealized (floating) profit and loss.
    #[serde(rename = "floatPnl")]
    pub float_pnl: String,
    /// Realized profit and loss.
    #[serde(rename = "realizedPnl")]
    pub realized_pnl: String,
    /// The balance that is frozen.
    #[serde(rename = "frozenBal")]
    pub frozen_bal: String,
    /// The available balance.
    #[serde(rename = "availBal")]
    pub avail_bal: String,
    /// Leverage, applicable to contract signals only.
    #[serde(rename = "lever", skip_serializing_if = "Option::is_none")]
    pub lever: Option<String>,
    /// Investment amount in the algorithm.
    #[serde(rename = "investAmt")]
    pub invest_amt: String,
    /// Sub-order type: - `1`: Limit order - `2`: Market order - `9`: TradingView signal 
    #[serde(rename = "subOrdType")]
    pub sub_ord_type: SubOrdType,
    /// Price offset ratio for limit orders, calculated as a percentage offset from the best bid/ask price.
    #[serde(rename = "ratio", skip_serializing_if = "Option::is_none")]
    pub ratio: Option<String>,
    #[serde(rename = "entrySettingParam")]
    pub entry_setting_param: Box<models::SignalBotResponseEntrySettingParam>,
    #[serde(rename = "exitSettingParam")]
    pub exit_setting_param: Box<models::SignalBotResponseExitSettingParam>,
    /// Signal channel ID.
    #[serde(rename = "signalChanId")]
    pub signal_chan_id: String,
    /// Name of the signal channel.
    #[serde(rename = "signalChanName")]
    pub signal_chan_name: String,
    /// Signal source type:<br> - `1`: Created by yourself<br>- `2`: Subscribe<br>- `3`: Free signal
    #[serde(rename = "signalSourceType")]
    pub signal_source_type: SignalSourceType,
}

impl SignalBotResponse {
    pub fn new(algo_id: String, inst_type: String, inst_ids: Vec<String>, algo_ord_type: String, state: State, total_pnl: String, total_eq: String, float_pnl: String, realized_pnl: String, frozen_bal: String, avail_bal: String, invest_amt: String, sub_ord_type: SubOrdType, entry_setting_param: models::SignalBotResponseEntrySettingParam, exit_setting_param: models::SignalBotResponseExitSettingParam, signal_chan_id: String, signal_chan_name: String, signal_source_type: SignalSourceType) -> SignalBotResponse {
        SignalBotResponse {
            algo_id,
            algo_cl_ord_id: None,
            inst_type,
            inst_ids,
            c_time: None,
            u_time: None,
            algo_ord_type,
            state,
            cancel_type: None,
            total_pnl,
            total_pnl_ratio: None,
            total_eq,
            float_pnl,
            realized_pnl,
            frozen_bal,
            avail_bal,
            lever: None,
            invest_amt,
            sub_ord_type,
            ratio: None,
            entry_setting_param: Box::new(entry_setting_param),
            exit_setting_param: Box::new(exit_setting_param),
            signal_chan_id,
            signal_chan_name,
            signal_source_type,
        }
    }
}
/// The current state of the algo order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "starting")]
    Starting,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "stopping")]
    Stopping,
    #[serde(rename = "stopped")]
    Stopped,
}

impl Default for State {
    fn default() -> State {
        Self::Starting
    }
}
/// The reason the algo order stopped: - `0`: None - `1`: Manual stop 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CancelType {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for CancelType {
    fn default() -> CancelType {
        Self::Variant0
    }
}
/// Sub-order type: - `1`: Limit order - `2`: Market order - `9`: TradingView signal 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubOrdType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "9")]
    Variant9,
}

impl Default for SubOrdType {
    fn default() -> SubOrdType {
        Self::Variant1
    }
}
/// Signal source type:<br> - `1`: Created by yourself<br>- `2`: Subscribe<br>- `3`: Free signal
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SignalSourceType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
}

impl Default for SignalSourceType {
    fn default() -> SignalSourceType {
        Self::Variant1
    }
}

