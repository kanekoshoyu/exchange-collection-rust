/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecurringOrder {
    /// Custom name for the trading bot, no more than 40 characters.
    #[serde(rename = "stgyName")]
    pub stgy_name: String,
    /// Recurring buy info.
    #[serde(rename = "recurringList")]
    pub recurring_list: Vec<models::RecurringOrderRecurringListInner>,
    /// Period of recurring buy.
    #[serde(rename = "period")]
    pub period: Period,
    /// Recurring buy date: - When the period is monthly, the value range is [1,28]. - When the period is weekly, the value range is [1,7]. - Not required for daily/hourly. 
    #[serde(rename = "recurringDay", skip_serializing_if = "Option::is_none")]
    pub recurring_day: Option<i32>,
    /// Recurring buy interval in hours: - Values: 1, 4, 8, 12. - Required when the period is hourly. 
    #[serde(rename = "recurringHour", skip_serializing_if = "Option::is_none")]
    pub recurring_hour: Option<i32>,
    /// Recurring buy time: - For hourly, it represents the time of the first investment (range [0,23]). 
    #[serde(rename = "recurringTime")]
    pub recurring_time: i32,
    /// UTC time zone offset: - Range: [-12, 14]. - E.g., \"8\" represents UTC+8 (Beijing Time). 
    #[serde(rename = "timeZone")]
    pub time_zone: i32,
    /// Quantity invested per cycle.
    #[serde(rename = "amt")]
    pub amt: String,
    /// The unit of invested quantity, can only be USDT/USDC.
    #[serde(rename = "investmentCcy")]
    pub investment_ccy: InvestmentCcy,
    /// Trading mode.
    #[serde(rename = "tdMode")]
    pub td_mode: TdMode,
    /// Client-supplied Algo ID: - Up to 32 characters of case-sensitive alphanumerics, all numbers, or all letters. - Will have a value if the algo order attaches algoClOrdId, otherwise \"\". 
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// Order tag: - Up to 16 characters of case-sensitive alphanumerics, all numbers, or all letters. 
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

impl RecurringOrder {
    pub fn new(stgy_name: String, recurring_list: Vec<models::RecurringOrderRecurringListInner>, period: Period, recurring_time: i32, time_zone: i32, amt: String, investment_ccy: InvestmentCcy, td_mode: TdMode) -> RecurringOrder {
        RecurringOrder {
            stgy_name,
            recurring_list,
            period,
            recurring_day: None,
            recurring_hour: None,
            recurring_time,
            time_zone,
            amt,
            investment_ccy,
            td_mode,
            algo_cl_ord_id: None,
            tag: None,
        }
    }
}
/// Period of recurring buy.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Period {
    #[serde(rename = "monthly")]
    Monthly,
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "daily")]
    Daily,
    #[serde(rename = "hourly")]
    Hourly,
}

impl Default for Period {
    fn default() -> Period {
        Self::Monthly
    }
}
/// The unit of invested quantity, can only be USDT/USDC.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InvestmentCcy {
    #[serde(rename = "USDT")]
    Usdt,
    #[serde(rename = "USDC")]
    Usdc,
}

impl Default for InvestmentCcy {
    fn default() -> InvestmentCcy {
        Self::Usdt
    }
}
/// Trading mode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TdMode {
    #[serde(rename = "cross")]
    Cross,
    #[serde(rename = "cash")]
    Cash,
}

impl Default for TdMode {
    fn default() -> TdMode {
        Self::Cross
    }
}

