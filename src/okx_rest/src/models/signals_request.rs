/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SignalsRequest {
    /// Signal channel ID
    #[serde(rename = "signalChanId")]
    pub signal_chan_id: String,
    /// Leverage (Only applicable to contract signals)
    #[serde(rename = "lever")]
    pub lever: String,
    /// Investment amount
    #[serde(rename = "investAmt")]
    pub invest_amt: String,
    /// Sub order type
    #[serde(rename = "subOrdType")]
    pub sub_ord_type: SubOrdType,
    /// Whether to include all USDT-margined contracts. Default is false. true: include, false: exclude 
    #[serde(rename = "includeAll", skip_serializing_if = "Option::is_none")]
    pub include_all: Option<bool>,
    /// Instrument IDs. Single currency or multiple currencies separated by commas. Ignored if includeAll is true. 
    #[serde(rename = "instIds", skip_serializing_if = "Option::is_none")]
    pub inst_ids: Option<String>,
    /// Price offset ratio, calculate the limit price as a percentage offset from the best bid/ask price. Only applicable to subOrdType = \"1\" (limit order). 
    #[serde(rename = "ratio", skip_serializing_if = "Option::is_none")]
    pub ratio: Option<String>,
    #[serde(rename = "entrySettingParam", skip_serializing_if = "Option::is_none")]
    pub entry_setting_param: Option<Box<models::SignalsRequestEntrySettingParam>>,
    #[serde(rename = "exitSettingParam", skip_serializing_if = "Option::is_none")]
    pub exit_setting_param: Option<Box<models::SignalsRequestExitSettingParam>>,
}

impl SignalsRequest {
    pub fn new(signal_chan_id: String, lever: String, invest_amt: String, sub_ord_type: SubOrdType) -> SignalsRequest {
        SignalsRequest {
            signal_chan_id,
            lever,
            invest_amt,
            sub_ord_type,
            include_all: None,
            inst_ids: None,
            ratio: None,
            entry_setting_param: None,
            exit_setting_param: None,
        }
    }
}
/// Sub order type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubOrdType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "9")]
    Variant9,
}

impl Default for SubOrdType {
    fn default() -> SubOrdType {
        Self::Variant1
    }
}

