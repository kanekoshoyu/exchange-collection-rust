/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepayResponseDebtDataInner {
    /// Debt currency type
    #[serde(rename = "debtCcy")]
    pub debt_ccy: String,
    /// Debt currency amount, including principal and interest
    #[serde(rename = "debtAmt")]
    pub debt_amt: String,
    /// Debt type: cross or isolated
    #[serde(rename = "debtType")]
    pub debt_type: DebtType,
}

impl RepayResponseDebtDataInner {
    pub fn new(debt_ccy: String, debt_amt: String, debt_type: DebtType) -> RepayResponseDebtDataInner {
        RepayResponseDebtDataInner {
            debt_ccy,
            debt_amt,
            debt_type,
        }
    }
}
/// Debt type: cross or isolated
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DebtType {
    #[serde(rename = "cross")]
    Cross,
    #[serde(rename = "isolated")]
    Isolated,
}

impl Default for DebtType {
    fn default() -> DebtType {
        Self::Cross
    }
}

