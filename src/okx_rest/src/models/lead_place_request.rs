/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LeadPlaceRequest {
    /// Instrument type. Default is SWAP.
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<InstType>,
    /// Lead or copy position ID
    #[serde(rename = "subPosId")]
    pub sub_pos_id: String,
    /// Take-profit trigger price. Take-profit order price will be the market price after triggering.   At least one of `tpTriggerPx` and `slTriggerPx` must be filled.   The take-profit order will be deleted if set to 0. 
    #[serde(rename = "tpTriggerPx", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px: Option<String>,
    /// Stop-loss trigger price. Stop-loss order price will be the market price after triggering.   The stop-loss order will be deleted if set to 0. 
    #[serde(rename = "slTriggerPx", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px: Option<String>,
    /// Take-profit order price. If the price is -1, take-profit will be executed at the market price.   Default is -1. Only applicable to SPOT lead traders. 
    #[serde(rename = "tpOrdPx", skip_serializing_if = "Option::is_none")]
    pub tp_ord_px: Option<String>,
    /// Stop-loss order price. If the price is -1, stop-loss will be executed at the market price.   Default is -1. Only applicable to SPOT lead traders. 
    #[serde(rename = "slOrdPx", skip_serializing_if = "Option::is_none")]
    pub sl_ord_px: Option<String>,
    /// Take-profit trigger price type.   `last`: last price, `index`: index price, `mark`: mark price. Default is `last`. 
    #[serde(rename = "tpTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px_type: Option<TpTriggerPxType>,
    /// Stop-loss trigger price type.   `last`: last price, `index`: index price, `mark`: mark price. Default is `last`. 
    #[serde(rename = "slTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px_type: Option<SlTriggerPxType>,
    /// Order tag. A combination of case-sensitive alphanumerics, all numbers, or all letters   of up to 16 characters. 
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// Data type.   `lead`: lead trading (default), `copy`: copy trading. 
    #[serde(rename = "subPosType", skip_serializing_if = "Option::is_none")]
    pub sub_pos_type: Option<SubPosType>,
}

impl LeadPlaceRequest {
    pub fn new(sub_pos_id: String) -> LeadPlaceRequest {
        LeadPlaceRequest {
            inst_type: None,
            sub_pos_id,
            tp_trigger_px: None,
            sl_trigger_px: None,
            tp_ord_px: None,
            sl_ord_px: None,
            tp_trigger_px_type: None,
            sl_trigger_px_type: None,
            tag: None,
            sub_pos_type: None,
        }
    }
}
/// Instrument type. Default is SWAP.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InstType {
    #[serde(rename = "SPOT")]
    Spot,
    #[serde(rename = "SWAP")]
    Swap,
}

impl Default for InstType {
    fn default() -> InstType {
        Self::Spot
    }
}
/// Take-profit trigger price type.   `last`: last price, `index`: index price, `mark`: mark price. Default is `last`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TpTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for TpTriggerPxType {
    fn default() -> TpTriggerPxType {
        Self::Last
    }
}
/// Stop-loss trigger price type.   `last`: last price, `index`: index price, `mark`: mark price. Default is `last`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SlTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for SlTriggerPxType {
    fn default() -> SlTriggerPxType {
        Self::Last
    }
}
/// Data type.   `lead`: lead trading (default), `copy`: copy trading. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubPosType {
    #[serde(rename = "lead")]
    Lead,
    #[serde(rename = "copy")]
    Copy,
}

impl Default for SubPosType {
    fn default() -> SubPosType {
        Self::Lead
    }
}

