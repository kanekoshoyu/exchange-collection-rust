/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlgoTriggerRequest {
    /// Instrument ID, e.g., BTC-USDT.
    #[serde(rename = "instId")]
    pub inst_id: String,
    /// Algorithmic Order ID. Either `algoId` or `algoClOrdId` must be provided. If both are passed, `algoId` will be used. 
    #[serde(rename = "algoId", skip_serializing_if = "Option::is_none")]
    pub algo_id: Option<String>,
    /// Client-supplied Algorithmic Order ID. Either `algoId` or `algoClOrdId` must be provided. If both are passed, `algoId` will be used. 
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// New trigger price after amendment.
    #[serde(rename = "newTriggerPx")]
    pub new_trigger_px: String,
    /// New order price after amendment. If the price is -1, the order will be executed at the market price. 
    #[serde(rename = "newOrdPx")]
    pub new_ord_px: String,
    /// New trigger price type after amendment. Allowed values: - `last`: last price - `index`: index price - `mark`: mark price 
    #[serde(rename = "newTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub new_trigger_px_type: Option<NewTriggerPxType>,
    /// Attached SL/TP orders information. Applicable to Spot and futures mode/Multi-currency margin/Portfolio margin. 
    #[serde(rename = "attachAlgoOrds", skip_serializing_if = "Option::is_none")]
    pub attach_algo_ords: Option<Vec<models::AlgoTriggerRequestAttachAlgoOrdsInner>>,
}

impl AlgoTriggerRequest {
    pub fn new(inst_id: String, new_trigger_px: String, new_ord_px: String) -> AlgoTriggerRequest {
        AlgoTriggerRequest {
            inst_id,
            algo_id: None,
            algo_cl_ord_id: None,
            new_trigger_px,
            new_ord_px,
            new_trigger_px_type: None,
            attach_algo_ords: None,
        }
    }
}
/// New trigger price type after amendment. Allowed values: - `last`: last price - `index`: index price - `mark`: mark price 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NewTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for NewTriggerPxType {
    fn default() -> NewTriggerPxType {
        Self::Last
    }
}

