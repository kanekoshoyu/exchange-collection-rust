/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CurrunciesData {
    /// Currency, e.g. BTC
    #[serde(rename = "ccy")]
    pub ccy: String,
    /// Name of currency
    #[serde(rename = "name")]
    pub name: String,
    /// The logo link of currency
    #[serde(rename = "logoLink", skip_serializing_if = "Option::is_none")]
    pub logo_link: Option<String>,
    /// Chain name, e.g. USDT-ERC20, USDT-TRC20
    #[serde(rename = "chain")]
    pub chain: String,
    /// The availability to deposit from chain
    #[serde(rename = "canDep", skip_serializing_if = "Option::is_none")]
    pub can_dep: Option<bool>,
    /// The availability to withdraw to chain
    #[serde(rename = "canWd", skip_serializing_if = "Option::is_none")]
    pub can_wd: Option<bool>,
    /// The availability to internal transfer
    #[serde(rename = "canInternal", skip_serializing_if = "Option::is_none")]
    pub can_internal: Option<bool>,
    /// The minimum deposit amount of currency in a single transaction
    #[serde(rename = "minDep", skip_serializing_if = "Option::is_none")]
    pub min_dep: Option<String>,
    /// The minimum on-chain withdrawal amount of currency in a single transaction
    #[serde(rename = "minWd", skip_serializing_if = "Option::is_none")]
    pub min_wd: Option<String>,
    /// The maximum amount of currency on-chain withdrawal in a single transaction
    #[serde(rename = "maxWd", skip_serializing_if = "Option::is_none")]
    pub max_wd: Option<String>,
    /// The withdrawal precision, indicating the number of digits after the decimal point
    #[serde(rename = "wdTickSz", skip_serializing_if = "Option::is_none")]
    pub wd_tick_sz: Option<String>,
    /// The withdrawal limit in the past 24 hours (in USD)
    #[serde(rename = "wdQuota", skip_serializing_if = "Option::is_none")]
    pub wd_quota: Option<String>,
    /// The amount of currency withdrawal used in the past 24 hours (in USD)
    #[serde(rename = "usedWdQuota", skip_serializing_if = "Option::is_none")]
    pub used_wd_quota: Option<String>,
    /// The fixed withdrawal fee
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// The minimum withdrawal fee for normal address (Deprecated)
    #[serde(rename = "minFee", skip_serializing_if = "Option::is_none")]
    pub min_fee: Option<String>,
    /// The maximum withdrawal fee for normal address (Deprecated)
    #[serde(rename = "maxFee", skip_serializing_if = "Option::is_none")]
    pub max_fee: Option<String>,
    /// The minimum withdrawal fee for contract address (Deprecated)
    #[serde(rename = "minFeeForCtAddr", skip_serializing_if = "Option::is_none")]
    pub min_fee_for_ct_addr: Option<String>,
    /// The maximum withdrawal fee for contract address (Deprecated)
    #[serde(rename = "maxFeeForCtAddr", skip_serializing_if = "Option::is_none")]
    pub max_fee_for_ct_addr: Option<String>,
    /// Burning fee rate, e.g. '0.05' represents '5%'
    #[serde(rename = "burningFeeRate", skip_serializing_if = "Option::is_none")]
    pub burning_fee_rate: Option<String>,
    /// If current chain is main net
    #[serde(rename = "mainNet", skip_serializing_if = "Option::is_none")]
    pub main_net: Option<bool>,
    /// Whether tag/memo information is required for withdrawal (e.g. EOS will return true)
    #[serde(rename = "needTag", skip_serializing_if = "Option::is_none")]
    pub need_tag: Option<bool>,
    /// The minimum number of blockchain confirmations to acknowledge fund deposit
    #[serde(rename = "minDepArrivalConfirm", skip_serializing_if = "Option::is_none")]
    pub min_dep_arrival_confirm: Option<String>,
    /// The minimum number of blockchain confirmations required for withdrawal of a deposit
    #[serde(rename = "minWdUnlockConfirm", skip_serializing_if = "Option::is_none")]
    pub min_wd_unlock_confirm: Option<String>,
    /// The fixed deposit limit, in USD
    #[serde(rename = "depQuotaFixed", skip_serializing_if = "Option::is_none")]
    pub dep_quota_fixed: Option<String>,
    /// The used amount of fixed deposit quota, in USD
    #[serde(rename = "usedDepQuotaFixed", skip_serializing_if = "Option::is_none")]
    pub used_dep_quota_fixed: Option<String>,
    /// The layer2 network daily deposit limit
    #[serde(rename = "depQuoteDailyLayer2", skip_serializing_if = "Option::is_none")]
    pub dep_quote_daily_layer2: Option<String>,
}

impl CurrunciesData {
    pub fn new(ccy: String, name: String, chain: String) -> CurrunciesData {
        CurrunciesData {
            ccy,
            name,
            logo_link: None,
            chain,
            can_dep: None,
            can_wd: None,
            can_internal: None,
            min_dep: None,
            min_wd: None,
            max_wd: None,
            wd_tick_sz: None,
            wd_quota: None,
            used_wd_quota: None,
            fee: None,
            min_fee: None,
            max_fee: None,
            min_fee_for_ct_addr: None,
            max_fee_for_ct_addr: None,
            burning_fee_rate: None,
            main_net: None,
            need_tag: None,
            min_dep_arrival_confirm: None,
            min_wd_unlock_confirm: None,
            dep_quota_fixed: None,
            used_dep_quota_fixed: None,
            dep_quote_daily_layer2: None,
        }
    }
}

