/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubAccountDetails {
    /// The latest time to get account information, Unix timestamp in milliseconds.
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
    /// Total amount of equity in USD.
    #[serde(rename = "totalEq", skip_serializing_if = "Option::is_none")]
    pub total_eq: Option<String>,
    /// Isolated margin equity in USD. Applicable to Spot and futures mode/Multi-currency margin/Portfolio margin. 
    #[serde(rename = "isoEq", skip_serializing_if = "Option::is_none")]
    pub iso_eq: Option<String>,
    /// Adjusted/effective equity in USD. Used for multi-currency margin/portfolio margin, considering market risk adjustments. 
    #[serde(rename = "adjEq", skip_serializing_if = "Option::is_none")]
    pub adj_eq: Option<String>,
    /// Margin frozen for pending cross orders in USD.
    #[serde(rename = "ordFroz", skip_serializing_if = "Option::is_none")]
    pub ord_froz: Option<String>,
    /// Initial margin requirement in USD for cross-margin mode.
    #[serde(rename = "imr", skip_serializing_if = "Option::is_none")]
    pub imr: Option<String>,
    /// Maintenance margin requirement in USD for cross-margin mode.
    #[serde(rename = "mmr", skip_serializing_if = "Option::is_none")]
    pub mmr: Option<String>,
    /// Potential borrowing IMR of the account in USD. Applicable only to Multi-currency margin/Portfolio margin. 
    #[serde(rename = "borrowFroz", skip_serializing_if = "Option::is_none")]
    pub borrow_froz: Option<String>,
    /// Margin ratio in USD.
    #[serde(rename = "mgnRatio", skip_serializing_if = "Option::is_none")]
    pub mgn_ratio: Option<String>,
    /// Notional value of positions in USD.
    #[serde(rename = "notionalUsd", skip_serializing_if = "Option::is_none")]
    pub notional_usd: Option<String>,
    /// Unrealized profit and loss at the account level in USD.
    #[serde(rename = "upl", skip_serializing_if = "Option::is_none")]
    pub upl: Option<String>,
    /// Detailed asset information in all currencies.
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<Vec<models::CurrencyDetails>>,
}

impl SubAccountDetails {
    pub fn new() -> SubAccountDetails {
        SubAccountDetails {
            u_time: None,
            total_eq: None,
            iso_eq: None,
            adj_eq: None,
            ord_froz: None,
            imr: None,
            mmr: None,
            borrow_froz: None,
            mgn_ratio: None,
            notional_usd: None,
            upl: None,
            details: None,
        }
    }
}

