/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubOrderResponse {
    /// Instrument ID, e.g., BTC-USDT-SWAP.
    #[serde(rename = "instId")]
    pub inst_id: String,
    /// Algo ID for the order.
    #[serde(rename = "algoId")]
    pub algo_id: String,
    /// Order side, either buy or sell.
    #[serde(rename = "side")]
    pub side: Side,
    /// Order type, market or limit.
    #[serde(rename = "ordType")]
    pub ord_type: OrdType,
    /// Quantity to buy or sell.
    #[serde(rename = "sz")]
    pub sz: String,
    /// Order price. Applicable only to limit orders.
    #[serde(rename = "px", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub px: Option<Option<String>>,
    /// Whether the order can only reduce the position size. Default is false. Applicable to Spot and futures mode/Multi-currency margin.
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<bool>,
}

impl SubOrderResponse {
    pub fn new(inst_id: String, algo_id: String, side: Side, ord_type: OrdType, sz: String) -> SubOrderResponse {
        SubOrderResponse {
            inst_id,
            algo_id,
            side,
            ord_type,
            sz,
            px: None,
            reduce_only: None,
        }
    }
}
/// Order side, either buy or sell.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Order type, market or limit.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrdType {
    #[serde(rename = "market")]
    Market,
    #[serde(rename = "limit")]
    Limit,
}

impl Default for OrdType {
    fn default() -> OrdType {
        Self::Market
    }
}

