/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StopLossRequest {
    /// Instrument ID, e.g. BTC-USDT
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Trade mode: Margin mode (cross, isolated), Non-Margin mode (cash), or spot_isolated for SPOT lead trading.
    #[serde(rename = "tdMode", skip_serializing_if = "Option::is_none")]
    pub td_mode: Option<TdMode>,
    /// Margin currency. Only applicable to cross MARGIN orders in Spot and futures mode.
    #[serde(rename = "ccy", skip_serializing_if = "Option::is_none")]
    pub ccy: Option<String>,
    /// Order side: buy or sell.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Position side. Required in long/short mode, and can only be long or short.
    #[serde(rename = "posSide", skip_serializing_if = "Option::is_none")]
    pub pos_side: Option<PosSide>,
    /// Order type: conditional, oco, trigger, move_order_stop, or twap.
    #[serde(rename = "ordType", skip_serializing_if = "Option::is_none")]
    pub ord_type: Option<OrdType>,
    /// Quantity to buy or sell. Either sz or closeFraction is required.
    #[serde(rename = "sz", skip_serializing_if = "Option::is_none")]
    pub sz: Option<String>,
    /// Order tag. A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 16 characters.
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// Order quantity unit setting for sz. Only applicable to SPOT traded with Market buy conditional order.
    #[serde(rename = "tgtCcy", skip_serializing_if = "Option::is_none")]
    pub tgt_ccy: Option<TgtCcy>,
    /// Client-supplied Algo ID. A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// Fraction of position to be closed when the algo order is triggered. Only applicable if ordType is conditional or oco.
    #[serde(rename = "closeFraction", skip_serializing_if = "Option::is_none")]
    pub close_fraction: Option<String>,
}

impl StopLossRequest {
    pub fn new() -> StopLossRequest {
        StopLossRequest {
            inst_id: None,
            td_mode: None,
            ccy: None,
            side: None,
            pos_side: None,
            ord_type: None,
            sz: None,
            tag: None,
            tgt_ccy: None,
            algo_cl_ord_id: None,
            close_fraction: None,
        }
    }
}
/// Trade mode: Margin mode (cross, isolated), Non-Margin mode (cash), or spot_isolated for SPOT lead trading.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TdMode {
    #[serde(rename = "cross")]
    Cross,
    #[serde(rename = "isolated")]
    Isolated,
    #[serde(rename = "cash")]
    Cash,
    #[serde(rename = "spot_isolated")]
    SpotIsolated,
}

impl Default for TdMode {
    fn default() -> TdMode {
        Self::Cross
    }
}
/// Order side: buy or sell.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Position side. Required in long/short mode, and can only be long or short.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PosSide {
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "short")]
    Short,
}

impl Default for PosSide {
    fn default() -> PosSide {
        Self::Long
    }
}
/// Order type: conditional, oco, trigger, move_order_stop, or twap.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrdType {
    #[serde(rename = "conditional")]
    Conditional,
    #[serde(rename = "oco")]
    Oco,
    #[serde(rename = "trigger")]
    Trigger,
    #[serde(rename = "move_order_stop")]
    MoveOrderStop,
    #[serde(rename = "twap")]
    Twap,
}

impl Default for OrdType {
    fn default() -> OrdType {
        Self::Conditional
    }
}
/// Order quantity unit setting for sz. Only applicable to SPOT traded with Market buy conditional order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TgtCcy {
    #[serde(rename = "base_ccy")]
    BaseCcy,
    #[serde(rename = "quote_ccy")]
    QuoteCcy,
}

impl Default for TgtCcy {
    fn default() -> TgtCcy {
        Self::BaseCcy
    }
}

