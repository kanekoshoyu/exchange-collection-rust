/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PublicOptionTrade : Detailed information about a trade.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublicOptionTrade {
    /// Instrument ID.
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Instrument family.
    #[serde(rename = "instFamily", skip_serializing_if = "Option::is_none")]
    pub inst_family: Option<String>,
    /// Trade ID.
    #[serde(rename = "tradeId", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<String>,
    /// Trade price.
    #[serde(rename = "px", skip_serializing_if = "Option::is_none")]
    pub px: Option<String>,
    /// Trade quantity.
    #[serde(rename = "sz", skip_serializing_if = "Option::is_none")]
    pub sz: Option<String>,
    /// Trade side.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Option type.
    #[serde(rename = "optType", skip_serializing_if = "Option::is_none")]
    pub opt_type: Option<OptType>,
    /// Implied volatility while trading, corresponding to the trade price.
    #[serde(rename = "fillVol", skip_serializing_if = "Option::is_none")]
    pub fill_vol: Option<String>,
    /// Forward price while trading.
    #[serde(rename = "fwdPx", skip_serializing_if = "Option::is_none")]
    pub fwd_px: Option<String>,
    /// Index price while trading.
    #[serde(rename = "idxPx", skip_serializing_if = "Option::is_none")]
    pub idx_px: Option<String>,
    /// Mark price while trading.
    #[serde(rename = "markPx", skip_serializing_if = "Option::is_none")]
    pub mark_px: Option<String>,
    /// Trade time in Unix timestamp format (milliseconds).
    #[serde(rename = "ts", skip_serializing_if = "Option::is_none")]
    pub ts: Option<String>,
}

impl PublicOptionTrade {
    /// Detailed information about a trade.
    pub fn new() -> PublicOptionTrade {
        PublicOptionTrade {
            inst_id: None,
            inst_family: None,
            trade_id: None,
            px: None,
            sz: None,
            side: None,
            opt_type: None,
            fill_vol: None,
            fwd_px: None,
            idx_px: None,
            mark_px: None,
            ts: None,
        }
    }
}
/// Trade side.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Option type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OptType {
    #[serde(rename = "C")]
    C,
    #[serde(rename = "P")]
    P,
}

impl Default for OptType {
    fn default() -> OptType {
        Self::C
    }
}

