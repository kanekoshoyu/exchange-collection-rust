/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SignalBotResponseEntrySettingParam {
    /// Whether multiple entries in the same direction for the same trading pairs are allowed.
    #[serde(rename = "allowMultipleEntry", skip_serializing_if = "Option::is_none")]
    pub allow_multiple_entry: Option<bool>,
    /// Entry type:<br>- `1`: TradingView signal<br>- `2`: Fixed margin<br>- `3`: Contracts<br>- `4`: Percentage of free margin<br>- `5`: Percentage of the initial invested margin
    #[serde(rename = "entryType", skip_serializing_if = "Option::is_none")]
    pub entry_type: Option<EntryType>,
    /// Amount per order, applicable to entry types 2 and 3.
    #[serde(rename = "amt", skip_serializing_if = "Option::is_none")]
    pub amt: Option<String>,
    /// Amount ratio per order, applicable to entry types 4 and 5.
    #[serde(rename = "ratio", skip_serializing_if = "Option::is_none")]
    pub ratio: Option<String>,
}

impl SignalBotResponseEntrySettingParam {
    pub fn new() -> SignalBotResponseEntrySettingParam {
        SignalBotResponseEntrySettingParam {
            allow_multiple_entry: None,
            entry_type: None,
            amt: None,
            ratio: None,
        }
    }
}
/// Entry type:<br>- `1`: TradingView signal<br>- `2`: Fixed margin<br>- `3`: Contracts<br>- `4`: Percentage of free margin<br>- `5`: Percentage of the initial invested margin
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntryType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
    #[serde(rename = "5")]
    Variant5,
}

impl Default for EntryType {
    fn default() -> EntryType {
        Self::Variant1
    }
}

