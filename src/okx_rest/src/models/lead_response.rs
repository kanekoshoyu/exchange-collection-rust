/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LeadResponse {
    /// Instrument ID, e.g., BTC-USDT-SWAP
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Lead or copy position ID
    #[serde(rename = "subPosId", skip_serializing_if = "Option::is_none")]
    pub sub_pos_id: Option<String>,
    /// Position side. Long positions have positive subPos; short positions have negative subPos
    #[serde(rename = "posSide", skip_serializing_if = "Option::is_none")]
    pub pos_side: Option<PosSide>,
    /// Margin mode
    #[serde(rename = "mgnMode", skip_serializing_if = "Option::is_none")]
    pub mgn_mode: Option<MgnMode>,
    /// Leverage
    #[serde(rename = "lever", skip_serializing_if = "Option::is_none")]
    pub lever: Option<String>,
    /// Order ID for opening position, only applicable to lead position
    #[serde(rename = "openOrdId", skip_serializing_if = "Option::is_none")]
    pub open_ord_id: Option<String>,
    /// Average open price
    #[serde(rename = "openAvgPx", skip_serializing_if = "Option::is_none")]
    pub open_avg_px: Option<String>,
    /// Open time
    #[serde(rename = "openTime", skip_serializing_if = "Option::is_none")]
    pub open_time: Option<String>,
    /// Quantity of positions
    #[serde(rename = "subPos", skip_serializing_if = "Option::is_none")]
    pub sub_pos: Option<String>,
    /// Take-profit trigger price
    #[serde(rename = "tpTriggerPx", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px: Option<String>,
    /// Stop-loss trigger price
    #[serde(rename = "slTriggerPx", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px: Option<String>,
    /// Stop order ID
    #[serde(rename = "algoId", skip_serializing_if = "Option::is_none")]
    pub algo_id: Option<String>,
    /// Instrument type
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<String>,
    /// Take-profit order price, it is -1 for market price
    #[serde(rename = "tpOrdPx", skip_serializing_if = "Option::is_none")]
    pub tp_ord_px: Option<String>,
    /// Stop-loss order price, it is -1 for market price
    #[serde(rename = "slOrdPx", skip_serializing_if = "Option::is_none")]
    pub sl_ord_px: Option<String>,
    /// Margin
    #[serde(rename = "margin", skip_serializing_if = "Option::is_none")]
    pub margin: Option<String>,
    /// Unrealized profit and loss
    #[serde(rename = "upl", skip_serializing_if = "Option::is_none")]
    pub upl: Option<String>,
    /// Unrealized profit and loss ratio
    #[serde(rename = "uplRatio", skip_serializing_if = "Option::is_none")]
    pub upl_ratio: Option<String>,
    /// Latest mark price, only applicable to contract
    #[serde(rename = "markPx", skip_serializing_if = "Option::is_none")]
    pub mark_px: Option<String>,
    /// Lead trader unique code
    #[serde(rename = "uniqueCode", skip_serializing_if = "Option::is_none")]
    pub unique_code: Option<String>,
    /// Margin currency
    #[serde(rename = "ccy", skip_serializing_if = "Option::is_none")]
    pub ccy: Option<String>,
    /// Quantity of positions that can be closed
    #[serde(rename = "availSubPos", skip_serializing_if = "Option::is_none")]
    pub avail_sub_pos: Option<String>,
}

impl LeadResponse {
    pub fn new() -> LeadResponse {
        LeadResponse {
            inst_id: None,
            sub_pos_id: None,
            pos_side: None,
            mgn_mode: None,
            lever: None,
            open_ord_id: None,
            open_avg_px: None,
            open_time: None,
            sub_pos: None,
            tp_trigger_px: None,
            sl_trigger_px: None,
            algo_id: None,
            inst_type: None,
            tp_ord_px: None,
            sl_ord_px: None,
            margin: None,
            upl: None,
            upl_ratio: None,
            mark_px: None,
            unique_code: None,
            ccy: None,
            avail_sub_pos: None,
        }
    }
}
/// Position side. Long positions have positive subPos; short positions have negative subPos
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PosSide {
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "short")]
    Short,
    #[serde(rename = "net")]
    Net,
}

impl Default for PosSide {
    fn default() -> PosSide {
        Self::Long
    }
}
/// Margin mode
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MgnMode {
    #[serde(rename = "cross")]
    Cross,
    #[serde(rename = "isolated")]
    Isolated,
}

impl Default for MgnMode {
    fn default() -> MgnMode {
        Self::Cross
    }
}

