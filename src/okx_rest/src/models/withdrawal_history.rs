/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WithdrawalHistory {
    /// Final amount of the transaction (after fees).
    #[serde(rename = "amt", skip_serializing_if = "Option::is_none")]
    pub amt: Option<String>,
    /// Creation time of the transaction in Unix timestamp format (milliseconds).
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
    /// Client ID associated with the transaction. A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.
    #[serde(rename = "clientId", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Currency of the transaction. ISO-4217 3-character currency code (e.g., USD, EUR).
    #[serde(rename = "ccy", skip_serializing_if = "Option::is_none")]
    pub ccy: Option<String>,
    /// Transaction fee associated with the transaction.
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// Unique order ID for this transaction.
    #[serde(rename = "ordId", skip_serializing_if = "Option::is_none")]
    pub ord_id: Option<String>,
    /// ID of the payment account used for the transaction.
    #[serde(rename = "paymentAcctId", skip_serializing_if = "Option::is_none")]
    pub payment_acct_id: Option<String>,
    /// Payment method type used for the transaction. Possible values: SEPA, TR_BANKS, PIX.
    #[serde(rename = "paymentMethod", skip_serializing_if = "Option::is_none")]
    pub payment_method: Option<String>,
    /// State of the transaction. Possible values: completed, failed, pending, canceled, inqueue.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Update time of the transaction in Unix timestamp format (milliseconds).
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
}

impl WithdrawalHistory {
    pub fn new() -> WithdrawalHistory {
        WithdrawalHistory {
            amt: None,
            c_time: None,
            client_id: None,
            ccy: None,
            fee: None,
            ord_id: None,
            payment_acct_id: None,
            payment_method: None,
            state: None,
            u_time: None,
        }
    }
}

