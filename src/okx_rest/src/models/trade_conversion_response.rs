/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TradeConversionResponse {
    /// Trade ID
    #[serde(rename = "tradeId")]
    pub trade_id: String,
    /// Quote ID
    #[serde(rename = "quoteId")]
    pub quote_id: String,
    /// Client Order ID as assigned by the client
    #[serde(rename = "clTReqId", skip_serializing_if = "Option::is_none")]
    pub cl_t_req_id: Option<String>,
    /// Trade state. 'fullyFilled' indicates success, 'rejected' indicates failure.
    #[serde(rename = "state")]
    pub state: State,
    /// Currency pair, e.g., BTC-USDT
    #[serde(rename = "instId")]
    pub inst_id: String,
    /// Base currency, e.g., BTC in BTC-USDT
    #[serde(rename = "baseCcy")]
    pub base_ccy: String,
    /// Quote currency, e.g., USDT in BTC-USDT
    #[serde(rename = "quoteCcy")]
    pub quote_ccy: String,
    /// Trade side based on baseCcy
    #[serde(rename = "side")]
    pub side: Side,
    /// Filled price based on quote currency
    #[serde(rename = "fillPx")]
    pub fill_px: String,
    /// Filled amount for base currency
    #[serde(rename = "fillBaseSz")]
    pub fill_base_sz: String,
    /// Filled amount for quote currency
    #[serde(rename = "fillQuoteSz")]
    pub fill_quote_sz: String,
    /// Trade time in Unix timestamp format in milliseconds (e.g., 1597026383085)
    #[serde(rename = "ts")]
    pub ts: String,
}

impl TradeConversionResponse {
    pub fn new(trade_id: String, quote_id: String, state: State, inst_id: String, base_ccy: String, quote_ccy: String, side: Side, fill_px: String, fill_base_sz: String, fill_quote_sz: String, ts: String) -> TradeConversionResponse {
        TradeConversionResponse {
            trade_id,
            quote_id,
            cl_t_req_id: None,
            state,
            inst_id,
            base_ccy,
            quote_ccy,
            side,
            fill_px,
            fill_base_sz,
            fill_quote_sz,
            ts,
        }
    }
}
/// Trade state. 'fullyFilled' indicates success, 'rejected' indicates failure.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "fullyFilled")]
    FullyFilled,
    #[serde(rename = "rejected")]
    Rejected,
}

impl Default for State {
    fn default() -> State {
        Self::FullyFilled
    }
}
/// Trade side based on baseCcy
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}

