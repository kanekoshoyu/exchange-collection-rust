/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TriggerRequest {
    /// Take-profit trigger price. If provided, you should also provide the take-profit order price.
    #[serde(rename = "tpTriggerPx")]
    pub tp_trigger_px: String,
    /// Take-profit trigger price type: last price, index price, or mark price. Default is 'last'.
    #[serde(rename = "tpTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px_type: Option<TpTriggerPxType>,
    /// Take-profit order price. If provided, you should also provide the take-profit trigger price. If the price is -1, take-profit will be executed at the market price.
    #[serde(rename = "tpOrdPx")]
    pub tp_ord_px: String,
    /// Take-profit order kind: condition or limit. Default is 'condition'.
    #[serde(rename = "tpOrdKind", skip_serializing_if = "Option::is_none")]
    pub tp_ord_kind: Option<TpOrdKind>,
    /// Stop-loss trigger price. If provided, you should also provide the stop-loss order price.
    #[serde(rename = "slTriggerPx")]
    pub sl_trigger_px: String,
    /// Stop-loss trigger price type: last price, index price, or mark price. Default is 'last'.
    #[serde(rename = "slTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px_type: Option<SlTriggerPxType>,
    /// Stop-loss order price. If provided, you should also provide the stop-loss trigger price. If the price is -1, stop-loss will be executed at the market price.
    #[serde(rename = "slOrdPx")]
    pub sl_ord_px: String,
    /// Whether the TP/SL order is associated with the corresponding position of the instrument. If true, the TP/SL order will be canceled when the position is fully closed.
    #[serde(rename = "cxlOnClosePos", skip_serializing_if = "Option::is_none")]
    pub cxl_on_close_pos: Option<bool>,
    /// Whether the order can only reduce the position size. Valid values are true or false. Default is false.
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<bool>,
}

impl TriggerRequest {
    pub fn new(tp_trigger_px: String, tp_ord_px: String, sl_trigger_px: String, sl_ord_px: String) -> TriggerRequest {
        TriggerRequest {
            tp_trigger_px,
            tp_trigger_px_type: None,
            tp_ord_px,
            tp_ord_kind: None,
            sl_trigger_px,
            sl_trigger_px_type: None,
            sl_ord_px,
            cxl_on_close_pos: None,
            reduce_only: None,
        }
    }
}
/// Take-profit trigger price type: last price, index price, or mark price. Default is 'last'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TpTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for TpTriggerPxType {
    fn default() -> TpTriggerPxType {
        Self::Last
    }
}
/// Take-profit order kind: condition or limit. Default is 'condition'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TpOrdKind {
    #[serde(rename = "condition")]
    Condition,
    #[serde(rename = "limit")]
    Limit,
}

impl Default for TpOrdKind {
    fn default() -> TpOrdKind {
        Self::Condition
    }
}
/// Stop-loss trigger price type: last price, index price, or mark price. Default is 'last'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SlTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for SlTriggerPxType {
    fn default() -> SlTriggerPxType {
        Self::Last
    }
}

