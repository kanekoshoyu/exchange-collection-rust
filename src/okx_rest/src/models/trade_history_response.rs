/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TradeHistoryResponse {
    /// Trade ID
    #[serde(rename = "tradeId", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<String>,
    /// Client Order ID as assigned by the client
    #[serde(rename = "clTReqId", skip_serializing_if = "Option::is_none")]
    pub cl_t_req_id: Option<String>,
    /// Trade state. Possible values: 'fullyFilled' (success), 'rejected' (failed)
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Currency pair, e.g. BTC-USDT
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Base currency, e.g. BTC in BTC-USDT
    #[serde(rename = "baseCcy", skip_serializing_if = "Option::is_none")]
    pub base_ccy: Option<String>,
    /// Quote currency, e.g. USDT in BTC-USDT
    #[serde(rename = "quoteCcy", skip_serializing_if = "Option::is_none")]
    pub quote_ccy: Option<String>,
    /// Trade side based on baseCcy. Possible values: 'buy', 'sell'
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Filled price based on quote currency
    #[serde(rename = "fillPx", skip_serializing_if = "Option::is_none")]
    pub fill_px: Option<String>,
    /// Filled amount for base currency
    #[serde(rename = "fillBaseSz", skip_serializing_if = "Option::is_none")]
    pub fill_base_sz: Option<String>,
    /// Filled amount for quote currency
    #[serde(rename = "fillQuoteSz", skip_serializing_if = "Option::is_none")]
    pub fill_quote_sz: Option<String>,
    /// Convert trade time, Unix timestamp format in milliseconds (e.g., 1597026383085)
    #[serde(rename = "ts", skip_serializing_if = "Option::is_none")]
    pub ts: Option<String>,
}

impl TradeHistoryResponse {
    pub fn new() -> TradeHistoryResponse {
        TradeHistoryResponse {
            trade_id: None,
            cl_t_req_id: None,
            state: None,
            inst_id: None,
            base_ccy: None,
            quote_ccy: None,
            side: None,
            fill_px: None,
            fill_base_sz: None,
            fill_quote_sz: None,
            ts: None,
        }
    }
}
/// Trade state. Possible values: 'fullyFilled' (success), 'rejected' (failed)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "fullyFilled")]
    FullyFilled,
    #[serde(rename = "rejected")]
    Rejected,
}

impl Default for State {
    fn default() -> State {
        Self::FullyFilled
    }
}
/// Trade side based on baseCcy. Possible values: 'buy', 'sell'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}

