/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlgoOrderDetailedResponseAttachAlgoOrdsInner {
    #[serde(rename = "attachAlgoClOrdId", skip_serializing_if = "Option::is_none")]
    pub attach_algo_cl_ord_id: Option<String>,
    #[serde(rename = "tpTriggerPx", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px: Option<String>,
    #[serde(rename = "tpTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px_type: Option<TpTriggerPxType>,
    #[serde(rename = "tpOrdPx", skip_serializing_if = "Option::is_none")]
    pub tp_ord_px: Option<String>,
    #[serde(rename = "slTriggerPx", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px: Option<String>,
    #[serde(rename = "slTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px_type: Option<SlTriggerPxType>,
    #[serde(rename = "slOrdPx", skip_serializing_if = "Option::is_none")]
    pub sl_ord_px: Option<String>,
}

impl AlgoOrderDetailedResponseAttachAlgoOrdsInner {
    pub fn new() -> AlgoOrderDetailedResponseAttachAlgoOrdsInner {
        AlgoOrderDetailedResponseAttachAlgoOrdsInner {
            attach_algo_cl_ord_id: None,
            tp_trigger_px: None,
            tp_trigger_px_type: None,
            tp_ord_px: None,
            sl_trigger_px: None,
            sl_trigger_px_type: None,
            sl_ord_px: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TpTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for TpTriggerPxType {
    fn default() -> TpTriggerPxType {
        Self::Last
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SlTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for SlTriggerPxType {
    fn default() -> SlTriggerPxType {
        Self::Last
    }
}

