/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GridAmendRequestTriggerParamsInner {
    /// Trigger action.
    #[serde(rename = "triggerAction", skip_serializing_if = "Option::is_none")]
    pub trigger_action: Option<TriggerAction>,
    /// Trigger strategy.
    #[serde(rename = "triggerStrategy", skip_serializing_if = "Option::is_none")]
    pub trigger_strategy: Option<TriggerStrategy>,
    /// Trigger price. This field is only valid when `triggerStrategy` is `price`. 
    #[serde(rename = "triggerPx", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub trigger_px: Option<Option<String>>,
    /// Stop type: - Spot grid: `1` = Sell base currency, `2` = Keep base currency. - Contract grid: `1` = Market close all positions, `2` = Keep positions. This field is only valid when `triggerAction` is `stop`. 
    #[serde(rename = "stopType", skip_serializing_if = "Option::is_none")]
    pub stop_type: Option<StopType>,
}

impl GridAmendRequestTriggerParamsInner {
    pub fn new() -> GridAmendRequestTriggerParamsInner {
        GridAmendRequestTriggerParamsInner {
            trigger_action: None,
            trigger_strategy: None,
            trigger_px: None,
            stop_type: None,
        }
    }
}
/// Trigger action.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerAction {
    #[serde(rename = "start")]
    Start,
    #[serde(rename = "stop")]
    Stop,
}

impl Default for TriggerAction {
    fn default() -> TriggerAction {
        Self::Start
    }
}
/// Trigger strategy.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerStrategy {
    #[serde(rename = "instant")]
    Instant,
    #[serde(rename = "price")]
    Price,
    #[serde(rename = "rsi")]
    Rsi,
}

impl Default for TriggerStrategy {
    fn default() -> TriggerStrategy {
        Self::Instant
    }
}
/// Stop type: - Spot grid: `1` = Sell base currency, `2` = Keep base currency. - Contract grid: `1` = Market close all positions, `2` = Keep positions. This field is only valid when `triggerAction` is `stop`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StopType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for StopType {
    fn default() -> StopType {
        Self::Variant1
    }
}

