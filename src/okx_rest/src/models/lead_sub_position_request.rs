/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LeadSubPositionRequest {
    /// Instrument type. Default is SWAP.
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<InstType>,
    /// Data type.   `lead`: lead trading (default), `copy`: copy trading. 
    #[serde(rename = "subPosType", skip_serializing_if = "Option::is_none")]
    pub sub_pos_type: Option<SubPosType>,
    /// Lead or copy position ID.
    #[serde(rename = "subPosId")]
    pub sub_pos_id: String,
    /// Order type.   `market`: Market order (default), `limit`: Limit order. 
    #[serde(rename = "ordType", skip_serializing_if = "Option::is_none")]
    pub ord_type: Option<OrdType>,
    /// Order price. Only applicable to limit orders and SPOT lead traders.   If the price is 0, the pending order will be canceled.   Setting `px` after placing a limit order modifies the order. 
    #[serde(rename = "px", skip_serializing_if = "Option::is_none")]
    pub px: Option<String>,
    /// Order tag. A combination of case-sensitive alphanumerics,   all numbers, or all letters of up to 16 characters. 
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

impl LeadSubPositionRequest {
    pub fn new(sub_pos_id: String) -> LeadSubPositionRequest {
        LeadSubPositionRequest {
            inst_type: None,
            sub_pos_type: None,
            sub_pos_id,
            ord_type: None,
            px: None,
            tag: None,
        }
    }
}
/// Instrument type. Default is SWAP.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InstType {
    #[serde(rename = "SPOT")]
    Spot,
    #[serde(rename = "SWAP")]
    Swap,
}

impl Default for InstType {
    fn default() -> InstType {
        Self::Spot
    }
}
/// Data type.   `lead`: lead trading (default), `copy`: copy trading. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubPosType {
    #[serde(rename = "lead")]
    Lead,
    #[serde(rename = "copy")]
    Copy,
}

impl Default for SubPosType {
    fn default() -> SubPosType {
        Self::Lead
    }
}
/// Order type.   `market`: Market order (default), `limit`: Limit order. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrdType {
    #[serde(rename = "market")]
    Market,
    #[serde(rename = "limit")]
    Limit,
}

impl Default for OrdType {
    fn default() -> OrdType {
        Self::Market
    }
}

