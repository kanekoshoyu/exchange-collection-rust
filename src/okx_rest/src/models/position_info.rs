/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PositionInfo {
    /// Client-supplied ID.   A unique identifier consisting of case-sensitive alphanumeric characters,   all numbers, or all letters (up to 32 characters).   Can be left empty. 
    #[serde(rename = "clOrdId", skip_serializing_if = "Option::is_none")]
    pub cl_ord_id: Option<String>,
    /// Instrument ID (e.g., BTC-USDT-SWAP).   Required for identifying the specific trading instrument. 
    #[serde(rename = "instId")]
    pub inst_id: String,
    /// Position side.   - Default: `net` in net mode, and this parameter can be omitted.   - In long/short mode, it must be provided:     - `long` for close-long.     - `short` for close-short. 
    #[serde(rename = "posSide")]
    pub pos_side: PosSide,
    /// Order tag.   A unique identifier composed of case-sensitive alphanumeric characters,   all numbers, or all letters (up to 16 characters).   Can be left empty. 
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

impl PositionInfo {
    pub fn new(inst_id: String, pos_side: PosSide) -> PositionInfo {
        PositionInfo {
            cl_ord_id: None,
            inst_id,
            pos_side,
            tag: None,
        }
    }
}
/// Position side.   - Default: `net` in net mode, and this parameter can be omitted.   - In long/short mode, it must be provided:     - `long` for close-long.     - `short` for close-short. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PosSide {
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "short")]
    Short,
    #[serde(rename = "net")]
    Net,
}

impl Default for PosSide {
    fn default() -> PosSide {
        Self::Long
    }
}

