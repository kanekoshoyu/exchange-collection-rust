/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AiParams {
    /// Instrument ID, e.g., BTC-USDT-SWAP
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Algo order type (Spot grid or Contract grid)
    #[serde(rename = "algoOrdType", skip_serializing_if = "Option::is_none")]
    pub algo_ord_type: Option<AlgoOrdType>,
    /// Back testing duration. Default is 7D for Spot grid. Only 7D is available for Contract grid.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<Duration>,
    /// Grid quantity
    #[serde(rename = "gridNum", skip_serializing_if = "Option::is_none")]
    pub grid_num: Option<String>,
    /// Upper price of price range
    #[serde(rename = "maxPx", skip_serializing_if = "Option::is_none")]
    pub max_px: Option<String>,
    /// Lower price of price range
    #[serde(rename = "minPx", skip_serializing_if = "Option::is_none")]
    pub min_px: Option<String>,
    /// Estimated maximum profit margin per grid
    #[serde(rename = "perMaxProfitRate", skip_serializing_if = "Option::is_none")]
    pub per_max_profit_rate: Option<String>,
    /// Estimated minimum profit margin per grid
    #[serde(rename = "perMinProfitRate", skip_serializing_if = "Option::is_none")]
    pub per_min_profit_rate: Option<String>,
    /// Grid annualized rate
    #[serde(rename = "annualizedRate", skip_serializing_if = "Option::is_none")]
    pub annualized_rate: Option<String>,
    /// The minimum invest amount
    #[serde(rename = "minInvestment", skip_serializing_if = "Option::is_none")]
    pub min_investment: Option<String>,
    /// The invest currency
    #[serde(rename = "ccy", skip_serializing_if = "Option::is_none")]
    pub ccy: Option<String>,
    /// Grid type (1: Arithmetic, 2: Geometric)
    #[serde(rename = "runType", skip_serializing_if = "Option::is_none")]
    pub run_type: Option<RunType>,
    /// Contract grid type (only applicable to contract grid)
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// Leverage (only applicable to contract grid)
    #[serde(rename = "lever", skip_serializing_if = "Option::is_none")]
    pub lever: Option<String>,
}

impl AiParams {
    pub fn new() -> AiParams {
        AiParams {
            inst_id: None,
            algo_ord_type: None,
            duration: None,
            grid_num: None,
            max_px: None,
            min_px: None,
            per_max_profit_rate: None,
            per_min_profit_rate: None,
            annualized_rate: None,
            min_investment: None,
            ccy: None,
            run_type: None,
            direction: None,
            lever: None,
        }
    }
}
/// Algo order type (Spot grid or Contract grid)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlgoOrdType {
    #[serde(rename = "grid")]
    Grid,
    #[serde(rename = "contract_grid")]
    ContractGrid,
}

impl Default for AlgoOrdType {
    fn default() -> AlgoOrdType {
        Self::Grid
    }
}
/// Back testing duration. Default is 7D for Spot grid. Only 7D is available for Contract grid.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Duration {
    #[serde(rename = "7D")]
    Variant7D,
    #[serde(rename = "30D")]
    Variant30D,
    #[serde(rename = "180D")]
    Variant180D,
}

impl Default for Duration {
    fn default() -> Duration {
        Self::Variant7D
    }
}
/// Grid type (1: Arithmetic, 2: Geometric)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for RunType {
    fn default() -> RunType {
        Self::Variant1
    }
}
/// Contract grid type (only applicable to contract grid)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "short")]
    Short,
    #[serde(rename = "neutral")]
    Neutral,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Long
    }
}

