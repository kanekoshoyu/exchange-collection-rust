/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GridStopRequest {
    /// Algo ID.
    #[serde(rename = "algoId")]
    pub algo_id: String,
    /// Instrument ID, e.g., BTC-USDT.
    #[serde(rename = "instId")]
    pub inst_id: String,
    /// Algo order type: - `grid`: Spot grid - `contract_grid`: Contract grid 
    #[serde(rename = "algoOrdType")]
    pub algo_ord_type: AlgoOrdType,
    /// Stop type: - For Spot grid: `1` = Sell base currency, `2` = Keep base currency - For Contract grid: `1` = Market Close All positions, `2` = Keep positions 
    #[serde(rename = "stopType")]
    pub stop_type: StopType,
}

impl GridStopRequest {
    pub fn new(algo_id: String, inst_id: String, algo_ord_type: AlgoOrdType, stop_type: StopType) -> GridStopRequest {
        GridStopRequest {
            algo_id,
            inst_id,
            algo_ord_type,
            stop_type,
        }
    }
}
/// Algo order type: - `grid`: Spot grid - `contract_grid`: Contract grid 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlgoOrdType {
    #[serde(rename = "grid")]
    Grid,
    #[serde(rename = "contract_grid")]
    ContractGrid,
}

impl Default for AlgoOrdType {
    fn default() -> AlgoOrdType {
        Self::Grid
    }
}
/// Stop type: - For Spot grid: `1` = Sell base currency, `2` = Keep base currency - For Contract grid: `1` = Market Close All positions, `2` = Keep positions 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StopType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for StopType {
    fn default() -> StopType {
        Self::Variant1
    }
}

