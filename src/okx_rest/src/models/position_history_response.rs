/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PositionHistoryResponse {
    /// Position creation time, in Unix timestamp format (milliseconds).
    #[serde(rename = "cTime")]
    pub c_time: String,
    /// Average close price for the position.
    #[serde(rename = "closeAvgPx")]
    pub close_avg_px: String,
    /// Direction of the position, currently supports `net`.
    #[serde(rename = "direction")]
    pub direction: Direction,
    /// Instrument ID, such as ETH-USDT-SWAP.
    #[serde(rename = "instId")]
    pub inst_id: String,
    /// Leverage applied to the position.
    #[serde(rename = "lever")]
    pub lever: String,
    /// Margin mode, either cross or isolated.
    #[serde(rename = "mgnMode")]
    pub mgn_mode: MgnMode,
    /// Average open price for the position.
    #[serde(rename = "openAvgPx")]
    pub open_avg_px: String,
    /// Profit and loss (PnL) of the position.
    #[serde(rename = "pnl")]
    pub pnl: String,
    /// Profit and loss ratio of the position.
    #[serde(rename = "pnlRatio")]
    pub pnl_ratio: String,
    /// Last updated time for the position, in Unix timestamp format (milliseconds).
    #[serde(rename = "uTime")]
    pub u_time: String,
    /// Underlying asset, such as ETH-USDT.
    #[serde(rename = "uly")]
    pub uly: String,
}

impl PositionHistoryResponse {
    pub fn new(c_time: String, close_avg_px: String, direction: Direction, inst_id: String, lever: String, mgn_mode: MgnMode, open_avg_px: String, pnl: String, pnl_ratio: String, u_time: String, uly: String) -> PositionHistoryResponse {
        PositionHistoryResponse {
            c_time,
            close_avg_px,
            direction,
            inst_id,
            lever,
            mgn_mode,
            open_avg_px,
            pnl,
            pnl_ratio,
            u_time,
            uly,
        }
    }
}
/// Direction of the position, currently supports `net`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "net")]
    Net,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Net
    }
}
/// Margin mode, either cross or isolated.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MgnMode {
    #[serde(rename = "cross")]
    Cross,
    #[serde(rename = "isolated")]
    Isolated,
}

impl Default for MgnMode {
    fn default() -> MgnMode {
        Self::Cross
    }
}

