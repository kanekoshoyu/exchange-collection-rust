/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TradingBotGridOrderAlgoPostRequest {
    GridAlgoPlaceRequest(Box<models::GridAlgoPlaceRequest>),
    GridSpotRequest(Box<models::GridSpotRequest>),
    GridContractRequest(Box<models::GridContractRequest>),
}

impl Default for TradingBotGridOrderAlgoPostRequest {
    fn default() -> Self {
        Self::GridAlgoPlaceRequest(Default::default())
    }
}
/// Algo order type. Supported values:<br>- grid: Spot grid<br> - contract_grid: Contract grid
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlgoOrdType {
    #[serde(rename = "grid")]
    Grid,
    #[serde(rename = "contract_grid")]
    ContractGrid,
}

impl Default for AlgoOrdType {
    fn default() -> AlgoOrdType {
        Self::Grid
    }
}
/// Grid type:   1: Arithmetic   2: Geometric Default is Arithmetic. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for RunType {
    fn default() -> RunType {
        Self::Variant1
    }
}
/// Profit sharing ratio. Supported values:   - 0: No profit sharing   - 0.1: 10%   - 0.2: 20%   - 0.3: 30% 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProfitSharingRatio {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "0.1")]
    Variant0Period1,
    #[serde(rename = "0.2")]
    Variant0Period2,
    #[serde(rename = "0.3")]
    Variant0Period3,
}

impl Default for ProfitSharingRatio {
    fn default() -> ProfitSharingRatio {
        Self::Variant0
    }
}
/// Contract grid type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "short")]
    Short,
    #[serde(rename = "neutral")]
    Neutral,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Long
    }
}

