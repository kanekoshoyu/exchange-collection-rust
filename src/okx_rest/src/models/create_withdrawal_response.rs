/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateWithdrawalResponse {
    /// The requested amount for the transaction.
    #[serde(rename = "amt")]
    pub amt: String,
    /// The creation time of the transaction in ISO 8601 format.
    #[serde(rename = "cTime")]
    pub c_time: String,
    /// The client ID associated with the transaction.
    #[serde(rename = "clientId")]
    pub client_id: String,
    /// The currency of the transaction.
    #[serde(rename = "ccy")]
    pub ccy: String,
    /// The transaction fee.
    #[serde(rename = "fee")]
    pub fee: String,
    /// The unique order ID for the transaction.
    #[serde(rename = "ordId")]
    pub ord_id: String,
    /// The ID of the payment account used.
    #[serde(rename = "paymentAcctId")]
    pub payment_acct_id: String,
    /// The payment method used for the transaction.
    #[serde(rename = "paymentMethod")]
    pub payment_method: PaymentMethod,
    /// The state of the transaction.
    #[serde(rename = "state")]
    pub state: String,
    /// The update time of the transaction in ISO 8601 format.
    #[serde(rename = "uTime")]
    pub u_time: String,
}

impl CreateWithdrawalResponse {
    pub fn new(amt: String, c_time: String, client_id: String, ccy: String, fee: String, ord_id: String, payment_acct_id: String, payment_method: PaymentMethod, state: String, u_time: String) -> CreateWithdrawalResponse {
        CreateWithdrawalResponse {
            amt,
            c_time,
            client_id,
            ccy,
            fee,
            ord_id,
            payment_acct_id,
            payment_method,
            state,
            u_time,
        }
    }
}
/// The payment method used for the transaction.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentMethod {
    #[serde(rename = "SEPA")]
    Sepa,
    #[serde(rename = "TR_BANKS")]
    TrBanks,
    #[serde(rename = "PIX")]
    Pix,
}

impl Default for PaymentMethod {
    fn default() -> PaymentMethod {
        Self::Sepa
    }
}

