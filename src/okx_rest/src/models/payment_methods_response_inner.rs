/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentMethodsResponseInner {
    /// The account number, which can be an IBAN or other bank account number.
    #[serde(rename = "acctNum", skip_serializing_if = "Option::is_none")]
    pub acct_num: Option<String>,
    /// The Swift code / BIC / bank code associated with the account.
    #[serde(rename = "bankCode", skip_serializing_if = "Option::is_none")]
    pub bank_code: Option<String>,
    /// The name of the bank associated with the account.
    #[serde(rename = "bankName", skip_serializing_if = "Option::is_none")]
    pub bank_name: Option<String>,
    /// The currency code.
    #[serde(rename = "ccy", skip_serializing_if = "Option::is_none")]
    pub ccy: Option<String>,
    /// The daily transaction limit.
    #[serde(rename = "dailyLimit", skip_serializing_if = "Option::is_none")]
    pub daily_limit: Option<String>,
    /// The remaining daily transaction limit.
    #[serde(rename = "dailyLimitRemaining", skip_serializing_if = "Option::is_none")]
    pub daily_limit_remaining: Option<String>,
    /// The fee rate for each deposit, expressed as a percentage. For example: 0.02 (2 percent fee for each transaction).
    #[serde(rename = "feeRate", skip_serializing_if = "Option::is_none")]
    pub fee_rate: Option<String>,
    /// The lifetime transaction limit. Returns the configured value, or an empty string if not configured.
    #[serde(rename = "lifetimeLimit", skip_serializing_if = "Option::is_none")]
    pub lifetime_limit: Option<String>,
    #[serde(rename = "limits", skip_serializing_if = "Option::is_none")]
    pub limits: Option<Box<models::PaymentMethodsResponseInnerLimits>>,
    /// The payment method associated with the currency. For example: SEPA, TR_BANKS, PIX.
    #[serde(rename = "paymentMethod", skip_serializing_if = "Option::is_none")]
    pub payment_method: Option<String>,
    /// The name of the recipient.
    #[serde(rename = "recipientName", skip_serializing_if = "Option::is_none")]
    pub recipient_name: Option<String>,
    /// The state of the account (e.g., active).
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The weekly transaction limit.
    #[serde(rename = "weeklyLimit", skip_serializing_if = "Option::is_none")]
    pub weekly_limit: Option<String>,
    /// The remaining weekly transaction limit.
    #[serde(rename = "weeklyLimitRemaining", skip_serializing_if = "Option::is_none")]
    pub weekly_limit_remaining: Option<String>,
}

impl PaymentMethodsResponseInner {
    pub fn new() -> PaymentMethodsResponseInner {
        PaymentMethodsResponseInner {
            acct_num: None,
            bank_code: None,
            bank_name: None,
            ccy: None,
            daily_limit: None,
            daily_limit_remaining: None,
            fee_rate: None,
            lifetime_limit: None,
            limits: None,
            payment_method: None,
            recipient_name: None,
            state: None,
            weekly_limit: None,
            weekly_limit_remaining: None,
        }
    }
}

