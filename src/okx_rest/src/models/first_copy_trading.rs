/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FirstCopyTrading {
    /// Instrument type. Default is SWAP.
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<InstType>,
    /// Lead trader unique code. A combination of case-sensitive alphanumerics with a length of 16 characters.
    #[serde(rename = "uniqueCode")]
    pub unique_code: String,
    /// Copy margin mode.
    #[serde(rename = "copyMgnMode")]
    pub copy_mgn_mode: CopyMgnMode,
    /// Copy contract type set by the user.
    #[serde(rename = "copyInstIdType")]
    pub copy_inst_id_type: CopyInstIdType,
    /// Instrument ID. If there are multiple instruments, separate them with commas. Required if `copyInstIdType` is `custom`.
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Copy mode. Default is fixed_amount.
    #[serde(rename = "copyMode", skip_serializing_if = "Option::is_none")]
    pub copy_mode: Option<CopyMode>,
    /// Maximum total amount in USDT to invest at any given time across all orders in this copy trade.
    #[serde(rename = "copyTotalAmt")]
    pub copy_total_amt: String,
    /// Copy amount per order in USDT. Required if `copyMode` is `fixed_amount`.
    #[serde(rename = "copyAmt", skip_serializing_if = "Option::is_none")]
    pub copy_amt: Option<String>,
    /// Copy ratio per order. Required if `copyMode` is `ratio_copy`.
    #[serde(rename = "copyRatio", skip_serializing_if = "Option::is_none")]
    pub copy_ratio: Option<String>,
    /// Take profit per order. 0.1 represents 10%.
    #[serde(rename = "tpRatio", skip_serializing_if = "Option::is_none")]
    pub tp_ratio: Option<String>,
    /// Stop loss per order. 0.1 represents 10%.
    #[serde(rename = "slRatio", skip_serializing_if = "Option::is_none")]
    pub sl_ratio: Option<String>,
    /// Total stop loss in USDT for the trader. You stop copying if your net loss reaches this amount.
    #[serde(rename = "slTotalAmt", skip_serializing_if = "Option::is_none")]
    pub sl_total_amt: Option<String>,
    /// Action type for open positions. Default is copy_close.
    #[serde(rename = "subPosCloseType")]
    pub sub_pos_close_type: SubPosCloseType,
}

impl FirstCopyTrading {
    pub fn new(unique_code: String, copy_mgn_mode: CopyMgnMode, copy_inst_id_type: CopyInstIdType, copy_total_amt: String, sub_pos_close_type: SubPosCloseType) -> FirstCopyTrading {
        FirstCopyTrading {
            inst_type: None,
            unique_code,
            copy_mgn_mode,
            copy_inst_id_type,
            inst_id: None,
            copy_mode: None,
            copy_total_amt,
            copy_amt: None,
            copy_ratio: None,
            tp_ratio: None,
            sl_ratio: None,
            sl_total_amt: None,
            sub_pos_close_type,
        }
    }
}
/// Instrument type. Default is SWAP.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InstType {
    #[serde(rename = "SWAP")]
    Swap,
}

impl Default for InstType {
    fn default() -> InstType {
        Self::Swap
    }
}
/// Copy margin mode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CopyMgnMode {
    #[serde(rename = "cross")]
    Cross,
    #[serde(rename = "isolated")]
    Isolated,
    #[serde(rename = "copy")]
    Copy,
}

impl Default for CopyMgnMode {
    fn default() -> CopyMgnMode {
        Self::Cross
    }
}
/// Copy contract type set by the user.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CopyInstIdType {
    #[serde(rename = "custom")]
    Custom,
    #[serde(rename = "copy")]
    Copy,
}

impl Default for CopyInstIdType {
    fn default() -> CopyInstIdType {
        Self::Custom
    }
}
/// Copy mode. Default is fixed_amount.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CopyMode {
    #[serde(rename = "fixed_amount")]
    FixedAmount,
    #[serde(rename = "ratio_copy")]
    RatioCopy,
}

impl Default for CopyMode {
    fn default() -> CopyMode {
        Self::FixedAmount
    }
}
/// Action type for open positions. Default is copy_close.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubPosCloseType {
    #[serde(rename = "market_close")]
    MarketClose,
    #[serde(rename = "copy_close")]
    CopyClose,
    #[serde(rename = "manual_close")]
    ManualClose,
}

impl Default for SubPosCloseType {
    fn default() -> SubPosCloseType {
        Self::MarketClose
    }
}

