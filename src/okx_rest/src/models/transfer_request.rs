/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferRequest {
    /// Transfer type
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Transfer currency, e.g. USDT
    #[serde(rename = "ccy")]
    pub ccy: String,
    /// Amount to be transferred
    #[serde(rename = "amt")]
    pub amt: String,
    /// The remitting account
    #[serde(rename = "from")]
    pub from: From,
    /// The beneficiary account
    #[serde(rename = "to")]
    pub to: To,
    /// Name of the sub-account. Required for types 1, 2, and 4
    #[serde(rename = "subAcct", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sub_acct: Option<Option<String>>,
    /// Whether or not borrowed coins can be transferred out under Spot mode/Multi-currency margin/Portfolio margin
    #[serde(rename = "loanTrans", skip_serializing_if = "Option::is_none")]
    pub loan_trans: Option<bool>,
    /// Ignore position risk. Default is false. Applicable to Portfolio margin
    #[serde(rename = "omitPosRisk", skip_serializing_if = "Option::is_none")]
    pub omit_pos_risk: Option<String>,
    /// Client-supplied ID. A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.
    #[serde(rename = "clientId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<Option<String>>,
}

impl TransferRequest {
    pub fn new(r#type: Type, ccy: String, amt: String, from: From, to: To) -> TransferRequest {
        TransferRequest {
            r#type,
            ccy,
            amt,
            from,
            to,
            sub_acct: None,
            loan_trans: None,
            omit_pos_risk: None,
            client_id: None,
        }
    }
}
/// Transfer type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
}

impl Default for Type {
    fn default() -> Type {
        Self::Variant0
    }
}
/// The remitting account
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum From {
    #[serde(rename = "6")]
    Variant6,
    #[serde(rename = "18")]
    Variant18,
}

impl Default for From {
    fn default() -> From {
        Self::Variant6
    }
}
/// The beneficiary account
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum To {
    #[serde(rename = "6")]
    Variant6,
    #[serde(rename = "18")]
    Variant18,
}

impl Default for To {
    fn default() -> To {
        Self::Variant6
    }
}

