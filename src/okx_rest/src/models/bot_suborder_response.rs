/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BotSuborderResponse {
    /// Accumulated filled size.
    #[serde(rename = "accFillSz", skip_serializing_if = "Option::is_none")]
    pub acc_fill_sz: Option<String>,
    /// Client-supplied Algo ID. Can be empty.
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// Algo ID.
    #[serde(rename = "algoId", skip_serializing_if = "Option::is_none")]
    pub algo_id: Option<String>,
    /// Algo order type.
    #[serde(rename = "algoOrdType", skip_serializing_if = "Option::is_none")]
    pub algo_ord_type: Option<AlgoOrdType>,
    /// Average executed price.
    #[serde(rename = "avgPx", skip_serializing_if = "Option::is_none")]
    pub avg_px: Option<String>,
    /// Creation time in Unix timestamp format (milliseconds).
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
    /// Margin currency. Can be empty.
    #[serde(rename = "ccy", skip_serializing_if = "Option::is_none")]
    pub ccy: Option<String>,
    /// Client-supplied order ID.
    #[serde(rename = "clOrdId", skip_serializing_if = "Option::is_none")]
    pub cl_ord_id: Option<String>,
    /// Contract value.
    #[serde(rename = "ctVal", skip_serializing_if = "Option::is_none")]
    pub ct_val: Option<String>,
    /// Fee incurred by the order.
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// Fee currency.
    #[serde(rename = "feeCcy", skip_serializing_if = "Option::is_none")]
    pub fee_ccy: Option<String>,
    /// Instrument ID, e.g., ETH-USDT-SWAP.
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Instrument type.
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<InstType>,
    /// Leverage used.
    #[serde(rename = "lever", skip_serializing_if = "Option::is_none")]
    pub lever: Option<String>,
    /// Order ID.
    #[serde(rename = "ordId", skip_serializing_if = "Option::is_none")]
    pub ord_id: Option<String>,
    /// Order type.
    #[serde(rename = "ordType", skip_serializing_if = "Option::is_none")]
    pub ord_type: Option<OrdType>,
    /// Profit and Loss (P&L) of the order.
    #[serde(rename = "pnl", skip_serializing_if = "Option::is_none")]
    pub pnl: Option<String>,
    /// Position side.
    #[serde(rename = "posSide", skip_serializing_if = "Option::is_none")]
    pub pos_side: Option<PosSide>,
    /// Order price. Can be empty.
    #[serde(rename = "px", skip_serializing_if = "Option::is_none")]
    pub px: Option<String>,
    /// Order side.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Order state.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Order size.
    #[serde(rename = "sz", skip_serializing_if = "Option::is_none")]
    pub sz: Option<String>,
    /// Additional order tag. Can be empty.
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// Trade mode.
    #[serde(rename = "tdMode", skip_serializing_if = "Option::is_none")]
    pub td_mode: Option<TdMode>,
    /// Update time in Unix timestamp format (milliseconds).
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
}

impl BotSuborderResponse {
    pub fn new() -> BotSuborderResponse {
        BotSuborderResponse {
            acc_fill_sz: None,
            algo_cl_ord_id: None,
            algo_id: None,
            algo_ord_type: None,
            avg_px: None,
            c_time: None,
            ccy: None,
            cl_ord_id: None,
            ct_val: None,
            fee: None,
            fee_ccy: None,
            inst_id: None,
            inst_type: None,
            lever: None,
            ord_id: None,
            ord_type: None,
            pnl: None,
            pos_side: None,
            px: None,
            side: None,
            state: None,
            sz: None,
            tag: None,
            td_mode: None,
            u_time: None,
        }
    }
}
/// Algo order type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlgoOrdType {
    #[serde(rename = "contract")]
    Contract,
}

impl Default for AlgoOrdType {
    fn default() -> AlgoOrdType {
        Self::Contract
    }
}
/// Instrument type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InstType {
    #[serde(rename = "SWAP")]
    Swap,
}

impl Default for InstType {
    fn default() -> InstType {
        Self::Swap
    }
}
/// Order type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrdType {
    #[serde(rename = "market")]
    Market,
}

impl Default for OrdType {
    fn default() -> OrdType {
        Self::Market
    }
}
/// Position side.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PosSide {
    #[serde(rename = "net")]
    Net,
}

impl Default for PosSide {
    fn default() -> PosSide {
        Self::Net
    }
}
/// Order side.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Order state.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "filled")]
    Filled,
}

impl Default for State {
    fn default() -> State {
        Self::Filled
    }
}
/// Trade mode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TdMode {
    #[serde(rename = "cross")]
    Cross,
}

impl Default for TdMode {
    fn default() -> TdMode {
        Self::Cross
    }
}

