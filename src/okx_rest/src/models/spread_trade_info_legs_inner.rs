/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpreadTradeInfoLegsInner {
    /// Instrument ID, e.g. BTC-USDT-SWAP
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// The price the leg executed
    #[serde(rename = "px", skip_serializing_if = "Option::is_none")]
    pub px: Option<String>,
    /// The size of each leg
    #[serde(rename = "sz", skip_serializing_if = "Option::is_none")]
    pub sz: Option<String>,
    /// Filled amount of the contract. Only applicable to contracts, return \"\" for spot.
    #[serde(rename = "szCont", skip_serializing_if = "Option::is_none")]
    pub sz_cont: Option<String>,
    /// The direction of the leg
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Fee. Negative number represents the user transaction fee charged by the platform. Positive number represents rebate.
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// Fee currency
    #[serde(rename = "feeCcy", skip_serializing_if = "Option::is_none")]
    pub fee_ccy: Option<String>,
    /// Traded ID in the OKX orderbook
    #[serde(rename = "tradeId", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<String>,
}

impl SpreadTradeInfoLegsInner {
    pub fn new() -> SpreadTradeInfoLegsInner {
        SpreadTradeInfoLegsInner {
            inst_id: None,
            px: None,
            sz: None,
            sz_cont: None,
            side: None,
            fee: None,
            fee_ccy: None,
            trade_id: None,
        }
    }
}
/// The direction of the leg
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}

