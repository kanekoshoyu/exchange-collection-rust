/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecurringAlgoOrder {
    /// Algo ID
    #[serde(rename = "algoId", skip_serializing_if = "Option::is_none")]
    pub algo_id: Option<String>,
    /// Client-supplied Algo ID
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// Instrument type
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<String>,
    /// Algo order created time, Unix timestamp format in milliseconds
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
    /// Algo order updated time, Unix timestamp format in milliseconds
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
    /// Algo order type
    #[serde(rename = "algoOrdType", skip_serializing_if = "Option::is_none")]
    pub algo_ord_type: Option<AlgoOrdType>,
    /// Algo order state
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Custom name for trading bot, no more than 40 characters
    #[serde(rename = "stgyName", skip_serializing_if = "Option::is_none")]
    pub stgy_name: Option<String>,
    /// Recurring buy info
    #[serde(rename = "recurringList", skip_serializing_if = "Option::is_none")]
    pub recurring_list: Option<Vec<models::RecurringOrderAlgo>>,
    /// Period
    #[serde(rename = "period", skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    /// Recurring buy date. - When the period is monthly, the value range is an integer of [1,28]. - When the period is weekly, the value range is an integer of [1,7]. 
    #[serde(rename = "recurringDay", skip_serializing_if = "Option::is_none")]
    pub recurring_day: Option<i32>,
    /// Recurring buy by hourly. Possible values: 1, 4, 8, 12.
    #[serde(rename = "recurringHour", skip_serializing_if = "Option::is_none")]
    pub recurring_hour: Option<i32>,
    /// Recurring buy time, the value range is an integer of [0,23]
    #[serde(rename = "recurringTime", skip_serializing_if = "Option::is_none")]
    pub recurring_time: Option<i32>,
    /// UTC time zone, the value range is an integer of [-12,14]. E.g., \"8\" representing UTC+8 (East 8 District), Beijing Time. 
    #[serde(rename = "timeZone", skip_serializing_if = "Option::is_none")]
    pub time_zone: Option<i32>,
    /// Quantity invested per cycle
    #[serde(rename = "amt", skip_serializing_if = "Option::is_none")]
    pub amt: Option<String>,
    /// Accumulate quantity invested
    #[serde(rename = "investmentAmt", skip_serializing_if = "Option::is_none")]
    pub investment_amt: Option<String>,
    /// The invested quantity unit
    #[serde(rename = "investmentCcy", skip_serializing_if = "Option::is_none")]
    pub investment_ccy: Option<InvestmentCcy>,
    /// Total P&L
    #[serde(rename = "totalPnl", skip_serializing_if = "Option::is_none")]
    pub total_pnl: Option<String>,
    /// Total annualized rate of yield
    #[serde(rename = "totalAnnRate", skip_serializing_if = "Option::is_none")]
    pub total_ann_rate: Option<String>,
    /// Rate of yield
    #[serde(rename = "pnlRatio", skip_serializing_if = "Option::is_none")]
    pub pnl_ratio: Option<String>,
    /// Market value in unit of USDT
    #[serde(rename = "mktCap", skip_serializing_if = "Option::is_none")]
    pub mkt_cap: Option<String>,
    /// Accumulate recurring buy cycles
    #[serde(rename = "cycles", skip_serializing_if = "Option::is_none")]
    pub cycles: Option<i32>,
    /// Order tag
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

impl RecurringAlgoOrder {
    pub fn new() -> RecurringAlgoOrder {
        RecurringAlgoOrder {
            algo_id: None,
            algo_cl_ord_id: None,
            inst_type: None,
            c_time: None,
            u_time: None,
            algo_ord_type: None,
            state: None,
            stgy_name: None,
            recurring_list: None,
            period: None,
            recurring_day: None,
            recurring_hour: None,
            recurring_time: None,
            time_zone: None,
            amt: None,
            investment_amt: None,
            investment_ccy: None,
            total_pnl: None,
            total_ann_rate: None,
            pnl_ratio: None,
            mkt_cap: None,
            cycles: None,
            tag: None,
        }
    }
}
/// Algo order type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlgoOrdType {
    #[serde(rename = "recurring")]
    Recurring,
}

impl Default for AlgoOrdType {
    fn default() -> AlgoOrdType {
        Self::Recurring
    }
}
/// Algo order state
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "stopping")]
    Stopping,
    #[serde(rename = "pause")]
    Pause,
}

impl Default for State {
    fn default() -> State {
        Self::Running
    }
}
/// Period
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Period {
    #[serde(rename = "monthly")]
    Monthly,
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "daily")]
    Daily,
    #[serde(rename = "hourly")]
    Hourly,
}

impl Default for Period {
    fn default() -> Period {
        Self::Monthly
    }
}
/// The invested quantity unit
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InvestmentCcy {
    #[serde(rename = "USDT")]
    Usdt,
    #[serde(rename = "USDC")]
    Usdc,
}

impl Default for InvestmentCcy {
    fn default() -> InvestmentCcy {
        Self::Usdt
    }
}

