/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GridAlgoPlaceRequest {
    /// Instrument ID, e.g., BTC-USDT-SWAP.
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Algo order type. Supported values:<br>- grid: Spot grid<br> - contract_grid: Contract grid
    #[serde(rename = "algoOrdType", skip_serializing_if = "Option::is_none")]
    pub algo_ord_type: Option<AlgoOrdType>,
    /// Upper price of price range.
    #[serde(rename = "maxPx", skip_serializing_if = "Option::is_none")]
    pub max_px: Option<String>,
    /// Lower price of price range.
    #[serde(rename = "minPx", skip_serializing_if = "Option::is_none")]
    pub min_px: Option<String>,
    /// Grid quantity.
    #[serde(rename = "gridNum", skip_serializing_if = "Option::is_none")]
    pub grid_num: Option<String>,
    /// Grid type:   1: Arithmetic   2: Geometric Default is Arithmetic. 
    #[serde(rename = "runType", skip_serializing_if = "Option::is_none")]
    pub run_type: Option<RunType>,
    /// TP trigger price. Applicable to Spot grid/Contract grid.
    #[serde(rename = "tpTriggerPx", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px: Option<String>,
    /// SL trigger price. Applicable to Spot grid/Contract grid.
    #[serde(rename = "slTriggerPx", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px: Option<String>,
    /// Client-supplied Algo ID. A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters. 
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// Order tag.
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// Profit sharing ratio. Supported values:   - 0: No profit sharing   - 0.1: 10%   - 0.2: 20%   - 0.3: 30% 
    #[serde(rename = "profitSharingRatio", skip_serializing_if = "Option::is_none")]
    pub profit_sharing_ratio: Option<ProfitSharingRatio>,
    #[serde(rename = "triggerParams", skip_serializing_if = "Option::is_none")]
    pub trigger_params: Option<Vec<models::GridAlgoPlaceRequestTriggerParamsInner>>,
}

impl GridAlgoPlaceRequest {
    pub fn new() -> GridAlgoPlaceRequest {
        GridAlgoPlaceRequest {
            inst_id: None,
            algo_ord_type: None,
            max_px: None,
            min_px: None,
            grid_num: None,
            run_type: None,
            tp_trigger_px: None,
            sl_trigger_px: None,
            algo_cl_ord_id: None,
            tag: None,
            profit_sharing_ratio: None,
            trigger_params: None,
        }
    }
}
/// Algo order type. Supported values:<br>- grid: Spot grid<br> - contract_grid: Contract grid
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlgoOrdType {
    #[serde(rename = "grid")]
    Grid,
    #[serde(rename = "contract_grid")]
    ContractGrid,
}

impl Default for AlgoOrdType {
    fn default() -> AlgoOrdType {
        Self::Grid
    }
}
/// Grid type:   1: Arithmetic   2: Geometric Default is Arithmetic. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for RunType {
    fn default() -> RunType {
        Self::Variant1
    }
}
/// Profit sharing ratio. Supported values:   - 0: No profit sharing   - 0.1: 10%   - 0.2: 20%   - 0.3: 30% 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProfitSharingRatio {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "0.1")]
    Variant0Period1,
    #[serde(rename = "0.2")]
    Variant0Period2,
    #[serde(rename = "0.3")]
    Variant0Period3,
}

impl Default for ProfitSharingRatio {
    fn default() -> ProfitSharingRatio {
        Self::Variant0
    }
}

