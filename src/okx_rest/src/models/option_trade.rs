/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OptionTrade : 24h trading volume and option trade information.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OptionTrade {
    /// 24h trading volume, with a unit of contract.
    #[serde(rename = "vol24h", skip_serializing_if = "Option::is_none")]
    pub vol24h: Option<String>,
    /// Option type.
    #[serde(rename = "optType", skip_serializing_if = "Option::is_none")]
    pub opt_type: Option<OptType>,
    /// The list of trade data.
    #[serde(rename = "tradeInfo", skip_serializing_if = "Option::is_none")]
    pub trade_info: Option<Vec<models::Trades>>,
}

impl OptionTrade {
    /// 24h trading volume and option trade information.
    pub fn new() -> OptionTrade {
        OptionTrade {
            vol24h: None,
            opt_type: None,
            trade_info: None,
        }
    }
}
/// Option type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OptType {
    #[serde(rename = "C")]
    C,
    #[serde(rename = "P")]
    P,
}

impl Default for OptType {
    fn default() -> OptType {
        Self::C
    }
}

