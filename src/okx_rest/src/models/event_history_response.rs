/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventHistoryResponse {
    /// Algo ID.
    #[serde(rename = "algoId", skip_serializing_if = "Option::is_none")]
    pub algo_id: Option<String>,
    /// Event type.
    #[serde(rename = "eventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<EventType>,
    /// Event timestamp of creation in Unix timestamp format (milliseconds).
    #[serde(rename = "eventCtime", skip_serializing_if = "Option::is_none")]
    pub event_ctime: Option<String>,
    /// Event timestamp of update in Unix timestamp format (milliseconds).
    #[serde(rename = "eventUtime", skip_serializing_if = "Option::is_none")]
    pub event_utime: Option<String>,
    /// Event process message.
    #[serde(rename = "eventProcessMsg", skip_serializing_if = "Option::is_none")]
    pub event_process_msg: Option<String>,
    /// Event status.
    #[serde(rename = "eventStatus", skip_serializing_if = "Option::is_none")]
    pub event_status: Option<EventStatus>,
    /// Triggered sub-order data.
    #[serde(rename = "triggeredOrdData", skip_serializing_if = "Option::is_none")]
    pub triggered_ord_data: Option<Vec<models::EventHistoryResponseTriggeredOrdDataInner>>,
}

impl EventHistoryResponse {
    pub fn new() -> EventHistoryResponse {
        EventHistoryResponse {
            algo_id: None,
            event_type: None,
            event_ctime: None,
            event_utime: None,
            event_process_msg: None,
            event_status: None,
            triggered_ord_data: None,
        }
    }
}
/// Event type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventType {
    #[serde(rename = "system_action")]
    SystemAction,
    #[serde(rename = "user_action")]
    UserAction,
    #[serde(rename = "signal_processing")]
    SignalProcessing,
}

impl Default for EventType {
    fn default() -> EventType {
        Self::SystemAction
    }
}
/// Event status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventStatus {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
}

impl Default for EventStatus {
    fn default() -> EventStatus {
        Self::Success
    }
}

