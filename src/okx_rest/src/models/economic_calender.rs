/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EconomicCalender {
    /// Calendar ID
    #[serde(rename = "calendarId")]
    pub calendar_id: String,
    /// Estimated release time of the value of actual field, in Unix timestamp format (milliseconds).
    #[serde(rename = "date")]
    pub date: String,
    /// Country, region, or entity.
    #[serde(rename = "region")]
    pub region: String,
    /// Category name.
    #[serde(rename = "category")]
    pub category: String,
    /// Event name.
    #[serde(rename = "event")]
    pub event: String,
    /// Date for which the datapoint refers to.
    #[serde(rename = "refDate")]
    pub ref_date: String,
    /// The actual value of this event.
    #[serde(rename = "actual")]
    pub actual: String,
    /// Latest actual value of the previous period. The value will be revised if revision is applicable.
    #[serde(rename = "previous")]
    pub previous: String,
    /// Average forecast among a representative group of economists.
    #[serde(rename = "forecast")]
    pub forecast: String,
    /// Indicates the time of the event: 0 for known, 1 for unknown exact time.
    #[serde(rename = "dateSpan")]
    pub date_span: DateSpan,
    /// Level of importance: 1 (low), 2 (medium), 3 (high).
    #[serde(rename = "importance")]
    pub importance: Importance,
    /// Update time of this record, in Unix timestamp format (milliseconds).
    #[serde(rename = "uTime")]
    pub u_time: String,
    /// The initial value of the previous period. Only applicable when revision happens.
    #[serde(rename = "prevInitial", skip_serializing_if = "Option::is_none")]
    pub prev_initial: Option<String>,
    /// Currency of the data.
    #[serde(rename = "ccy")]
    pub ccy: String,
    /// Unit of the data.
    #[serde(rename = "unit")]
    pub unit: String,
}

impl EconomicCalender {
    pub fn new(calendar_id: String, date: String, region: String, category: String, event: String, ref_date: String, actual: String, previous: String, forecast: String, date_span: DateSpan, importance: Importance, u_time: String, ccy: String, unit: String) -> EconomicCalender {
        EconomicCalender {
            calendar_id,
            date,
            region,
            category,
            event,
            ref_date,
            actual,
            previous,
            forecast,
            date_span,
            importance,
            u_time,
            prev_initial: None,
            ccy,
            unit,
        }
    }
}
/// Indicates the time of the event: 0 for known, 1 for unknown exact time.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DateSpan {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for DateSpan {
    fn default() -> DateSpan {
        Self::Variant0
    }
}
/// Level of importance: 1 (low), 2 (medium), 3 (high).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Importance {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
}

impl Default for Importance {
    fn default() -> Importance {
        Self::Variant1
    }
}

