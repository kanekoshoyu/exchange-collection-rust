/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FundingRate {
    /// Instrument type, e.g., SWAP.
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<String>,
    /// Instrument ID, e.g., BTC-USD-SWAP.
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Funding rate mechanism. Valid values are:<br> - `current_period`<br>- `next_period`
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Current funding rate.
    #[serde(rename = "fundingRate", skip_serializing_if = "Option::is_none")]
    pub funding_rate: Option<String>,
    /// Forecasted funding rate for the next period. The value will be \"\" if the method is `current_period`. 
    #[serde(rename = "nextFundingRate", skip_serializing_if = "Option::is_none")]
    pub next_funding_rate: Option<String>,
    /// Settlement time, Unix timestamp format in milliseconds, e.g., 1597026383085.
    #[serde(rename = "fundingTime", skip_serializing_if = "Option::is_none")]
    pub funding_time: Option<String>,
    /// Forecasted funding time for the next period, Unix timestamp format in milliseconds, e.g., 1597026383085.
    #[serde(rename = "nextFundingTime", skip_serializing_if = "Option::is_none")]
    pub next_funding_time: Option<String>,
    /// The lower limit of the predicted funding rate of the next cycle.
    #[serde(rename = "minFundingRate", skip_serializing_if = "Option::is_none")]
    pub min_funding_rate: Option<String>,
    /// The upper limit of the predicted funding rate of the next cycle.
    #[serde(rename = "maxFundingRate", skip_serializing_if = "Option::is_none")]
    pub max_funding_rate: Option<String>,
    /// Settlement state of funding rate. Valid values are:<br>- `processing`<br>- `settled`
    #[serde(rename = "settState", skip_serializing_if = "Option::is_none")]
    pub sett_state: Option<String>,
    /// If `settState` = `processing`, it is the funding rate used for the current settlement cycle. If `settState` = `settled`, it is the funding rate used for the previous settlement cycle. 
    #[serde(rename = "settFundingRate", skip_serializing_if = "Option::is_none")]
    pub sett_funding_rate: Option<String>,
    /// Premium between the mid-price of the perpetual market and the index price.
    #[serde(rename = "premium", skip_serializing_if = "Option::is_none")]
    pub premium: Option<String>,
    /// Data return time, Unix timestamp format in milliseconds, e.g., 1597026383085.
    #[serde(rename = "ts", skip_serializing_if = "Option::is_none")]
    pub ts: Option<String>,
}

impl FundingRate {
    pub fn new() -> FundingRate {
        FundingRate {
            inst_type: None,
            inst_id: None,
            method: None,
            funding_rate: None,
            next_funding_rate: None,
            funding_time: None,
            next_funding_time: None,
            min_funding_rate: None,
            max_funding_rate: None,
            sett_state: None,
            sett_funding_rate: None,
            premium: None,
            ts: None,
        }
    }
}

