/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GridAlgoPlaceRequestTriggerParamsInner {
    /// Trigger action.
    #[serde(rename = "triggerAction", skip_serializing_if = "Option::is_none")]
    pub trigger_action: Option<TriggerAction>,
    /// Trigger strategy. Supported values:   - instant: Default   - price   - rsi 
    #[serde(rename = "triggerStrategy", skip_serializing_if = "Option::is_none")]
    pub trigger_strategy: Option<TriggerStrategy>,
    /// Delay seconds after action triggered.
    #[serde(rename = "delaySeconds", skip_serializing_if = "Option::is_none")]
    pub delay_seconds: Option<String>,
    /// K-line type. Valid when `triggerStrategy` is `rsi`. 
    #[serde(rename = "timeframe", skip_serializing_if = "Option::is_none")]
    pub timeframe: Option<Timeframe>,
    /// Threshold. Valid when `triggerStrategy` is `rsi`. 
    #[serde(rename = "thold", skip_serializing_if = "Option::is_none")]
    pub thold: Option<i32>,
    /// Trigger condition. Valid when `triggerStrategy` is `rsi`. 
    #[serde(rename = "triggerCond", skip_serializing_if = "Option::is_none")]
    pub trigger_cond: Option<TriggerCond>,
    /// Time period. Valid when `triggerStrategy` is `rsi`. Example: 14 
    #[serde(rename = "timePeriod", skip_serializing_if = "Option::is_none")]
    pub time_period: Option<i32>,
    /// Trigger price. Valid when `triggerStrategy` is `price`.
    #[serde(rename = "triggerPx", skip_serializing_if = "Option::is_none")]
    pub trigger_px: Option<String>,
    /// Stop type:   - Spot grid:     - 1: Sell base currency     - 2: Keep base currency   - Contract grid:     - 1: Market Close All positions     - 2: Keep positions Valid when `triggerAction` is `stop`. 
    #[serde(rename = "stopType", skip_serializing_if = "Option::is_none")]
    pub stop_type: Option<StopType>,
}

impl GridAlgoPlaceRequestTriggerParamsInner {
    pub fn new() -> GridAlgoPlaceRequestTriggerParamsInner {
        GridAlgoPlaceRequestTriggerParamsInner {
            trigger_action: None,
            trigger_strategy: None,
            delay_seconds: None,
            timeframe: None,
            thold: None,
            trigger_cond: None,
            time_period: None,
            trigger_px: None,
            stop_type: None,
        }
    }
}
/// Trigger action.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerAction {
    #[serde(rename = "start")]
    Start,
    #[serde(rename = "stop")]
    Stop,
}

impl Default for TriggerAction {
    fn default() -> TriggerAction {
        Self::Start
    }
}
/// Trigger strategy. Supported values:   - instant: Default   - price   - rsi 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerStrategy {
    #[serde(rename = "instant")]
    Instant,
    #[serde(rename = "price")]
    Price,
    #[serde(rename = "rsi")]
    Rsi,
}

impl Default for TriggerStrategy {
    fn default() -> TriggerStrategy {
        Self::Instant
    }
}
/// K-line type. Valid when `triggerStrategy` is `rsi`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Timeframe {
    #[serde(rename = "3m")]
    Variant3m,
    #[serde(rename = "5m")]
    Variant5m,
    #[serde(rename = "15m")]
    Variant15m,
    #[serde(rename = "30m")]
    Variant30m,
    #[serde(rename = "1H")]
    Variant1H,
    #[serde(rename = "4H")]
    Variant4H,
    #[serde(rename = "1D")]
    Variant1D,
}

impl Default for Timeframe {
    fn default() -> Timeframe {
        Self::Variant3m
    }
}
/// Trigger condition. Valid when `triggerStrategy` is `rsi`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerCond {
    #[serde(rename = "cross_up")]
    CrossUp,
    #[serde(rename = "cross_down")]
    CrossDown,
    #[serde(rename = "above")]
    Above,
    #[serde(rename = "below")]
    Below,
    #[serde(rename = "cross")]
    Cross,
}

impl Default for TriggerCond {
    fn default() -> TriggerCond {
        Self::CrossUp
    }
}
/// Stop type:   - Spot grid:     - 1: Sell base currency     - 2: Keep base currency   - Contract grid:     - 1: Market Close All positions     - 2: Keep positions Valid when `triggerAction` is `stop`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StopType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for StopType {
    fn default() -> StopType {
        Self::Variant1
    }
}

