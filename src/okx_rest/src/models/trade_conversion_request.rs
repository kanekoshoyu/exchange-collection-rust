/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TradeConversionRequest {
    /// Quote ID
    #[serde(rename = "quoteId")]
    pub quote_id: String,
    /// Base currency, e.g., BTC in BTC-USDT
    #[serde(rename = "baseCcy")]
    pub base_ccy: String,
    /// Quote currency, e.g., USDT in BTC-USDT
    #[serde(rename = "quoteCcy")]
    pub quote_ccy: String,
    /// Trade side based on baseCcy
    #[serde(rename = "side")]
    pub side: Side,
    /// Quote amount, should not exceed RFQ amount
    #[serde(rename = "sz")]
    pub sz: String,
    /// Quote currency
    #[serde(rename = "szCcy")]
    pub sz_ccy: String,
    /// Client Order ID as assigned by the client
    #[serde(rename = "clTReqId", skip_serializing_if = "Option::is_none")]
    pub cl_t_req_id: Option<String>,
    /// Order tag (applicable to broker user)
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

impl TradeConversionRequest {
    pub fn new(quote_id: String, base_ccy: String, quote_ccy: String, side: Side, sz: String, sz_ccy: String) -> TradeConversionRequest {
        TradeConversionRequest {
            quote_id,
            base_ccy,
            quote_ccy,
            side,
            sz,
            sz_ccy,
            cl_t_req_id: None,
            tag: None,
        }
    }
}
/// Trade side based on baseCcy
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}

