/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Oracle {
    /// ABI-encoded values [kind, timestamp, key, value], where kind equals 'prices', timestamp is the time when price was obtained, key is the asset ticker (e.g. btc) and value is the asset price.
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<String>,
    /// Readable asset prices
    #[serde(rename = "prices", skip_serializing_if = "Option::is_none")]
    pub prices: Option<String>,
    /// Ethereum-compatible ECDSA signatures for each message
    #[serde(rename = "signatures", skip_serializing_if = "Option::is_none")]
    pub signatures: Option<String>,
    /// Time of latest datapoint, Unix timestamp, e.g. 1597026387
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}

impl Oracle {
    pub fn new() -> Oracle {
        Oracle {
            messages: None,
            prices: None,
            signatures: None,
            timestamp: None,
        }
    }
}

