/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GridContractRequest {
    /// Used margin based on USDT.
    #[serde(rename = "sz")]
    pub sz: String,
    /// Contract grid type.
    #[serde(rename = "direction")]
    pub direction: Direction,
    /// Leverage.
    #[serde(rename = "lever")]
    pub lever: String,
    /// Whether or not to open a position when the strategy activates. Default is `false`. Neutral contract grid should omit the parameter. 
    #[serde(rename = "basePos", skip_serializing_if = "Option::is_none")]
    pub base_pos: Option<bool>,
    /// Take profit ratio. `0.1` represents 10%.
    #[serde(rename = "tpRatio", skip_serializing_if = "Option::is_none")]
    pub tp_ratio: Option<String>,
    /// Stop loss ratio. `0.1` represents 10%.
    #[serde(rename = "slRatio", skip_serializing_if = "Option::is_none")]
    pub sl_ratio: Option<String>,
}

impl GridContractRequest {
    pub fn new(sz: String, direction: Direction, lever: String) -> GridContractRequest {
        GridContractRequest {
            sz,
            direction,
            lever,
            base_pos: None,
            tp_ratio: None,
            sl_ratio: None,
        }
    }
}
/// Contract grid type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "short")]
    Short,
    #[serde(rename = "neutral")]
    Neutral,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Long
    }
}

