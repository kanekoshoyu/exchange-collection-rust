/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlgoStopRequest {
    /// Instrument ID, e.g., BTC-USDT.
    #[serde(rename = "instId")]
    pub inst_id: String,
    /// Algorithmic Order ID. Either `algoId` or `algoClOrdId` must be provided. If both are passed, `algoId` will be used. 
    #[serde(rename = "algoId", skip_serializing_if = "Option::is_none")]
    pub algo_id: Option<String>,
    /// Client-supplied Algorithmic Order ID. Either `algoId` or `algoClOrdId` must be provided. If both are passed, `algoId` will be used. 
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// Whether the order should be automatically canceled when the amendment fails. Default is `false`. 
    #[serde(rename = "cxlOnFail", skip_serializing_if = "Option::is_none")]
    pub cxl_on_fail: Option<bool>,
    /// Client Request ID for identifying the amendment request. It must be a combination of alphanumerics, all numbers, or all letters up to 32 characters. 
    #[serde(rename = "reqId", skip_serializing_if = "Option::is_none")]
    pub req_id: Option<String>,
    /// New quantity after amendment. It must be greater than 0. 
    #[serde(rename = "newSz", skip_serializing_if = "Option::is_none")]
    pub new_sz: Option<String>,
    /// New take-profit trigger price. If either the trigger price or the order price is 0, the take-profit is deleted. 
    #[serde(rename = "newTpTriggerPx", skip_serializing_if = "Option::is_none")]
    pub new_tp_trigger_px: Option<String>,
    /// New take-profit order price. If the price is -1, take-profit will be executed at the market price. 
    #[serde(rename = "newTpOrdPx", skip_serializing_if = "Option::is_none")]
    pub new_tp_ord_px: Option<String>,
    /// New stop-loss trigger price. If either the trigger price or the order price is 0, the stop-loss is deleted. 
    #[serde(rename = "newSlTriggerPx", skip_serializing_if = "Option::is_none")]
    pub new_sl_trigger_px: Option<String>,
    /// New stop-loss order price. If the price is -1, stop-loss will be executed at the market price. 
    #[serde(rename = "newSlOrdPx", skip_serializing_if = "Option::is_none")]
    pub new_sl_ord_px: Option<String>,
    /// Take-profit trigger price type. Allowed values: - `last`: last price - `index`: index price - `mark`: mark price 
    #[serde(rename = "newTpTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub new_tp_trigger_px_type: Option<NewTpTriggerPxType>,
    /// Stop-loss trigger price type. Allowed values: - `last`: last price - `index`: index price - `mark`: mark price 
    #[serde(rename = "newSlTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub new_sl_trigger_px_type: Option<NewSlTriggerPxType>,
}

impl AlgoStopRequest {
    pub fn new(inst_id: String) -> AlgoStopRequest {
        AlgoStopRequest {
            inst_id,
            algo_id: None,
            algo_cl_ord_id: None,
            cxl_on_fail: None,
            req_id: None,
            new_sz: None,
            new_tp_trigger_px: None,
            new_tp_ord_px: None,
            new_sl_trigger_px: None,
            new_sl_ord_px: None,
            new_tp_trigger_px_type: None,
            new_sl_trigger_px_type: None,
        }
    }
}
/// Take-profit trigger price type. Allowed values: - `last`: last price - `index`: index price - `mark`: mark price 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NewTpTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for NewTpTriggerPxType {
    fn default() -> NewTpTriggerPxType {
        Self::Last
    }
}
/// Stop-loss trigger price type. Allowed values: - `last`: last price - `index`: index price - `mark`: mark price 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NewSlTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for NewSlTriggerPxType {
    fn default() -> NewSlTriggerPxType {
        Self::Last
    }
}

