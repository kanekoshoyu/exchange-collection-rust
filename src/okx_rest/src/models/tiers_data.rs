/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TiersData {
    /// Underlying (Applicable to FUTURES/SWAP/OPTION)
    #[serde(rename = "uly", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub uly: Option<Option<String>>,
    /// Instrument family (Applicable to FUTURES/SWAP/OPTION)
    #[serde(rename = "instFamily", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub inst_family: Option<Option<String>>,
    /// Instrument ID
    #[serde(rename = "instId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<Option<String>>,
    /// Tiers
    #[serde(rename = "tier", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tier: Option<Option<String>>,
    /// The minimum borrowing amount or position of this gear, applicable to margin/options/perpetual/delivery. The minimum position is 0 by default. It will return the minimum borrowing amount when `ccy` takes effect. 
    #[serde(rename = "minSz", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub min_sz: Option<Option<String>>,
    /// The maximum borrowing amount or number of positions held in this position, applicable to margin/options/perpetual/delivery. It will return the maximum borrowing amount when `ccy` takes effect. 
    #[serde(rename = "maxSz", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_sz: Option<Option<String>>,
    /// Maintenance margin requirement rate
    #[serde(rename = "mmr", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mmr: Option<Option<String>>,
    /// Initial margin requirement rate
    #[serde(rename = "imr", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub imr: Option<Option<String>>,
    /// Maximum available leverage
    #[serde(rename = "maxLever", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_lever: Option<Option<String>>,
    /// Option Margin Coefficient (only applicable to options)
    #[serde(rename = "optMgnFactor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub opt_mgn_factor: Option<Option<String>>,
    /// Quote currency borrowing amount (only applicable to leverage and the case when `instId` takes effect) 
    #[serde(rename = "quoteMaxLoan", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quote_max_loan: Option<Option<String>>,
    /// Base currency borrowing amount (only applicable to leverage and the case when `instId` takes effect) 
    #[serde(rename = "baseMaxLoan", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub base_max_loan: Option<Option<String>>,
}

impl TiersData {
    pub fn new() -> TiersData {
        TiersData {
            uly: None,
            inst_family: None,
            inst_id: None,
            tier: None,
            min_sz: None,
            max_sz: None,
            mmr: None,
            imr: None,
            max_lever: None,
            opt_mgn_factor: None,
            quote_max_loan: None,
            base_max_loan: None,
        }
    }
}

