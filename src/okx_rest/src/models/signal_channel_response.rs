/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SignalChannelResponse {
    /// Signal channel ID
    #[serde(rename = "signalChanId")]
    pub signal_chan_id: String,
    /// Signal channel name
    #[serde(rename = "signalChanName")]
    pub signal_chan_name: String,
    /// Signal channel description
    #[serde(rename = "signalChanDesc", skip_serializing_if = "Option::is_none")]
    pub signal_chan_desc: Option<String>,
    /// User identifier when placing orders via signal
    #[serde(rename = "signalChanToken", skip_serializing_if = "Option::is_none")]
    pub signal_chan_token: Option<String>,
    /// Signal source type: 1: Created by yourself 2: Subscribe 3: Free signal 
    #[serde(rename = "signalSourceType")]
    pub signal_source_type: SignalSourceType,
}

impl SignalChannelResponse {
    pub fn new(signal_chan_id: String, signal_chan_name: String, signal_source_type: SignalSourceType) -> SignalChannelResponse {
        SignalChannelResponse {
            signal_chan_id,
            signal_chan_name,
            signal_chan_desc: None,
            signal_chan_token: None,
            signal_source_type,
        }
    }
}
/// Signal source type: 1: Created by yourself 2: Subscribe 3: Free signal 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SignalSourceType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
}

impl Default for SignalSourceType {
    fn default() -> SignalSourceType {
        Self::Variant1
    }
}

