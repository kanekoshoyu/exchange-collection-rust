/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AmendOrder {
    /// Order ID. Either `ordId` or `clOrdId` is required. If both are passed, `ordId` will be used.
    #[serde(rename = "ordId")]
    pub ord_id: String,
    /// Client Order ID as assigned by the client. Either `ordId` or `clOrdId` is required.
    #[serde(rename = "clOrdId")]
    pub cl_ord_id: String,
    /// Client Request ID as assigned by the client for order amendment. Helps identify the request in the response if provided.
    #[serde(rename = "reqId", skip_serializing_if = "Option::is_none")]
    pub req_id: Option<String>,
    /// New quantity after amendment. Either `newSz` or `newPx` is required. For partially-filled orders, this should include the amount already filled.
    #[serde(rename = "newSz")]
    pub new_sz: String,
    /// New price after amendment. Either `newSz` or `newPx` is required.
    #[serde(rename = "newPx")]
    pub new_px: String,
}

impl AmendOrder {
    pub fn new(ord_id: String, cl_ord_id: String, new_sz: String, new_px: String) -> AmendOrder {
        AmendOrder {
            ord_id,
            cl_ord_id,
            req_id: None,
            new_sz,
            new_px,
        }
    }
}

