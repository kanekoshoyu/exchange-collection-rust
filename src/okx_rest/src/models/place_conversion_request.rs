/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlaceConversionRequest {
    /// Type of small payment currency convert from. Maximum 5 currencies can be selected in one order. Separate them with commas if multiple.
    #[serde(rename = "fromCcy")]
    pub from_ccy: Vec<String>,
    /// Type of mainstream currency convert to. Only one receiving currency type can be selected and cannot be the same as the small payment currencies.
    #[serde(rename = "toCcy")]
    pub to_ccy: String,
    /// Funding source: 1 for Trading account, 2 for Funding account. Default is 1.
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Source>,
}

impl PlaceConversionRequest {
    pub fn new(from_ccy: Vec<String>, to_ccy: String) -> PlaceConversionRequest {
        PlaceConversionRequest {
            from_ccy,
            to_ccy,
            source: None,
        }
    }
}
/// Funding source: 1 for Trading account, 2 for Funding account. Default is 1.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for Source {
    fn default() -> Source {
        Self::Variant1
    }
}

