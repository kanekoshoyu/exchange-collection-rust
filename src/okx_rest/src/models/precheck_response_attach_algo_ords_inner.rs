/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrecheckResponseAttachAlgoOrdsInner {
    /// Client-supplied Algo ID when placing order attaching TP/SL.
    #[serde(rename = "attachAlgoClOrdId")]
    pub attach_algo_cl_ord_id: String,
    /// Take-profit trigger price. Conditional TP order.
    #[serde(rename = "tpTriggerPx")]
    pub tp_trigger_px: String,
    /// Take-profit order price.
    #[serde(rename = "tpOrdPx")]
    pub tp_ord_px: String,
    /// TP order kind. Default is 'condition'.
    #[serde(rename = "tpOrdKind")]
    pub tp_ord_kind: TpOrdKind,
    /// Stop-loss trigger price.
    #[serde(rename = "slTriggerPx")]
    pub sl_trigger_px: String,
    /// Stop-loss order price.
    #[serde(rename = "slOrdPx")]
    pub sl_ord_px: String,
    /// Take-profit trigger price type. Default is 'last'.
    #[serde(rename = "tpTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px_type: Option<TpTriggerPxType>,
    /// Stop-loss trigger price type. Default is 'last'.
    #[serde(rename = "slTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px_type: Option<SlTriggerPxType>,
    /// Size. Only applicable to TP orders with split TPs.
    #[serde(rename = "sz", skip_serializing_if = "Option::is_none")]
    pub sz: Option<String>,
}

impl PrecheckResponseAttachAlgoOrdsInner {
    pub fn new(attach_algo_cl_ord_id: String, tp_trigger_px: String, tp_ord_px: String, tp_ord_kind: TpOrdKind, sl_trigger_px: String, sl_ord_px: String) -> PrecheckResponseAttachAlgoOrdsInner {
        PrecheckResponseAttachAlgoOrdsInner {
            attach_algo_cl_ord_id,
            tp_trigger_px,
            tp_ord_px,
            tp_ord_kind,
            sl_trigger_px,
            sl_ord_px,
            tp_trigger_px_type: None,
            sl_trigger_px_type: None,
            sz: None,
        }
    }
}
/// TP order kind. Default is 'condition'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TpOrdKind {
    #[serde(rename = "condition")]
    Condition,
    #[serde(rename = "limit")]
    Limit,
}

impl Default for TpOrdKind {
    fn default() -> TpOrdKind {
        Self::Condition
    }
}
/// Take-profit trigger price type. Default is 'last'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TpTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for TpTriggerPxType {
    fn default() -> TpTriggerPxType {
        Self::Last
    }
}
/// Stop-loss trigger price type. Default is 'last'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SlTriggerPxType {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "index")]
    Index,
    #[serde(rename = "mark")]
    Mark,
}

impl Default for SlTriggerPxType {
    fn default() -> SlTriggerPxType {
        Self::Last
    }
}

