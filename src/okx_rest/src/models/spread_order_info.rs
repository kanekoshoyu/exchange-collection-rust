/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpreadOrderInfo {
    /// Spread ID.
    #[serde(rename = "sprdId", skip_serializing_if = "Option::is_none")]
    pub sprd_id: Option<String>,
    /// Order ID.
    #[serde(rename = "ordId", skip_serializing_if = "Option::is_none")]
    pub ord_id: Option<String>,
    /// Client Order ID as assigned by the client.
    #[serde(rename = "clOrdId", skip_serializing_if = "Option::is_none")]
    pub cl_ord_id: Option<String>,
    /// Order tag.
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// Price.
    #[serde(rename = "px", skip_serializing_if = "Option::is_none")]
    pub px: Option<String>,
    /// Quantity to buy or sell.
    #[serde(rename = "sz", skip_serializing_if = "Option::is_none")]
    pub sz: Option<String>,
    /// Order type.
    #[serde(rename = "ordType", skip_serializing_if = "Option::is_none")]
    pub ord_type: Option<OrdType>,
    /// Order side.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Last fill quantity.
    #[serde(rename = "fillSz", skip_serializing_if = "Option::is_none")]
    pub fill_sz: Option<String>,
    /// Last fill price.
    #[serde(rename = "fillPx", skip_serializing_if = "Option::is_none")]
    pub fill_px: Option<String>,
    /// Last trade ID.
    #[serde(rename = "tradeId", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<String>,
    /// Accumulated fill quantity.
    #[serde(rename = "accFillSz", skip_serializing_if = "Option::is_none")]
    pub acc_fill_sz: Option<String>,
    /// Live quantity.
    #[serde(rename = "pendingFillSz", skip_serializing_if = "Option::is_none")]
    pub pending_fill_sz: Option<String>,
    /// Quantity pending settlement.
    #[serde(rename = "pendingSettleSz", skip_serializing_if = "Option::is_none")]
    pub pending_settle_sz: Option<String>,
    /// Quantity canceled due to order cancellations or trade rejections.
    #[serde(rename = "canceledSz", skip_serializing_if = "Option::is_none")]
    pub canceled_sz: Option<String>,
    /// Average filled price. If none is filled, it will return \"0\".
    #[serde(rename = "avgPx", skip_serializing_if = "Option::is_none")]
    pub avg_px: Option<String>,
    /// State of the order.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Source of the order cancellation.
    #[serde(rename = "cancelSource", skip_serializing_if = "Option::is_none")]
    pub cancel_source: Option<CancelSource>,
    /// Update time, Unix timestamp format in milliseconds.
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
    /// Creation time, Unix timestamp format in milliseconds.
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
}

impl SpreadOrderInfo {
    pub fn new() -> SpreadOrderInfo {
        SpreadOrderInfo {
            sprd_id: None,
            ord_id: None,
            cl_ord_id: None,
            tag: None,
            px: None,
            sz: None,
            ord_type: None,
            side: None,
            fill_sz: None,
            fill_px: None,
            trade_id: None,
            acc_fill_sz: None,
            pending_fill_sz: None,
            pending_settle_sz: None,
            canceled_sz: None,
            avg_px: None,
            state: None,
            cancel_source: None,
            u_time: None,
            c_time: None,
        }
    }
}
/// Order type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrdType {
    #[serde(rename = "market")]
    Market,
    #[serde(rename = "limit")]
    Limit,
    #[serde(rename = "post_only")]
    PostOnly,
    #[serde(rename = "ioc")]
    Ioc,
}

impl Default for OrdType {
    fn default() -> OrdType {
        Self::Market
    }
}
/// Order side.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// State of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "live")]
    Live,
    #[serde(rename = "partially_filled")]
    PartiallyFilled,
    #[serde(rename = "filled")]
    Filled,
}

impl Default for State {
    fn default() -> State {
        Self::Canceled
    }
}
/// Source of the order cancellation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CancelSource {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "14")]
    Variant14,
    #[serde(rename = "15")]
    Variant15,
    #[serde(rename = "20")]
    Variant20,
    #[serde(rename = "31")]
    Variant31,
    #[serde(rename = "32")]
    Variant32,
    #[serde(rename = "34")]
    Variant34,
    #[serde(rename = "35")]
    Variant35,
}

impl Default for CancelSource {
    fn default() -> CancelSource {
        Self::Variant0
    }
}

