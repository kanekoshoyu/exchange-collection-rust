/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BotAlgoPendingResponse {
    /// Algo ID
    #[serde(rename = "algoId", skip_serializing_if = "Option::is_none")]
    pub algo_id: Option<String>,
    /// Client-supplied Algo ID
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// Instrument type
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<InstType>,
    /// Instrument ID, e.g., BTC-USDT
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Algo order created time, Unix timestamp in milliseconds
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
    /// Algo order updated time, Unix timestamp in milliseconds
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
    /// Algo order type: - `grid`: Spot grid - `contract_grid`: Contract grid 
    #[serde(rename = "algoOrdType", skip_serializing_if = "Option::is_none")]
    pub algo_ord_type: Option<AlgoOrdType>,
    /// Algo order state
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "rebateTrans", skip_serializing_if = "Option::is_none")]
    pub rebate_trans: Option<Vec<models::BotAlgoPendingResponseRebateTransInner>>,
    #[serde(rename = "triggerParams", skip_serializing_if = "Option::is_none")]
    pub trigger_params: Option<Vec<models::BotAlgoPendingResponseTriggerParamsInner>>,
    /// Upper price of price range
    #[serde(rename = "maxPx", skip_serializing_if = "Option::is_none")]
    pub max_px: Option<String>,
    /// Lower price of price range
    #[serde(rename = "minPx", skip_serializing_if = "Option::is_none")]
    pub min_px: Option<String>,
    /// Grid quantity
    #[serde(rename = "gridNum", skip_serializing_if = "Option::is_none")]
    pub grid_num: Option<String>,
    /// Grid type, 1: Arithmetic, 2: Geometric
    #[serde(rename = "runType", skip_serializing_if = "Option::is_none")]
    pub run_type: Option<RunType>,
    /// Take-profit trigger price
    #[serde(rename = "tpTriggerPx", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px: Option<String>,
    /// Stop-loss trigger price
    #[serde(rename = "slTriggerPx", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px: Option<String>,
    /// Number of arbitrages executed
    #[serde(rename = "arbitrageNum", skip_serializing_if = "Option::is_none")]
    pub arbitrage_num: Option<String>,
    /// Total P&L
    #[serde(rename = "totalPnl", skip_serializing_if = "Option::is_none")]
    pub total_pnl: Option<String>,
    /// P&L ratio
    #[serde(rename = "pnlRatio", skip_serializing_if = "Option::is_none")]
    pub pnl_ratio: Option<String>,
    /// Accumulated investment amount in quote currency for Spot grid
    #[serde(rename = "investment", skip_serializing_if = "Option::is_none")]
    pub investment: Option<String>,
    /// Grid profit
    #[serde(rename = "gridProfit", skip_serializing_if = "Option::is_none")]
    pub grid_profit: Option<String>,
    /// Variable P&L
    #[serde(rename = "floatProfit", skip_serializing_if = "Option::is_none")]
    pub float_profit: Option<String>,
    /// Reason for algo order stop
    #[serde(rename = "cancelType", skip_serializing_if = "Option::is_none")]
    pub cancel_type: Option<CancelType>,
    /// Actual stop type
    #[serde(rename = "stopType", skip_serializing_if = "Option::is_none")]
    pub stop_type: Option<StopType>,
    /// Quote currency investment amount for Spot grid
    #[serde(rename = "quoteSz", skip_serializing_if = "Option::is_none")]
    pub quote_sz: Option<String>,
    /// Base currency investment amount for Spot grid
    #[serde(rename = "baseSz", skip_serializing_if = "Option::is_none")]
    pub base_sz: Option<String>,
    /// Contract grid type
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// Whether to open a position when the strategy activates for Contract grid
    #[serde(rename = "basePos", skip_serializing_if = "Option::is_none")]
    pub base_pos: Option<bool>,
    /// Used margin based on USDT for Contract grid
    #[serde(rename = "sz", skip_serializing_if = "Option::is_none")]
    pub sz: Option<String>,
    /// Leverage for Contract grid
    #[serde(rename = "lever", skip_serializing_if = "Option::is_none")]
    pub lever: Option<String>,
    /// Actual leverage for Contract grid
    #[serde(rename = "actualLever", skip_serializing_if = "Option::is_none")]
    pub actual_lever: Option<String>,
    /// Estimated liquidation price for Contract grid
    #[serde(rename = "liqPx", skip_serializing_if = "Option::is_none")]
    pub liq_px: Option<String>,
    /// Underlying for Contract grid
    #[serde(rename = "uly", skip_serializing_if = "Option::is_none")]
    pub uly: Option<String>,
    /// Instrument family for FUTURES/SWAP/OPTION
    #[serde(rename = "instFamily", skip_serializing_if = "Option::is_none")]
    pub inst_family: Option<String>,
    /// Margin used by pending orders for Contract grid
    #[serde(rename = "ordFrozen", skip_serializing_if = "Option::is_none")]
    pub ord_frozen: Option<String>,
    /// Available margin for Contract grid
    #[serde(rename = "availEq", skip_serializing_if = "Option::is_none")]
    pub avail_eq: Option<String>,
    /// Order tag
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// Profit sharing ratio [0, 0.3]
    #[serde(rename = "profitSharingRatio", skip_serializing_if = "Option::is_none")]
    pub profit_sharing_ratio: Option<String>,
    /// Profit sharing order type
    #[serde(rename = "copyType", skip_serializing_if = "Option::is_none")]
    pub copy_type: Option<CopyType>,
    /// Take-profit ratio, e.g., 0.1 represents 10%
    #[serde(rename = "tpRatio", skip_serializing_if = "Option::is_none")]
    pub tp_ratio: Option<String>,
    /// Stop-loss ratio, e.g., 0.1 represents 10%
    #[serde(rename = "slRatio", skip_serializing_if = "Option::is_none")]
    pub sl_ratio: Option<String>,
    /// Accumulated fee, only applicable to Contract grid
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// Accumulated funding fee, only applicable to Contract grid
    #[serde(rename = "fundingFee", skip_serializing_if = "Option::is_none")]
    pub funding_fee: Option<String>,
}

impl BotAlgoPendingResponse {
    pub fn new() -> BotAlgoPendingResponse {
        BotAlgoPendingResponse {
            algo_id: None,
            algo_cl_ord_id: None,
            inst_type: None,
            inst_id: None,
            c_time: None,
            u_time: None,
            algo_ord_type: None,
            state: None,
            rebate_trans: None,
            trigger_params: None,
            max_px: None,
            min_px: None,
            grid_num: None,
            run_type: None,
            tp_trigger_px: None,
            sl_trigger_px: None,
            arbitrage_num: None,
            total_pnl: None,
            pnl_ratio: None,
            investment: None,
            grid_profit: None,
            float_profit: None,
            cancel_type: None,
            stop_type: None,
            quote_sz: None,
            base_sz: None,
            direction: None,
            base_pos: None,
            sz: None,
            lever: None,
            actual_lever: None,
            liq_px: None,
            uly: None,
            inst_family: None,
            ord_frozen: None,
            avail_eq: None,
            tag: None,
            profit_sharing_ratio: None,
            copy_type: None,
            tp_ratio: None,
            sl_ratio: None,
            fee: None,
            funding_fee: None,
        }
    }
}
/// Instrument type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InstType {
    #[serde(rename = "SPOT")]
    Spot,
    #[serde(rename = "MARGIN")]
    Margin,
    #[serde(rename = "FUTURES")]
    Futures,
    #[serde(rename = "SWAP")]
    Swap,
}

impl Default for InstType {
    fn default() -> InstType {
        Self::Spot
    }
}
/// Algo order type: - `grid`: Spot grid - `contract_grid`: Contract grid 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlgoOrdType {
    #[serde(rename = "grid")]
    Grid,
    #[serde(rename = "contract_grid")]
    ContractGrid,
}

impl Default for AlgoOrdType {
    fn default() -> AlgoOrdType {
        Self::Grid
    }
}
/// Algo order state
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "starting")]
    Starting,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "stopping")]
    Stopping,
    #[serde(rename = "pending_signal")]
    PendingSignal,
    #[serde(rename = "no_close_position")]
    NoClosePosition,
}

impl Default for State {
    fn default() -> State {
        Self::Starting
    }
}
/// Grid type, 1: Arithmetic, 2: Geometric
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for RunType {
    fn default() -> RunType {
        Self::Variant1
    }
}
/// Reason for algo order stop
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CancelType {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
    #[serde(rename = "5")]
    Variant5,
    #[serde(rename = "6")]
    Variant6,
}

impl Default for CancelType {
    fn default() -> CancelType {
        Self::Variant0
    }
}
/// Actual stop type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StopType {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for StopType {
    fn default() -> StopType {
        Self::Variant1
    }
}
/// Contract grid type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "short")]
    Short,
    #[serde(rename = "neutral")]
    Neutral,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Long
    }
}
/// Profit sharing order type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CopyType {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
}

impl Default for CopyType {
    fn default() -> CopyType {
        Self::Variant0
    }
}

