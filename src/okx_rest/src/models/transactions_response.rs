/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionsResponse {
    /// Instrument type
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<String>,
    /// Instrument ID
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Last trade ID
    #[serde(rename = "tradeId", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<String>,
    /// Order ID
    #[serde(rename = "ordId", skip_serializing_if = "Option::is_none")]
    pub ord_id: Option<String>,
    /// Client Order ID assigned by the client
    #[serde(rename = "clOrdId", skip_serializing_if = "Option::is_none")]
    pub cl_ord_id: Option<String>,
    /// Bill ID
    #[serde(rename = "billId", skip_serializing_if = "Option::is_none")]
    pub bill_id: Option<String>,
    /// Transaction type
    #[serde(rename = "subType", skip_serializing_if = "Option::is_none")]
    pub sub_type: Option<String>,
    /// Order tag
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// Last filled price
    #[serde(rename = "fillPx", skip_serializing_if = "Option::is_none")]
    pub fill_px: Option<String>,
    /// Last filled quantity
    #[serde(rename = "fillSz", skip_serializing_if = "Option::is_none")]
    pub fill_sz: Option<String>,
    /// Index price at the moment of trade execution
    #[serde(rename = "fillIdxPx", skip_serializing_if = "Option::is_none")]
    pub fill_idx_px: Option<String>,
    /// Last filled profit and loss
    #[serde(rename = "fillPnl", skip_serializing_if = "Option::is_none")]
    pub fill_pnl: Option<String>,
    /// Implied volatility when filled (only applicable to options)
    #[serde(rename = "fillPxVol", skip_serializing_if = "Option::is_none")]
    pub fill_px_vol: Option<String>,
    /// Options price when filled, in USD (only applicable to options)
    #[serde(rename = "fillPxUsd", skip_serializing_if = "Option::is_none")]
    pub fill_px_usd: Option<String>,
    /// Mark volatility when filled (only applicable to options)
    #[serde(rename = "fillMarkVol", skip_serializing_if = "Option::is_none")]
    pub fill_mark_vol: Option<String>,
    /// Forward price when filled (only applicable to options)
    #[serde(rename = "fillFwdPx", skip_serializing_if = "Option::is_none")]
    pub fill_fwd_px: Option<String>,
    /// Mark price when filled (applicable to FUTURES, SWAP, OPTION)
    #[serde(rename = "fillMarkPx", skip_serializing_if = "Option::is_none")]
    pub fill_mark_px: Option<String>,
    /// Order side (buy or sell)
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<String>,
    /// Position side (long, short, or net)
    #[serde(rename = "posSide", skip_serializing_if = "Option::is_none")]
    pub pos_side: Option<String>,
    /// Liquidity type (T: taker, M: maker)
    #[serde(rename = "execType", skip_serializing_if = "Option::is_none")]
    pub exec_type: Option<String>,
    /// Trading fee or rebate currency
    #[serde(rename = "feeCcy", skip_serializing_if = "Option::is_none")]
    pub fee_ccy: Option<String>,
    /// Amount of trading fee or rebate
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// Data generation time in Unix timestamp format (milliseconds)
    #[serde(rename = "ts", skip_serializing_if = "Option::is_none")]
    pub ts: Option<String>,
    /// Trade time
    #[serde(rename = "fillTime", skip_serializing_if = "Option::is_none")]
    pub fill_time: Option<String>,
    /// Fee rate (applicable to SPOT and MARGIN only)
    #[serde(rename = "feeRate", skip_serializing_if = "Option::is_none")]
    pub fee_rate: Option<String>,
}

impl TransactionsResponse {
    pub fn new() -> TransactionsResponse {
        TransactionsResponse {
            inst_type: None,
            inst_id: None,
            trade_id: None,
            ord_id: None,
            cl_ord_id: None,
            bill_id: None,
            sub_type: None,
            tag: None,
            fill_px: None,
            fill_sz: None,
            fill_idx_px: None,
            fill_pnl: None,
            fill_px_vol: None,
            fill_px_usd: None,
            fill_mark_vol: None,
            fill_fwd_px: None,
            fill_mark_px: None,
            side: None,
            pos_side: None,
            exec_type: None,
            fee_ccy: None,
            fee: None,
            ts: None,
            fill_time: None,
            fee_rate: None,
        }
    }
}

