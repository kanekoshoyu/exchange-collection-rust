/*
 * OKX API
 *
 * Welcome to OKX Developer document!   excluded below endpoints as they are if you need them please add and commit to https://github.com/kanekoshoyu/exchange-collection): - Trading Account (this might become needed, will add when we need it) - Block Trading - Financial Producer - Affiliate - Status - Announcement 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderResponse {
    /// Instrument type
    #[serde(rename = "instType", skip_serializing_if = "Option::is_none")]
    pub inst_type: Option<InstType>,
    /// Instrument ID (e.g., BTC-USDT)
    #[serde(rename = "instId", skip_serializing_if = "Option::is_none")]
    pub inst_id: Option<String>,
    /// Order quantity unit setting for sz.   Options: base_ccy, quote_ccy.   Only applicable to SPOT Market Orders.   Default is quote_ccy for buy, base_ccy for sell. 
    #[serde(rename = "tgtCcy", skip_serializing_if = "Option::is_none")]
    pub tgt_ccy: Option<String>,
    /// Margin currency.   Only applicable to cross MARGIN orders in Spot and futures mode. 
    #[serde(rename = "ccy", skip_serializing_if = "Option::is_none")]
    pub ccy: Option<String>,
    /// Order ID
    #[serde(rename = "ordId", skip_serializing_if = "Option::is_none")]
    pub ord_id: Option<String>,
    /// Client Order ID as assigned by the client
    #[serde(rename = "clOrdId", skip_serializing_if = "Option::is_none")]
    pub cl_ord_id: Option<String>,
    /// Order tag
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// Price.   For options, use coin as unit (e.g., BTC, ETH). 
    #[serde(rename = "px", skip_serializing_if = "Option::is_none")]
    pub px: Option<String>,
    /// Options price in USD.   Only applicable to options; return \"\" for other instrument types. 
    #[serde(rename = "pxUsd", skip_serializing_if = "Option::is_none")]
    pub px_usd: Option<String>,
    /// Implied volatility of the options order.   Only applicable to options; return \"\" for other instrument types. 
    #[serde(rename = "pxVol", skip_serializing_if = "Option::is_none")]
    pub px_vol: Option<String>,
    /// Price type of options.   Options: px, pxVol, pxUsd. 
    #[serde(rename = "pxType", skip_serializing_if = "Option::is_none")]
    pub px_type: Option<String>,
    /// Quantity to buy or sell
    #[serde(rename = "sz", skip_serializing_if = "Option::is_none")]
    pub sz: Option<String>,
    /// Profit and loss.   Applicable to orders which have a trade and aim to close position. Always 0 in other conditions. 
    #[serde(rename = "pnl", skip_serializing_if = "Option::is_none")]
    pub pnl: Option<String>,
    /// Order type.   Options: market, limit, post_only, fok, ioc, optimal_limit_ioc, mmp, mmp_and_post_only, op_fok. 
    #[serde(rename = "ordType", skip_serializing_if = "Option::is_none")]
    pub ord_type: Option<String>,
    /// Order side
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<String>,
    /// Position side
    #[serde(rename = "posSide", skip_serializing_if = "Option::is_none")]
    pub pos_side: Option<String>,
    /// Trade mode
    #[serde(rename = "tdMode", skip_serializing_if = "Option::is_none")]
    pub td_mode: Option<String>,
    /// Accumulated fill quantity
    #[serde(rename = "accFillSz", skip_serializing_if = "Option::is_none")]
    pub acc_fill_sz: Option<String>,
    /// Last filled price. If none is filled, it will return \"\".
    #[serde(rename = "fillPx", skip_serializing_if = "Option::is_none")]
    pub fill_px: Option<String>,
    /// Last traded ID
    #[serde(rename = "tradeId", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<String>,
    /// Last filled quantity
    #[serde(rename = "fillSz", skip_serializing_if = "Option::is_none")]
    pub fill_sz: Option<String>,
    /// Last filled time
    #[serde(rename = "fillTime", skip_serializing_if = "Option::is_none")]
    pub fill_time: Option<String>,
    /// Average filled price. If none is filled, it will return \"\".
    #[serde(rename = "avgPx", skip_serializing_if = "Option::is_none")]
    pub avg_px: Option<String>,
    /// State of the order.   Options: canceled, live, partially_filled, filled, mmp_canceled. 
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Self trade prevention ID.   Return \"\" if self trade prevention is not applicable (deprecated). 
    #[serde(rename = "stpId", skip_serializing_if = "Option::is_none")]
    pub stp_id: Option<String>,
    /// Self trade prevention mode.   Return \"\" if self trade prevention is not applicable. 
    #[serde(rename = "stpMode", skip_serializing_if = "Option::is_none")]
    pub stp_mode: Option<String>,
    /// Leverage, from 0.01 to 125.   Only applicable to MARGIN/FUTURES/SWAP. 
    #[serde(rename = "lever", skip_serializing_if = "Option::is_none")]
    pub lever: Option<String>,
    /// Client-supplied Algo ID when placing order attaching TP/SL.
    #[serde(rename = "attachAlgoClOrdId", skip_serializing_if = "Option::is_none")]
    pub attach_algo_cl_ord_id: Option<String>,
    #[serde(rename = "tpTriggerPx", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px: Option<String>,
    /// Take-profit trigger price type.   Options: last, index, mark. 
    #[serde(rename = "tpTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub tp_trigger_px_type: Option<String>,
    /// Take-profit order price.
    #[serde(rename = "tpOrdPx", skip_serializing_if = "Option::is_none")]
    pub tp_ord_px: Option<String>,
    /// Stop-loss trigger price.
    #[serde(rename = "slTriggerPx", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px: Option<String>,
    /// Stop-loss trigger price type.   Options: last, index, mark. 
    #[serde(rename = "slTriggerPxType", skip_serializing_if = "Option::is_none")]
    pub sl_trigger_px_type: Option<String>,
    /// Stop-loss order price.
    #[serde(rename = "slOrdPx", skip_serializing_if = "Option::is_none")]
    pub sl_ord_px: Option<String>,
    #[serde(rename = "attachAlgoOrds", skip_serializing_if = "Option::is_none")]
    pub attach_algo_ords: Option<Vec<models::AlgoOrds>>,
    #[serde(rename = "linkedAlgoOrd", skip_serializing_if = "Option::is_none")]
    pub linked_algo_ord: Option<Box<models::OrderResponseLinkedAlgoOrd>>,
    /// Fee currency
    #[serde(rename = "feeCcy", skip_serializing_if = "Option::is_none")]
    pub fee_ccy: Option<String>,
    /// Fee or rebate amount
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// Rebate currency
    #[serde(rename = "rebateCcy", skip_serializing_if = "Option::is_none")]
    pub rebate_ccy: Option<String>,
    /// Order source
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// Rebate amount
    #[serde(rename = "rebate", skip_serializing_if = "Option::is_none")]
    pub rebate: Option<String>,
    /// Category of order.   Options: normal, twap, adl, full_liquidation, partial_liquidation, delivery, ddh. 
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// Whether the order can only reduce position size.   Valid options: true, false. 
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<String>,
    /// Whether it is a TP limit order. Valid options: true, false.
    #[serde(rename = "isTpLimit", skip_serializing_if = "Option::is_none")]
    pub is_tp_limit: Option<String>,
    /// Code of the cancellation source.
    #[serde(rename = "cancelSource", skip_serializing_if = "Option::is_none")]
    pub cancel_source: Option<String>,
    /// Reason for the cancellation.
    #[serde(rename = "cancelSourceReason", skip_serializing_if = "Option::is_none")]
    pub cancel_source_reason: Option<String>,
    /// Quick Margin type.   Options: manual, auto_borrow, auto_repay.   Only applicable to Quick Margin Mode of isolated margin. 
    #[serde(rename = "quickMgnType", skip_serializing_if = "Option::is_none")]
    pub quick_mgn_type: Option<String>,
    /// Client-supplied Algo ID.   Value exists when algo order attaching algoClOrdId is triggered, otherwise \"\". 
    #[serde(rename = "algoClOrdId", skip_serializing_if = "Option::is_none")]
    pub algo_cl_ord_id: Option<String>,
    /// Algo ID.   Value exists when algo order is triggered, otherwise \"\". 
    #[serde(rename = "algoId", skip_serializing_if = "Option::is_none")]
    pub algo_id: Option<String>,
    /// Update time in Unix timestamp format (milliseconds).
    #[serde(rename = "uTime", skip_serializing_if = "Option::is_none")]
    pub u_time: Option<String>,
    /// Creation time in Unix timestamp format (milliseconds).
    #[serde(rename = "cTime", skip_serializing_if = "Option::is_none")]
    pub c_time: Option<String>,
}

impl OrderResponse {
    pub fn new() -> OrderResponse {
        OrderResponse {
            inst_type: None,
            inst_id: None,
            tgt_ccy: None,
            ccy: None,
            ord_id: None,
            cl_ord_id: None,
            tag: None,
            px: None,
            px_usd: None,
            px_vol: None,
            px_type: None,
            sz: None,
            pnl: None,
            ord_type: None,
            side: None,
            pos_side: None,
            td_mode: None,
            acc_fill_sz: None,
            fill_px: None,
            trade_id: None,
            fill_sz: None,
            fill_time: None,
            avg_px: None,
            state: None,
            stp_id: None,
            stp_mode: None,
            lever: None,
            attach_algo_cl_ord_id: None,
            tp_trigger_px: None,
            tp_trigger_px_type: None,
            tp_ord_px: None,
            sl_trigger_px: None,
            sl_trigger_px_type: None,
            sl_ord_px: None,
            attach_algo_ords: None,
            linked_algo_ord: None,
            fee_ccy: None,
            fee: None,
            rebate_ccy: None,
            source: None,
            rebate: None,
            category: None,
            reduce_only: None,
            is_tp_limit: None,
            cancel_source: None,
            cancel_source_reason: None,
            quick_mgn_type: None,
            algo_cl_ord_id: None,
            algo_id: None,
            u_time: None,
            c_time: None,
        }
    }
}
/// Instrument type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InstType {
    #[serde(rename = "SPOT")]
    Spot,
    #[serde(rename = "MARGIN")]
    Margin,
    #[serde(rename = "SWAP")]
    Swap,
    #[serde(rename = "FUTURES")]
    Futures,
    #[serde(rename = "OPTION")]
    Option,
}

impl Default for InstType {
    fn default() -> InstType {
        Self::Spot
    }
}

